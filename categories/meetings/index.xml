<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>meetings | Matt Stine</title>
    <link>https://www.mattstine.com/categories/meetings/</link>
      <atom:link href="https://www.mattstine.com/categories/meetings/index.xml" rel="self" type="application/rss+xml" />
    <description>meetings</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2020 Matt Stine</copyright><lastBuildDate>Mon, 16 May 2011 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.mattstine.com/images/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>meetings</title>
      <link>https://www.mattstine.com/categories/meetings/</link>
    </image>
    
    <item>
      <title>design meeting patterns/antipatterns</title>
      <link>https://www.mattstine.com/2011/05/16/design-meeting-patternsantipatterns/</link>
      <pubDate>Mon, 16 May 2011 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2011/05/16/design-meeting-patternsantipatterns/</guid>
      <description>&lt;p&gt;For those of you that don&amp;rsquo;t know, I recently returned to the technical ranks as a Software Architect after a three-year stint in management. To make a long story short, I now love my job again. Perhaps I&amp;rsquo;ll write the long story in a future blog entry. On to the topic at hand. Today I led the first significant design discussion that I have led in quite a long time. A few minutes afterward, I was already reflecting on what had occurred and how. The very first thing that I noticed was my drastically different approach to the task. I felt that my facilitation skills were more mature and effective than I remember from previous similar engagements. I&amp;rsquo;m not sure if the time I spent in management (where I facilitated quite a few meetings, though much more business-focused ones) helped, but something certainly has.&lt;/p&gt;
&lt;p&gt;I also noticed several things that I&amp;rsquo;ll call &amp;ldquo;pattern vs. antipattern&amp;rdquo; tugs of war. Quite often during the meeting I felt the group trying to move our discussion in one direction that I, for better or for worse, thought was ineffective. I would then redirect us on to what I felt was a better path. In true catalog form, here&amp;rsquo;s the list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understand the Problem vs. Jump to the Solution&lt;/strong&gt; - only a couple of minutes into our discussion solutions were being flung about like drunken darts. This situation almost always leads to suboptimal or faulty solutions. As a facilitator, try to ensure that the problem has been clearly stated. If at all possible, write it down on a whiteboard. Make sure everyone agrees that the problem as stated is the problem the group is there to solve. Sure enough, after performing this exercise, we all had a very different and clear understanding of the problem than that with which we walked in the door.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assume the Worst vs. Assume the Best&lt;/strong&gt; - occasionally the exact details of a requirement are unclear, and not assuming something will totally derail the design discussion. You have a couple of choices. The first is to halt the discussion and get the details cleared up. This is clearly the best solution, as you&amp;rsquo;ll no longer have to assume anything. However, it can be the case that the person who can clear things up isn&amp;rsquo;t available. Or in some cases, the question you&amp;rsquo;ll be asking will require another meeting at another level of the organization. If you find yourself in that spot, and you can&amp;rsquo;t wait (we couldn&amp;rsquo;t!), then the best approach is to work from the worst possible case scenario. You&amp;rsquo;ll then be in the best position to handle whatever answer comes your way. However, our tendency is often to assume the best (&amp;ldquo;That will &lt;em&gt;never&lt;/em&gt; happen!&amp;quot;). Fight that tendency. However, whatever you choose, follow up at your earliest opportunity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basing Decisions on the Current Situation vs. Basing Decisions on History&lt;/strong&gt; - many times the group wanted to veer off into safer territory. In some cases, a possible solution departed significantly from the current design. While this is a valid concern (we do want consistency of design across the system where possible), it is certainly not a trump card. Occasionally the situation at hand will merit a significant departure from the current design. Another way history can rear its ugly head is the assertion that we&amp;rsquo;ve always solved similar problems like &amp;lsquo;x,&amp;rsquo; so we should do so with this problem as well. Again, note the word &amp;ldquo;similar.&amp;rdquo; All problems are somewhat different and have their own eccentricities. So, rather than working from history, I pushed us back to a clean slate with the statement &amp;ldquo;Let&amp;rsquo;s stop thinking about the past and start from scratch. We may very well come up with the same solution you guys are proposing, but I&amp;rsquo;d rather do so through our own objective analysis and not instinct.&amp;rdquo; Guess what. We came up with a different solution that we all felt better about.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Shooting for the &amp;ldquo;Best&amp;rdquo; Solution vs. the &amp;ldquo;Easiest&amp;rdquo; Solution&lt;/strong&gt; - now sometimes we can&amp;rsquo;t afford the best solution. I grant that. However, I&amp;rsquo;m trying to fight the tendency to immediately jump to the &amp;ldquo;easiest thing that could possibly work.&amp;rdquo; Often this pops up in the first P vs. AP - if we don&amp;rsquo;t clearly understand the problem, sometimes an easy solution jumps out that doesn&amp;rsquo;t deal with the underlying details we&amp;rsquo;ve yet to uncover. Also, sometimes the best solution is quite simple and elegant. It doesn&amp;rsquo;t necessarily have to be harder and more complex than the easiest solution. In fact, sometimes the &amp;ldquo;easiest&amp;rdquo; solution leads to the most accidental complexity in the long-run. So, shoot for the best solution you can come up with and only then, optimize for cost.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Present Possible Solutions Objectively vs. My Solution is the Best!&lt;/strong&gt; - one would hope that we all start here, but we don&amp;rsquo;t. We tend to like our own solutions to problems and want them to &amp;ldquo;win.&amp;rdquo; Our ego can get in the way of even hearing an alternate solution presented by another team member. I point you to &lt;a href=&#34;http://www.code-magazine.com/Article.aspx?quickid=1105121&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;my colleague Ted Neward&amp;rsquo;s post for more on &amp;ldquo;egoless programming.&amp;quot;&lt;/a&gt; So, as a facilitator, you&amp;rsquo;ve got to make sure that all solutions are presented objectively. I often had to say things like &amp;ldquo;OK, let&amp;rsquo;s assume before we ever get started that this is a good solution to the problem and not hack away at it until its fully presented, and we all understand it.&amp;rdquo; In the end, this insistence led us to choose a solution that none of us (myself included) originally thought we&amp;rsquo;d pick.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Validating from Code vs. Validating from Memory&lt;/strong&gt; - more often than not, questions about the existing design/code/behavior will come up. Rather than scratching your head and trying to remember what you wrote six months ago, pull up the code and find out. I can&amp;rsquo;t tell you the number of meetings I&amp;rsquo;ve attended where baseless assertions were made about existing code, only to require another meeting the next day to revisit the whole discussion once those assertions were proven wrong. Again, as a facilitator, I directed us to solve every problem for which all of the facts were available. We inserted placeholders in our solution where questions remained. Guess what we&amp;rsquo;re doing now? Well, I&amp;rsquo;m blogging about the meeting, but the rest of us are validating from code. Tomorrow will fill in the blanks!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
