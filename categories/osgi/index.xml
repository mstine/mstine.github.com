<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>osgi | Matt Stine</title>
    <link>https://www.mattstine.com/categories/osgi/</link>
      <atom:link href="https://www.mattstine.com/categories/osgi/index.xml" rel="self" type="application/rss+xml" />
    <description>osgi</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2020 Matt Stine</copyright><lastBuildDate>Thu, 29 Apr 2010 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.mattstine.com/images/icon_hua2ec155b4296a9c9791d015323e16eb5_11927_512x512_fill_lanczos_center_2.png</url>
      <title>osgi</title>
      <link>https://www.mattstine.com/categories/osgi/</link>
    </image>
    
    <item>
      <title>osgi on rails</title>
      <link>https://www.mattstine.com/2010/04/29/osgi-on-rails/</link>
      <pubDate>Thu, 29 Apr 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/04/29/osgi-on-rails/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve seen quite a few blogs/articles/etc. lately related to the adoption (or lack thereof) of OSGi in the mainstream web application/enterprise application space. A nice summation of these is encapsulated in this excerpt from a comment by Peter Kriens on DZone (you&amp;rsquo;ll find it in the comments section for &lt;a href=&#34;http://java.dzone.com/articles/osgi-perspectives&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://java.dzone.com/articles/osgi-perspectives&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, one of the next frontiers is to make OSGi easier to use for the web app developers. The solid foundation is there, so stop whining and help us create the tools, books, and tutorials that will make OSGi palatable in those markets.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s nothing like a call to action to get me stirred up. It&amp;rsquo;s no secret that I think OSGi is an excellent tool for tackling the complexity of enterprise applications (see my talks on the NFJS tour this year: &lt;a href=&#34;http://www.nofluffjuststuff.com/conference/speaker/matt_stine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.nofluffjuststuff.com/conference/speaker/matt_stine&lt;/a&gt;). However, I will readily admit that the learning curve for tackling any non-trivial application in OSGi is rather steep. My bar for non-trivial is quite low - try learning OSGi while simultaneously attempting to get a mainstream framework like Hibernate working properly.&lt;/p&gt;
&lt;p&gt;I think that what we need is a tool that will enable a developer new to OSGi to get an OSGi-enabled web application up and running fairly readily. In fact, I think it would be good to absolutely minimize the amount of OSGi know-how required to get a basic web application into production, while at the same time leaving all of OSGi available just under the covers so that it can be easily accessed when I know what I need and how to use it. So here&amp;rsquo;s my proposal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow in the footsteps of AppFuse, Grails, Rails, Roo, etc. and put together a web application toolkit that will allow one to instantly spin-up a deployable OSGI-enabled web application.&lt;/li&gt;
&lt;li&gt;Since we&amp;rsquo;re talking about catering to mainstream here, Java the language ought to be the primary language used for development. With that said, we should not put up any barriers to using other languages available on the JVM.&lt;/li&gt;
&lt;li&gt;Bootstrap a DB-agnostic persistence layer leveraging JPA and make it easily accessible across the application bundles.&lt;/li&gt;
&lt;li&gt;Bootstrap a dependency injection framework for OSGi services based on the Blueprint standard.&lt;/li&gt;
&lt;li&gt;Bootstrap a security layer and provide a basic user/role security module with provided login, logout, etc. facilities.&lt;/li&gt;
&lt;li&gt;Pick a set of modern Java web application frameworks (e.g. Spring MVC, Struts 2, etc.) and make them easily pluggable.&lt;/li&gt;
&lt;li&gt;Wrap a nice build system around all of this that leverages a modern build tool (e.g. Gradle or Maven 3), the best of the PAX Tools features (especially Pax Construct, Exam, and Runner), and good facilities for automated testing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, who&amp;rsquo;s with me? I&amp;rsquo;m open to any suggestions/comments/rants, etc.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
