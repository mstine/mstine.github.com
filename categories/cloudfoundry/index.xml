<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloudfoundry | Matt Stine</title>
    <link>https://www.mattstine.com/categories/cloudfoundry/</link>
      <atom:link href="https://www.mattstine.com/categories/cloudfoundry/index.xml" rel="self" type="application/rss+xml" />
    <description>cloudfoundry</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Matt Stine</copyright><lastBuildDate>Wed, 18 Feb 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>cloudfoundry</title>
      <link>https://www.mattstine.com/categories/cloudfoundry/</link>
    </image>
    
    <item>
      <title>cloud native app arch training</title>
      <link>https://www.mattstine.com/2015/02/18/cloud-native-app-arch-training/</link>
      <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2015/02/18/cloud-native-app-arch-training/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m offering a two-day, intensive, hands-on training course at the upcoming O&amp;#8217;Reilly Software Architecture Conference in Boston, MS.
The class is entitled &lt;a href=&#34;http://softwarearchitecturecon.com/sa2015/public/schedule/detail/39989&#34;&gt;Cloud-Native Application Architectures with Spring and Cloud Foundry&lt;/a&gt;.
In this class you will have the opportunity to implement an easy-to-understand storefront system (complete with product search, details, reviews, and recommendations) as a cloud-native architecture using Spring and Cloud Foundry.
In addition, you&amp;#8217;ll get hands-on exposure to the Netflix OSS family of technologies.
All of this will happen over the course of 8 90-minute training sessions with 26 self-guided hands-on labs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use the discount code &lt;strong&gt;SPRING&lt;/strong&gt; for a 20% discount on your pass!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Join us!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>bosh and cloud api compatibility</title>
      <link>https://www.mattstine.com/2013/08/02/bosh-and-cloud-api-compatibility/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2013/08/02/bosh-and-cloud-api-compatibility/</guid>
      <description>&lt;p&gt;The gauntlet has again been dropped in the world of cloud interoperability. The dueling factions include those asserting that competitors to Amazon&#39;s web services (principally OpenStack) must adopt AWS&#39;s API&#39;s in order to remain viable, and those that believe such &amp;ldquo;API cloning&amp;rdquo; will do nothing more than stunt innovation. If you were to ask me, I&#39;d say that we&#39;ve seen this play out before. Remember the &amp;ldquo;Clone Wars&amp;rdquo; that began in the late 1980&#39;s and that persisted for the better part of two decades? A huge cast of competitors battled for the title of &amp;ldquo;best PC that&#39;s not manufactured by IBM.&amp;rdquo; How did that play out? For a relatively short period of time, having the best PC &amp;ldquo;designed for Microsoft Windows,&amp;rdquo; along with the leanest supply chain (see Dell), paved a golden path to victory. And then Steve Jobs returns to Apple, and now better than 50% of the laptops running in the Starbucks in which I&#39;m writing this blog have a shiny white fruit on their lids. As it turns out, &amp;ldquo;going your own way&amp;rdquo; can work out awfully well.&lt;/p&gt;
&lt;p&gt;But that&#39;s not the angle I want to take in this discussion. Let&#39;s dig deeper into what the two sides have to say.&lt;/p&gt;
&lt;p&gt;The battle was first renewed with Cloud Scaling CTO Randy Bias&amp;rsquo; &lt;a href=&#34;http://www.cloudscaling.com/blog/cloud-computing/openstack-aws&#34;&gt;Open Letter to the OpenStack Community&lt;/a&gt;. Randy adopts the position that full-compatibility with the AWS API&#39;s is necessary for OpenStack&#39;s survival. The gist of his argument is that Amazon currently dominates public cloud, supporting this via a comparison between Amazon&#39;s and Rackspace&#39;s growth rates since 2009, and that they also &amp;ldquo;control the innovation curve&amp;rdquo; as they push &amp;ldquo;new features into production at a breathtaking pace.&amp;rdquo; Furthermore, he asserts that any hope for survival with respect to competing cloud platforms is limited to the hybrid cloud space, providing enterprises with the capability to seamlessly migrate workloads between the public cloud and private, on-premises clouds. Therefore, OpenStack must adopt API compatibility with AWS in order to become the enterprise choice for hybrid cloud.&lt;/p&gt;
&lt;p&gt;A few days later, Rackspace&#39;s &amp;ldquo;Startup Liaison Officer&amp;rdquo; Robert Scoble responded with his own &lt;a href=&#34;https://plus.google.com/+Scobleizer/posts/HQ7Wi4WCQse&#34;&gt;Open Letter&lt;/a&gt;. Scoble makes some interesting counterpoints, most notably the argument that customers don&#39;t adopt cloud platforms because of API compatibility with Amazon, but because of the promise of a &amp;ldquo;10x improvement&amp;rdquo; to their own business. In order to provide such improvements, cloud platform competitors must not shackle themselves to a &amp;ldquo;de facto standard&amp;rdquo; API, but rather must focus their limited resources on driving those 10x improvements in infrastructure capability.&lt;/p&gt;
&lt;p&gt;So by now you must be wondering, whose side am I on? I&#39;m on the side of innovation. But that doesn&#39;t necessarily put me in either camp. I think the end goals of both parties are things that we want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Freedom:&lt;/strong&gt; the ability to migrate workloads between cloud infrastructure providers without needing to significantly alter the behavior of the workload itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Innovation:&lt;/strong&gt; the ability to realize capabilities that don&#39;t exist today that will solve emerging problems (particularly those related to the explosion of generated and archived data).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spending development cycles on API compatibility will certainly slow anyone&#39;s ability to innovate. And what is API compatibility anyway? I believe that much of the concern rests on the large investment many enterprises have (or believe they will need to create) in bespoke automation written to a particular vendor&#39;s API. Having recently left a large-scale project that generated thousands of lines of such automation to drive consumption of a particular vendor&#39;s infrastucture platform, and that was in the near term planning to migrate to another platform, I can tell you that this concern is very real. But simply stating that &amp;ldquo;your existing code will work when you target our API&amp;rdquo; does not compatibility make. As Amazon continues to deploy new features at their breathtaking pace, how will OpenStack and other platforms keep up?&lt;/p&gt;
&lt;p&gt;For API compatibility to be &lt;em&gt;real&lt;/em&gt;, a &amp;ldquo;technology compatibility kit&amp;rdquo; (TCK) is needed. For those in the Java world, TCK&#39;s are near and dear. Java itself is not a particular implementation, but a standard API that invites competing implementations and innovation. But for any competing implementation to call itself &amp;ldquo;Java,&amp;rdquo; it must pass the tests contained within the TCK. An AWS TCK is really the only true way to ensure API compatibility. But I think it&#39;s hard to argue that Amazon has any real business interest in creating and sharing one.&lt;/p&gt;
&lt;p&gt;There is another way. Perhaps we should stop creating bespoke automation and rally around a common standard toolkit for managing large-scale cloud application deployments. This toolkit could provide mechanisms for configuration management, orchestration, health management, and rolling upgrades. It could further, as part of its architecture, build an adapter layer between its core components and the underlying infrastructure provider. Plugins could then be developed to provide the toolkit with the ability to manage all of the common infrastructure providers.&lt;/p&gt;
&lt;p&gt;Enter BOSH and it&#39;s Cloud Provider Interface (CPI) layer. BOSH was initially developed as the means of deploying and managing the Cloud Foundry PaaS platform, but it&#39;s much more generally applicable. BOSH can today deploy any distributed system, &lt;em&gt;unchanged&lt;/em&gt;, to any of several popular IaaS providers: VMware vSphere, VMware vCloud Director, Amazon Web Services, and OpenStack. Heresy you say! Not so. Just ask Colin Humphreys of CloudCredo, who recently &lt;a href=&#34;http://blog.cloudfoundry.com/2013/04/30/uk-charity-raises-record-donations-powered-by-cloud-foundry&#34;&gt;described their wildly successful deployment&lt;/a&gt; of Cloud Foundry to a hybrid composition of vSphere and AWS-based clouds. He recently presented a technical deep dive in Pivotal&#39;s offices in which he made the statement (paraphrasing) &amp;ldquo;I took the same Cloud Foundry bits that were running on AWS and deployed them unchanged to vSphere using BOSH.&amp;rdquo; As anyone can tell, this isn&#39;t just theory, it&#39;s production.&lt;/p&gt;
&lt;p&gt;So how then does BOSH make this happen? A trip &lt;a href=&#34;https://github.com/cloudfoundry/bosh/blob/master/bosh_cpi/lib/cloud.rb&#34;&gt;into the code&lt;/a&gt; for the BOSH CPI &amp;ldquo;interface&amp;rdquo; will show a list of core infrastructure capabilities that BOSH requires:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;current_vm_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_stemcell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete_stemcell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_vm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete_vm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;has_vm?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reboot_vm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_vm_metadata&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configure_networks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attach_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snapshot_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete_snapshot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detach_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_disks&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All interactions between BOSH and the underlying infrastructure provider pass through these core methods. As long as a CPI exists that exposes these capabilities to BOSH, BOSH can deploy and manage the lifecycle of Cloud Foundry (or any other distributed system described by a BOSH release) on an infrastructure provider.&lt;/p&gt;
&lt;p&gt;So how hard is it to provide the CPI&#39;s for both AWS and OpenStack? If you choose simple metrics like number of classes (NOC) and lines of code (LOC), not that hard.&lt;/p&gt;
&lt;p&gt;You can find the CPI implementations at these links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudfoundry/bosh/tree/master/bosh_aws_cpi&#34;&gt;&lt;a href=&#34;https://github.com/cloudfoundry/bosh/tree/master/bosh_aws_cpi&#34;&gt;https://github.com/cloudfoundry/bosh/tree/master/bosh_aws_cpi&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudfoundry/bosh/tree/master/bosh_openstack_cpi&#34;&gt;&lt;a href=&#34;https://github.com/cloudfoundry/bosh/tree/master/bosh_openstack_cpi&#34;&gt;https://github.com/cloudfoundry/bosh/tree/master/bosh_openstack_cpi&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First we&#39;ll generate the metrics for AWS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find ./bosh_aws_cpi/lib -name &amp;quot;*.rb&amp;quot; -exec wc -l {} \;
       2 ./bosh_aws_cpi/lib/bosh_aws_cpi.rb
      68 ./bosh_aws_cpi/lib/cloud/aws/aki_picker.rb
      39 ./bosh_aws_cpi/lib/cloud/aws/availability_zone_selector.rb
     651 ./bosh_aws_cpi/lib/cloud/aws/cloud.rb
      22 ./bosh_aws_cpi/lib/cloud/aws/dynamic_network.rb
      30 ./bosh_aws_cpi/lib/cloud/aws/helpers.rb
     171 ./bosh_aws_cpi/lib/cloud/aws/instance_manager.rb
      25 ./bosh_aws_cpi/lib/cloud/aws/manual_network.rb
      37 ./bosh_aws_cpi/lib/cloud/aws/network.rb
      89 ./bosh_aws_cpi/lib/cloud/aws/network_configurator.rb
     189 ./bosh_aws_cpi/lib/cloud/aws/resource_wait.rb
      68 ./bosh_aws_cpi/lib/cloud/aws/stemcell.rb
     114 ./bosh_aws_cpi/lib/cloud/aws/stemcell_creator.rb
      30 ./bosh_aws_cpi/lib/cloud/aws/tag_manager.rb
       7 ./bosh_aws_cpi/lib/cloud/aws/version.rb
      44 ./bosh_aws_cpi/lib/cloud/aws/vip_network.rb
      43 ./bosh_aws_cpi/lib/cloud/aws.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;ll also want the total LOC:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find ./bosh_aws_cpi/lib -name &amp;quot;*.rb&amp;quot; -exec wc -l {} \; | awk &#39;{ sum += $1 } END { print sum }&#39;
1629
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now let&#39;s do the same for OpenStack:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find ./bosh_openstack_cpi/lib -name &amp;quot;*.rb&amp;quot; -exec wc -l {} \;
       4 ./bosh_openstack_cpi/lib/bosh_openstack_cpi.rb
     867 ./bosh_openstack_cpi/lib/cloud/openstack/cloud.rb
      28 ./bosh_openstack_cpi/lib/cloud/openstack/dynamic_network.rb
     131 ./bosh_openstack_cpi/lib/cloud/openstack/helpers.rb
      34 ./bosh_openstack_cpi/lib/cloud/openstack/manual_network.rb
      37 ./bosh_openstack_cpi/lib/cloud/openstack/network.rb
     159 ./bosh_openstack_cpi/lib/cloud/openstack/network_configurator.rb
      16 ./bosh_openstack_cpi/lib/cloud/openstack/tag_manager.rb
       8 ./bosh_openstack_cpi/lib/cloud/openstack/version.rb
      50 ./bosh_openstack_cpi/lib/cloud/openstack/vip_network.rb
      39 ./bosh_openstack_cpi/lib/cloud/openstack.rb
$ find ./bosh_openstack_cpi/lib -name &amp;quot;*.rb&amp;quot; -exec wc -l {} \; | awk &#39;{ sum += $1 } END { print sum }&#39;
1373
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, summarizing:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CPI&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Number of Classes (NOC)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Lines of Code (LOC)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Amazon AWS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1629&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OpenStack&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1373&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let&#39;s make a couple of points about these metrics. First of all, the two CPI&#39;s do not use a common foundation. The AWS CPI uses the &lt;a href=&#34;http://aws.amazon.com/sdkforruby&#34;&gt;AWS SDK for Ruby&lt;/a&gt; while the OpenStack CPI uses &lt;a href=&#34;http://fog.io&#34;&gt;Fog&lt;/a&gt;. Fog could also have been used as the foundation for the AWS CPI, but the CPI authors presumably thought it better to stick with the toolkit provided by Amazon. This is a minor point, however, as both of these toolkits essentially provide simple wrappers around the infrastructure providers&amp;rsquo; REST API&#39;s. It&#39;s doubtful that using a common API wrapper for both CPI&#39;s would have substantially changed the metrics presented here.&lt;/p&gt;
&lt;p&gt;Second, obviously NOC and LOC are rather naive metrics. It&#39;s incredibly possible to write terse code that is opaque, buggy, and hard to maintain or enhance. In fact, according to Code Climate, both of the top-level implementation classes for these CPI&#39;s have quite a lot of room for improvement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::AwsCloud::Cloud&#34;&gt;&lt;a href=&#34;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::AwsCloud::Cloud&#34;&gt;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::AwsCloud::Cloud&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::OpenStackCloud::Cloud&#34;&gt;&lt;a href=&#34;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::OpenStackCloud::Cloud&#34;&gt;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::OpenStackCloud::Cloud&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that said, it is rather amazing that one could encapuslate all of the infrastructure-specific implementation necessary to deploy and manage a distributed system as powerful as Cloud Foundry in &lt;em&gt;less than twenty classes and 1700 lines of code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, to summarize where we&#39;ve been, while there&#39;s an impressive war of words out there regarding API compatibility with Amazon AWS, Cloud Foundry and BOSH don&#39;t necessarily need to take sides. If OpenStack chooses to embrace the AWS API&#39;s, the BOSH AWS CPI will be there waiting. However, if OpenStack chooses to follow in the footsteps of Apple and take the road less traveled, the OpenStack CPI is ready and waiting to evolve with it. Should Google Compute Engine or Microsoft&#39;s Azure gain a foodhold on the innovation curve, they are presumably a relatively simple CPI away from joining the BOSH ecosystem. So if you really want &amp;ldquo;cloud freedom,&amp;rdquo; BOSH is leading the charge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>blue green deployments on cloudfoundry</title>
      <link>https://www.mattstine.com/2013/07/10/blue-green-deployments-on-cloudfoundry/</link>
      <pubDate>Wed, 10 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2013/07/10/blue-green-deployments-on-cloudfoundry/</guid>
      <description>&lt;p&gt;One of the great things about Cloud Foundry is that it is a great enabler. Tall words. But what do they mean? Essentially, Cloud Foundry (and any other well-designed PaaS) enables us to do things as developers and operators that would be extremely difficult in a traditional deployment environments. One particularly valuable area of enablement is our new found ability to practice &lt;a href=&#34;http://continuousdelivery.com/&#34;&gt;Continous Delivery&lt;/a&gt;, meaning that we continuously prove our ability to deliver working software by continuously treating each code commit to a system as if it could be deployed to a production environment. We do this by shipping these commits through what&#39;s called a &amp;ldquo;deployment pipeline,&amp;rdquo; which consists of a series of build-test-deploy cycles that prove out a commit&#39;s suitability for production deployment. At the end of the pipeline we can either deploy automatically to our production environment (i.e. continuous deployment), or we can have a business decision to deploy that &amp;ldquo;deployable artifact&amp;rdquo; or not.&lt;/p&gt;
&lt;p&gt;One particular practice associated with Continuous Delivery is &lt;a href=&#34;http://martinfowler.com/bliki/BlueGreenDeployment.html&#34;&gt;Blue-Green Deployments&lt;/a&gt;. Martin Fowler describes these very well at the link provided, but I&#39;ll summarize briefly here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cut-over to a new software version is tricky, and must be quick in order to minimize downtime events.&lt;/li&gt;
&lt;li&gt;Blue-green deployments ensure the parallel existence of two, identical (as possible) production environments.&lt;/li&gt;
&lt;li&gt;At any given point, only one (e.g. blue) services production traffic.&lt;/li&gt;
&lt;li&gt;New deploys are made to the other (e.g. green) environment. Final smoke testing is performed here.&lt;/li&gt;
&lt;li&gt;When green is determined ready, we begin routing traffic to it.&lt;/li&gt;
&lt;li&gt;We then stop routing traffic to blue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, there are several concerns that must be dealt with at the application level in order for this to work (datastores should support concurrent usage by two app versions, long running requests may be killed, etc.). What we&#39;ll focus on in this post is how Cloud Foundry supports the mechanics summarized above.&lt;/p&gt;
&lt;p&gt;We&#39;ll begin with a basic Spring application named &lt;code&gt;ms-spr-demo&lt;/code&gt;. This app takes users to a simple web page announcing the ubiquitous &amp;ldquo;Hello World!&amp;rdquo; message. We&#39;ll utilize the &lt;code&gt;cf&lt;/code&gt; command-line interface to push the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf push --path build/libs/cf-demo.war
Name&amp;gt; ms-spr-demo

Instances&amp;gt; 1

Memory Limit&amp;gt; 512M

Creating ms-spr-demo... OK

1: ms-spr-demo
2: none
Subdomain&amp;gt; ms-spr-demo

1: cfapps.io
2: mattstine.com
3: none
Domain&amp;gt; 1

Creating route ms-spr-demo.cfapps.io... OK
Binding ms-spr-demo.cfapps.io to ms-spr-demo... OK

Create services for application?&amp;gt; n

Save configuration?&amp;gt; y

Saving to manifest.yml... OK
Uploading ms-spr-demo... OK
Starting ms-spr-demo... OK
-----&amp;gt; Downloaded app package (9.5M)
Installing java.
Downloading JDK...
Copying openjdk-1.7.0_25.tar.gz from the buildpack cache ...
Unpacking JDK to .jdk
Downloading Tomcat: apache-tomcat-7.0.41.tar.gz
Copying apache-tomcat-7.0.41.tar.gz from the buildpack cache ...
Unpacking Tomcat to .tomcat
Copying mysql-connector-java-5.1.12.jar from the buildpack cache ...
Copying postgresql-9.0-801.jdbc4.jar from the buildpack cache ...
Copying auto-reconfiguration-0.6.8.jar from the buildpack cache ...
-----&amp;gt; Uploading droplet (48M)
-----&amp;gt; Uploaded droplet
Checking ms-spr-demo...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  1/1 instances: 1 running
OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The end result of this &lt;code&gt;cf push&lt;/code&gt; event is that an application is now serving requests at &lt;code&gt;http://ms-spr-demo.cfapps.io&lt;/code&gt;. The following graphic shows the state of our system, with the CF Router sending traffic to our application:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.mattstine.com/images/blue-green/BlueGreen1.png&#34; alt=&#34;BlueGreen1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next, we make a slight change to our application. Rather that saying &amp;ldquo;Hello World!&amp;rdquo; we decide to make it say &amp;ldquo;Goodbye World!&amp;rdquo; We build a new war file for the application. Rather than letting &lt;code&gt;cf&lt;/code&gt; prompt us this time, we&#39;ll make use of the &lt;code&gt;manifest.yml&lt;/code&gt; file that we saved from our previous push. However, we&#39;ll rename the application and provide a new route. Take a look:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+++
applications:
- name: ms-spr-demo-green
  memory: 512M
  instances: 1
  url: ms-spr-demo-green.cfapps.io
  path: build/libs/cf-demo.war
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we&#39;re calling our new application version &lt;code&gt;ms-spr-demo-green&lt;/code&gt; and we&#39;re mapping it to the URL &lt;code&gt;ms-spr-demo-green.cfapps.io&lt;/code&gt;. Let&#39;s push the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Using manifest file manifest.yml

Creating ms-spr-demo-green... OK

1: ms-spr-demo-green
2: none
Subdomain&amp;gt; ms-spr-demo-green

1: cfapps.io
2: mattstine.com
3: none
Domain&amp;gt; 1

Creating route ms-spr-demo-green.cfapps.io... OK
Binding ms-spr-demo-green.cfapps.io to ms-spr-demo-green... OK
Uploading ms-spr-demo-green... OK
Starting ms-spr-demo-green... OK
-----&amp;gt; Downloaded app package (9.5M)
Installing java.
Downloading JDK...
Copying openjdk-1.7.0_25.tar.gz from the buildpack cache ...
Unpacking JDK to .jdk
Downloading Tomcat: apache-tomcat-7.0.41.tar.gz
Copying apache-tomcat-7.0.41.tar.gz from the buildpack cache ...
Unpacking Tomcat to .tomcat
Copying mysql-connector-java-5.1.12.jar from the buildpack cache ...
Copying postgresql-9.0-801.jdbc4.jar from the buildpack cache ...
Copying auto-reconfiguration-0.6.8.jar from the buildpack cache ...
-----&amp;gt; Uploading droplet (48M)
-----&amp;gt; Uploaded droplet
Checking ms-spr-demo-green...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  1/1 instances: 1 running
OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have two instances of the application running, each of them using distinct routes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.mattstine.com/images/blue-green/BlueGreen2.png&#34; alt=&#34;BlueGreen2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now it&#39;s time for the magic to happen. We&#39;ll map our original URL route (&lt;code&gt;ms-spr-demo.cfapps.io&lt;/code&gt;) to our &amp;ldquo;green&amp;rdquo; instance. This is accomplished very simply by using &lt;code&gt;cf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf map --app ms-spr-demo-green --host ms-spr-demo --domain cfapps.io
Binding ms-spr-demo.cfapps.io to ms-spr-demo-green... OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CF router immediately begins to load balance requests between each instance of the application, as shown here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.mattstine.com/images/blue-green/BlueGreen3.png&#34; alt=&#34;BlueGreen3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now our router will send requests to &lt;code&gt;ms-spr-demo.cfapps.io&lt;/code&gt; to both instances of the application, while &lt;code&gt;ms-spr-demo-green.cfapps.io&lt;/code&gt; only services the &amp;ldquo;green&amp;rdquo; instance. Once we determine that all is well, it&#39;s time to stop routing requests to the &amp;ldquo;blue&amp;rdquo; instance. This is just as simple using &lt;code&gt;cf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf unmap --url ms-spr-demo.cfapps.io --app ms-spr-demo
Unbinding ms-spr-demo.cfapps.io from ms-spr-demo... OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our &amp;ldquo;blue&amp;rdquo; instance is now no longer receiving any web traffic:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.mattstine.com/images/blue-green/BlueGreen4.png&#34; alt=&#34;BlueGreen4&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can now decomission our &amp;ldquo;blue&amp;rdquo; instance, or we can leave it around for a period of time in case we decide we need to roll back our changes. The important thing is that our customers suffered absolutely no downtime!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>clojure on cloud foundry</title>
      <link>https://www.mattstine.com/2013/05/29/clojure-on-cloud-foundry/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2013/05/29/clojure-on-cloud-foundry/</guid>
      <description>&lt;p&gt;I was inspired by Brian McClain&#39;s &lt;a href=&#34;http://catdevrandom.me/blog/2013/05/16/buildpacks-in-cloud-foundry-v2/&#34;&gt;post on bringing Haskell to Cloud Foundry&lt;/a&gt; using Cloud Foundry v2 buildpacks, so I decided to go on a buildpack journey of my own. Since Clojure is the language I most enjoying &amp;ldquo;toying around with,&amp;rdquo; I thought I&#39;d try to deploy a simple Clojure web application using the &lt;a href=&#34;https://github.com/mstine/heroku-buildpack-clojure&#34;&gt;Heroku Clojure Buildpack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To reiterate some of the coolness around buildpacks, they are what allows a PaaS like Cloud Foundry or Heroku to support various runtimes without first building that support into the core platform. If your favorite language or framework runtime isn&#39;t available, there&#39;s absolutely nothing stopping you from providing your own buildpack to support it. Stuff can get crazy &amp;ndash; McClain has even &lt;a href=&#34;https://twitter.com/BrianMMcClain/status/339479905974751232&#34;&gt;hinted at bringing FORTRAN support to Cloud Foundry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided for my experiment to build a VERY basic &amp;ldquo;Hello World&amp;rdquo; style application using &lt;a href=&#34;https://github.com/ring-clojure/ring&#34;&gt;Ring&lt;/a&gt;, which is &amp;ldquo;a Clojure web applications library inspired by Python&#39;s WSGI and Ruby&#39;s Rack.&amp;rdquo; The easiest way to get started building Ring applications is to utilize the popular Clojure build tool &lt;a href=&#34;http://github.com/technomancy/leiningen&#34;&gt;Leiningen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First I started by creating a new project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lein new hello-cf
$ cd hello-cf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next task was to add the Ring dependencies to my &lt;code&gt;project.clj&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defproject hello-cf &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :min-lein-version &amp;quot;2.0.0&amp;quot;
  :description &amp;quot;Hello Clojure on Cloud Foundry!&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies [[org.clojure/clojure &amp;quot;1.4.0&amp;quot;]
                 [ring/ring-core &amp;quot;1.1.8&amp;quot;]
                 [ring/ring-jetty-adapter &amp;quot;1.1.8&amp;quot;]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then it was time to create the Ring application itself, by editing &lt;code&gt;src/hello_cf/core.clj&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns hello-cf.core
  (:use [ring.adapter.jetty :only [run-jetty]]))

(defn handler [request]
  {:status 200
   :headers {&amp;quot;Content-Type&amp;quot; &amp;quot;text/html&amp;quot;}
   :body &amp;quot;Hello Cloud Foundry from heroku-buildpack-clojure!&amp;quot;})

(defn -main [port]
  (run-jetty handler {:port (Integer. port)}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s break this down a bit. The &lt;code&gt;handler&lt;/code&gt; function will handle any HTTP request that hits our application, and will return an &amp;ldquo;OK&amp;rdquo; response containing a pleasant message indicating that we&#39;ve succeeded. That&#39;s really about it. Our application is complete. We can test it out by running the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lein trampoline run -m hello-cf.core 8080
2013-05-29 22:42:52.576:INFO:oejs.Server:jetty-7.6.1.v20120215
2013-05-29 22:42:52.804:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hitting &lt;code&gt;http://localhost:8080&lt;/code&gt; in the browser confirms that we&#39;re well on our way. Now it&#39;s time to trying pushing the application to Cloud Foundry. As Brian stated in his blog, one of the stellar aspects of Cloud Foundry buildpacks is that they are approximately the same as Heroku buildpacks. Practically, this means that one &lt;em&gt;should&lt;/em&gt; be able to utilize a Heroku buildpack on Cloud Foundry with minimal or no modifications. Let&#39;s put that theory to the test, shall we? Before we do, let&#39;s create a &lt;code&gt;Procfile&lt;/code&gt; quickly to let the buildpack know what we want to run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;web: lein with-profile production trampoline run -m hello-cf.core $PORT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And on with the push:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf push hello-cf --buildpack=git://github.com/heroku/heroku-buildpack-clojure.git
Using manifest file manifest.yml

Creating hello-cf... OK

1: hello-cf
2: none
Subdomain&amp;gt; hello-cf

1: mstine.cf-app.com
2: none
Domain&amp;gt; mstine.cf-app.com

Binding hello-cf.mstine.cf-app.com to hello-cf... OK
Uploading hello-cf... OK
Starting hello-cf... OK
-----&amp;gt; Downloaded app package (12K)
Initialized empty Git repository in /tmp/buildpacks/heroku-buildpack-clojure.git/.git/
Installing heroku-buildpack-clojure.git.
-----&amp;gt; Installing OpenJDK 1.6...done
-----&amp;gt; Installing Leiningen
       Downloading: leiningen-2.1.2-standalone.jar
       Writing: lein script
-----&amp;gt; Building with Leiningen
       Running: lein with-profile production compile :all
       Retrieving lein-standalone-repl/lein-standalone-repl/0.1.5/lein-standalone-repl-0.1.5.pom from clojars
       Retrieving lein-standalone-repl/lein-standalone-repl/0.1.5/lein-standalone-repl-0.1.5.jar from clojars
       Performing task &#39;compile&#39; with profile(s): &#39;production&#39;
       Retrieving org/clojure/clojure/1.4.0/clojure-1.4.0.pom from
       ...
       Compiling hello-cf.core
-----&amp;gt; Uploading staged droplet (66M)
-----&amp;gt; Uploaded droplet
Checking hello-cf...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 down
  0/1 instances: 1 starting
  0/1 instances: 1 flapping
Application failed to start.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Drat. Let&#39;s take a quick look at the logs to see what may be awry:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Reading logs/stderr.log... OK
/home/vcap/app/.lein/bin/lein: line 42: java: command not found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ah-hah! Looks like the existing buildpack is making some assumptions about the structure of our application that no longer hold true on Cloud Foundry. So, I followed in Brian&#39;s footsteps and &lt;a href=&#34;https://github.com/mstine/heroku-buildpack-clojure&#34;&gt;forked away&lt;/a&gt;. One small &lt;a href=&#34;https://github.com/mstine/heroku-buildpack-clojure/commit/fd2c46cc23267fa2d808123d2fd58f4295da4b85&#34;&gt;commit&lt;/a&gt; looks like it ought to fix the problem. Let&#39;s give it another try:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf push hello-cf --buildpack=git://github.com/mstine/heroku-buildpack-clojure.git
Using manifest file manifest.yml

Not applying manifest changes without --reset
See `cf diff` for more details.

Uploading hello-cf... OK
Changes:
  buildpack: &#39;git://github.com/heroku/heroku-buildpack-clojure.git&#39; -&amp;gt; &#39;git://github.com/mstine/heroku-buildpack-clojure.git&#39;
Updating hello-cf... OK
Stopping hello-cf... OK

Starting hello-cf... OK
-----&amp;gt; Downloaded app package (8.0K)
-----&amp;gt; Downloaded app buildpack cache (17M)
Initialized empty Git repository in /tmp/buildpacks/heroku-buildpack-clojure.git/.git/
Installing heroku-buildpack-clojure.git.
-----&amp;gt; Installing OpenJDK 1.6...done
-----&amp;gt; Using cached Leiningen 2.1.2
       Writing: lein script
-----&amp;gt; Building with Leiningen
       Running: lein with-profile production compile :all
       Performing task &#39;compile&#39; with profile(s): &#39;production&#39;
       Compiling hello-cf.core
-----&amp;gt; Uploading staged droplet (66M)
-----&amp;gt; Uploaded droplet
Checking hello-cf...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  1/1 instances: 1 running
OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BOOM!&lt;/p&gt;
&lt;p&gt;I quickly pointed my browser, and as yesterday&#39;s tweet indicates, success:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-partner=&#34;tweetdeck&#34;&gt;&lt;p&gt;Yeah...that just happened. cc: &lt;a href=&#34;https://twitter.com/cloudfoundry&#34;&gt;@cloudfoundry&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23clojure&amp;amp;src=hash&#34;&gt;#clojure&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23buildpacks&amp;amp;src=hash&#34;&gt;#buildpacks&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23winning&amp;amp;src=hash&#34;&gt;#winning&lt;/a&gt; &lt;a href=&#34;http://t.co/9lJHqmWQPw&#34;&gt;pic.twitter.com/9lJHqmWQPw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Stine (@mstine) &lt;a href=&#34;https://twitter.com/mstine/statuses/339248683151417344&#34;&gt;May 28, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;  
&lt;p&gt;Score another win for Cloud Foundry&#39;s buildpack support. I&#39;m now toying with the idea of doing something of a world tour of LISP on Cloud Foundry. My next candidate may be &lt;a href=&#34;https://github.com/evhan/heroku-buildpack-chicken&#34;&gt;Scheme&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>into the crucible</title>
      <link>https://www.mattstine.com/2013/05/29/into-the-crucible/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2013/05/29/into-the-crucible/</guid>
      <description>&lt;p&gt;Wow&amp;hellip;it seems I only post to this blog toward the end of May. Well, that all changes now. You see, as of June 3, 2013, this blog is going to become one of many aspects of my new &amp;ldquo;day job.&amp;rdquo; On Monday, I start my life as a Community Engineer with &lt;a href=&#34;http://cloudfoundry.com&#34;&gt;Cloud Foundry&lt;/a&gt; by &lt;a href=&#34;http://goPivotal.com&#34;&gt;Pivotal&lt;/a&gt;. What&#39;s a Community Engineer? Quite honestly, I&#39;m not completely sure of the answer to that question yet. But given the many conversations I&#39;ve had over the past few weeks, it seemingly fits right in with the bridge-building roles I&#39;ve played many times over the course of my career. In this case, I have one foot squarely planted in the world of Cloud Foundry engineering, and one foot squarely planted out in the world with you guys and gals - the community. My job is to help you understand how we are quite literally seeking to &amp;ldquo;build a new platform for a new era.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Of course, this is a journey that for me started a few years ago. In my previous life as a front-line development manager, I helped lead an agile transformation within my team with &amp;ldquo;ruthless automation&amp;rdquo; playing a central role in everything that our team did. However, it seemed that the better we &amp;ldquo;did agile,&amp;rdquo; the more pain we felt when dealing with those outside of our circle of control. It was only years later, after reading Eliyahu Goldratt&#39;s &lt;a href=&#34;http://en.wikipedia.org/wiki/The_Goal_(novel)&#34;&gt;The Goal&lt;/a&gt; and coming to an understanding of his &lt;a href=&#34;http://en.wikipedia.org/wiki/Theory_of_Constraints&#34;&gt;Theory of Constraints&lt;/a&gt;, that I realized what was happening. Our constraints had moved &amp;ldquo;out of the plant,&amp;rdquo; if you will, and landed in the world of operations. Even without this understanding, I developed a keen interest in this newly emerging topic called &amp;ldquo;DevOps&amp;rdquo; and began to explore the ideas emerging around agile operations and infrastructure as code. I started playing with tools like Puppet, Chef, and Vagrant, and taught sessions on all three of them at the Project Automation Experience in 2011.&lt;/p&gt;
&lt;p&gt;You can read my &lt;a href=&#34;http://www.mattstine.com/2012/05/24/the-relaunch/&#34;&gt;last entry&lt;/a&gt; and find out that not much later I joined VMware as a Senior Consultant for its Cloud Application Platform. I was hired into that role based on my extensive background in enterprise Java and the Spring ecosystem, but it was nothing short of a staffing accident that I found myself thrust into a role on a virtualization platform provisioning team helping to build out a private self-service cloud! I was steadily getting carried further away from my role as an application architect, steadily becoming assimilated into that mysterious world of web operations that I knew so little about. These experiences, along with my continued reading and thinking about the worlds of DevOps, Lean, and Kanban, have quite literally changed the way I look at the world of software engineering (or as I prefer to think of it now, value delivery through product engineering that just so happens to involve software!). These experiences have formed around me a &lt;a href=&#34;http://en.wikipedia.org/wiki/Crucible&#34;&gt;crucible&lt;/a&gt;, melting me that I might be poured into a new professional mold.&lt;/p&gt;
&lt;p&gt;So now it&#39;s time to plunge into the world of building the leading &lt;a href=&#34;http://wattersjames.com/2013/03/04/my-fork-you-shirt/&#34;&gt;open&lt;/a&gt; platform as a service, and to help YOU experience the &lt;a href=&#34;https://twitter.com/mstine/status/339570787914760195&#34;&gt;HUGE can of @cloudfoundry awesome&lt;/a&gt; that we at Pivotal are about to unleash on the world. Sound good to you? &lt;a href=&#34;http://blog.cloudfoundry.com/2013/05/16/want-to-contribute-to-cloud-foundry-come-on-in/&#34;&gt;Join us!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
