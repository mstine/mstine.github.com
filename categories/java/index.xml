<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java | Matt Stine</title>
    <link>https://www.mattstine.com/categories/java/</link>
      <atom:link href="https://www.mattstine.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <description>java</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Matt Stine</copyright><lastBuildDate>Thu, 29 Apr 2010 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>java</title>
      <link>https://www.mattstine.com/categories/java/</link>
    </image>
    
    <item>
      <title>osgi on rails</title>
      <link>https://www.mattstine.com/2010/04/29/osgi-on-rails/</link>
      <pubDate>Thu, 29 Apr 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/04/29/osgi-on-rails/</guid>
      <description>&lt;p&gt;I&#39;ve seen quite a few blogs/articles/etc. lately related to the adoption (or lack thereof) of OSGi in the mainstream web application/enterprise application space. A nice summation of these is encapsulated in this excerpt from a comment by Peter Kriens on DZone (you&#39;ll find it in the comments section for &lt;a href=&#34;http://java.dzone.com/articles/osgi-perspectives&#34;&gt;&lt;a href=&#34;http://java.dzone.com/articles/osgi-perspectives&#34;&gt;http://java.dzone.com/articles/osgi-perspectives&lt;/a&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, one of the next frontiers is to make OSGi easier to use for the web app developers. The solid foundation is there, so stop whining and help us create the tools, books, and tutorials that will make OSGi palatable in those markets.&lt;/p&gt;
&lt;p&gt;There&#39;s nothing like a call to action to get me stirred up. It&#39;s no secret that I think OSGi is an excellent tool for tackling the complexity of enterprise applications (see my talks on the NFJS tour this year: &lt;a href=&#34;http://www.nofluffjuststuff.com/conference/speaker/matt_stine&#34;&gt;&lt;a href=&#34;http://www.nofluffjuststuff.com/conference/speaker/matt_stine&#34;&gt;http://www.nofluffjuststuff.com/conference/speaker/matt_stine&lt;/a&gt;&lt;/a&gt;). However, I will readily admit that the learning curve for tackling any non-trivial application in OSGi is rather steep. My bar for non-trivial is quite low - try learning OSGi while simultaneously attempting to get a mainstream framework like Hibernate working properly.&lt;/p&gt;
&lt;p&gt;I think that what we need is a tool that will enable a developer new to OSGi to get an OSGi-enabled web application up and running fairly readily. In fact, I think it would be good to absolutely minimize the amount of OSGi know-how required to get a basic web application into production, while at the same time leaving all of OSGi available just under the covers so that it can be easily accessed when I know what I need and how to use it. So here&#39;s my proposal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow in the footsteps of AppFuse, Grails, Rails, Roo, etc. and put together a web application toolkit that will allow one to instantly spin-up a deployable OSGI-enabled web application.&lt;/li&gt;
&lt;li&gt;Since we&#39;re talking about catering to mainstream here, Java the language ought to be the primary language used for development. With that said, we should not put up any barriers to using other languages available on the JVM.&lt;/li&gt;
&lt;li&gt;Bootstrap a DB-agnostic persistence layer leveraging JPA and make it easily accessible across the application bundles.&lt;/li&gt;
&lt;li&gt;Bootstrap a dependency injection framework for OSGi services based on the Blueprint standard.&lt;/li&gt;
&lt;li&gt;Bootstrap a security layer and provide a basic user/role security module with provided login, logout, etc. facilities.&lt;/li&gt;
&lt;li&gt;Pick a set of modern Java web application frameworks (e.g. Spring MVC, Struts 2, etc.) and make them easily pluggable.&lt;/li&gt;
&lt;li&gt;Wrap a nice build system around all of this that leverages a modern build tool (e.g. Gradle or Maven 3), the best of the PAX Tools features (especially Pax Construct, Exam, and Runner), and good facilities for automated testing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, who&#39;s with me? I&#39;m open to any suggestions/comments/rants, etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jug leadership lessons learned on slideshare</title>
      <link>https://www.mattstine.com/2010/04/02/jug-leadership-lessons-learned-on-slideshare/</link>
      <pubDate>Fri, 02 Apr 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/04/02/jug-leadership-lessons-learned-on-slideshare/</guid>
      <description>&lt;p&gt;I&#39;ve been playing a bit with &lt;a href=&#34;http://www.slideshare.net&#34;&gt;SlideShare&lt;/a&gt; today and I took the opportunity to upload the slides from my &lt;a href=&#34;http://weblogs.java.net/blog/2009/07/02/how-start-and-grow-jug-community-corner-2009-podcast&#34;&gt;Java.net Community Corner interview with Kevin Farnham at JavaOne 2009&lt;/a&gt;. SlideShare has a nice feature that allows you to sync up the audio from an MP3 file with your slides, and since both were available, I thought I&#39;d give it a try. The interface is extremely easy to use and I&#39;m very happy with the outcome.&lt;/p&gt;
&lt;p&gt;This talk covers the various things I&#39;ve learned about leading a Java User Group over the past few years. I would say that these are definitely applicable to leading any type of user group, so even if you aren&#39;t a Java person, you might find some meat here. Enjoy!&lt;/p&gt;
&lt;p&gt;[slideshare id=3622125&amp;amp;doc=jugleadershiplessonslearned-100402140624-phpapp02]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>making java groovier with lambdaj</title>
      <link>https://www.mattstine.com/2009/10/09/making-java-groovier-with-lambdaj/</link>
      <pubDate>Fri, 09 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/10/09/making-java-groovier-with-lambdaj/</guid>
      <description>&lt;p&gt;I spent the better part of yesterday tracing my way through the codebase for a large-scale enterprise application that my team is building right now, and I happened upon the following piece of code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//...imports excluded for clarity
public class BusinessActivityBinMetaClassHelper {
//...
   public static List&amp;lt;Long&amp;gt; getSrmMetaClassIdListJava(List&amp;lt;BusinessActivityBinMetaClass&amp;gt; businessActivityBinMetaClassList) {
      List&amp;lt;Long&amp;gt; srmMetaClassIdList = new ArrayList&amp;lt;Long?();

      if(businessActivityBinMetaClassList != null) {
         for(BusinessActivityBinMetaClass businessActivityBinMetaClass : businessActivityBinMetaClassList) {
             if(businessActivityBinMetaClass.getSrmMetaClass() != null &amp;amp;&amp;amp; businessActivityBinMetaClass.getSrmMetaClass().getSrmMetaClassId() != null) {
               srmMetaClassIdList.add
                  (businessActivityBinMetaClass.getSrmMetaClass().getSrmMetaClassId());
            }
         }
      }

      return srmMetaClassIdList;
   }
//...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I read this code, I thought &amp;ldquo;This just SCREAMS a need for Groovy&#39;s closure iterators.&amp;rdquo; So, last night I quickly hacked out fully-equivalent Groovy version of the code:&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
class GroovyExample {&lt;/p&gt;
&lt;p&gt;static def getSrmMetaClassIdListGroovy(def businessActivityBinMetaClassList) {
businessActivityBinMetaClassList?.collect { it?.srmMetaClass?.srmMetaClassId }.findAll { it != null } ?: new ArrayList&lt;Long&gt;();
}
}
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;Whew! Much nicer. What did we get out of this? Well&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Groovy&#39;s dynamic typing cleaned up all of the unnecessary type declarations - the only static typing is where we return an empty ArrayList of Longs if the argument to our method is null (a bit of odd behavior, but required to make this code equivalent to the parent Java code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We were saved 4 painful null checks by the use of Groovy&#39;s null safe dereferencing operator (?.) and the simplified ternary operator otherwise affectionately known as the &amp;ldquo;Elvis Operator&amp;rdquo; (?:).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Groovy&#39;s collect method, we were able to transform the original list into a list containing Long values by passing in a closure that pulls out the property value of interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because we&#39;re using null safe dereferencing, we are actually inserting nulls into our list if any of the dereferencing fails. Therefore, Groovy&#39;s findAll Collection filtering method comes to the rescue. We simply provide it with a closure that returns true for all of the values we want to keep - in this case, &amp;ldquo;it != null.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perhaps most importantly, we&#39;ve shorted our code from 11 lines (including whitespace lines for clarity) to ONE LINE that much more clearly expresses the intent of the code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Great - why don&#39;t we just rewrite the entire application is Groovy? Well, hold on just a minute. At the time we started this application, as much as some of us loved Groovy, we just didn&#39;t have enough Groovy mindshare to go there yet. On top of that, we were already experimenting with several new architectural ideas and technologies, and Groovy would have added yet one more risk to the puzzle. I say all this to acknowledge that sometimes you just can&#39;t move to another language for one reason or another, regardless of how attractive its features may be.&lt;/p&gt;
&lt;p&gt;But let&#39;s take a queue from the &lt;em&gt;Pragmatic Programmer&lt;/em&gt; and explore the LOTY (Language of the Year) concept one more time. One of the reasons that you&#39;re encouraged to learn new languages is to change the way you program in your main language. You may learn Groovy, Scala, Clojure, Ruby, etc., etc., etc. and never use them in your day job - and yet the experience of coding in a new language with new constructs and idioms will necessarily change the way you THINK about programming in every other language.&lt;/p&gt;
&lt;p&gt;So, let&#39;s think about the possibility of coding something that is much more similar to the Groovy version and yet stick with regular Java code. Fortunately, there are several libraries out there that bring much of the flavor and power of Groovy&#39;s closure iterators to Java. I&#39;d like to focus in on one of them, LambdaJ (&lt;a href=&#34;http://code.google.com/p/lambdaj/&#34;&gt;&lt;a href=&#34;http://code.google.com/p/lambdaj/&#34;&gt;http://code.google.com/p/lambdaj/&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;LambdaJ provides constructs that allow us to &amp;ldquo;&amp;hellip;manipulate collections in a pseudo-functional and statically typed way.&amp;rdquo; Let&#39;s take a look at this example implementing using LambdaJ:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//...some imports excluded for clarity
import ch.lambdaj.function.convert.Converter
import static ch.lambdaj.Lambda.*
import static org.hamcrest.Matchers.*

public class BusinessActivityBinMetaClassHelper {
//...
   public static List&amp;lt;Long&amp;gt; getSrmMetaClassIdListJava(List&amp;lt;BusinessActivityBinMetaClass&amp;gt; businessActivityBinMetaClassList) {
      return (businessActivityBinMetaClassList != null) ? filter(notNullValue(),convert(businessActivityBinMetaClassList, new IdExtractor())) : new ArrayList&amp;lt;Long&amp;gt;();
   }

   class IdExtractor implements Converter&amp;lt;BusinessActivityBinMetaClass,Long&amp;gt; {
	Long convert(BusinessActivityBinMetaClass from) {
	   if (from.getSrmMetaClass() != null &amp;amp;&amp;amp; from.getSrmMetaClass().getSrmMetaClassId() != null) {
	      return from.getSrmMetaClass().getSrmMetaClassId();
	   }
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not quite as nice as the Groovy code - we got A LOT out of the null-safe dereference and Elvis operators. However, our overall intent is still a bit clearer. Let&#39;s analyze:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we need to implement one of LambdaJ&#39;s Converters. A Converter is nothing more than a generic Interface that defines one method: T convert(F from), where F is the type we&#39;re converting from and T is the type we&#39;re converting to. In this case, we want to convert an object of type BusinessActivityBinMetaClass to an object of type Long. Our implementation determines how this conversion takes place, in this case by extracting the id property from its child.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, after statically importing the methods of ch.lambdaj.Lambda, we call the convert method, passing it our List and our newly implemented Converter. This gives us the equivalent of Groovy&#39;s collect method, with the Converter taking the place of the closure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&#39;re still shoving nulls into our List with this implementation, so we further filter our list using LambdaJ&#39;s &amp;ldquo;filter&amp;rdquo; method, passing it the list returned by &amp;ldquo;filter,&amp;rdquo; and a &lt;a href=&#34;http://code.google.com/p/hamcrest/&#34;&gt;Hamcrest&lt;/a&gt; matcher that returns only notNullValue()&amp;lsquo;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, we use our old friend the ternary operator to return the empty ArrayList of Long values if our method argument is null.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don&#39;t count the Converter implementation, we&#39;ve gotten ourselves down to 2 lines of code (1 if you don&#39;t mind long lines). In this case I implemented IdExtractor as a named inner class - you could do this with an anonymous inner class and it would look a lot more like a closure, but the added noise of all of the null checking made the undesirable for me. Perhaps if your code has less noise (or guarantees that values aren&#39;t null), that would be a better approach.&lt;/p&gt;
&lt;p&gt;Another alternative is to make IdExtractor a top-level class that, if general enough, could be reused throughout the codebase. The benefit of this is that you now have a nice code unit rather than a battery of static methods in a utility class, and unit testing becomes much more clean and elegant.&lt;/p&gt;
&lt;p&gt;So, we&#39;ve still made some progress and made our code a bit more Groovy. I encourage you to explore LambdaJ&#39;s feature set and see how it might make your code a bit more concise with clearer intent. And just to stir up a little controversy, look what would have happened in Java 7 had the null safe dereference and Elvis operator&#39;s made &lt;a href=&#34;http://blogs.sun.com/darcy/entry/project_coin_final_five&#34;&gt;the Project Coin cut&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//...some imports excluded for clarity
import ch.lambdaj.function.convert.Converter
import static ch.lambdaj.Lambda.*
import static org.hamcrest.Matchers.*

public class BusinessActivityBinMetaClassHelper {
//...
   public static List&amp;lt;Long&amp;gt; getSrmMetaClassIdListLambdaJ(List&amp;lt;BusinessActivityBinMetaClass&amp;gt; businessActivityBinMetaClassList) {
      return filter(notNullValue(),convert(businessActivityBinMetaClassList,
         new Converter&amp;lt;BusinessActivityBinMetaClass,Long&amp;gt; {
            Long apply(BusinessActivityBinMetaClass from) { return from?.getSrmMetaClass()?.getSrmMetaClassId()}
         })) ?: new ArrayList&amp;lt;Long&amp;gt;();
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice, huh? ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>im speaking at the march memphis jug meeting</title>
      <link>https://www.mattstine.com/2009/03/13/im-speaking-at-the-march-memphis-jug-meeting/</link>
      <pubDate>Fri, 13 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/03/13/im-speaking-at-the-march-memphis-jug-meeting/</guid>
      <description>&lt;p&gt;I learned a great deal about JMS from Mark Richards at last weekend&#39;s NFJS Gateway Software Symposium, and I thought I&#39;d share it with the Memphis Java community. Take a look at &lt;a href=&#34;http://www.memphisjug.org&#34;&gt;&lt;a href=&#34;http://www.memphisjug.org&#34;&gt;http://www.memphisjug.org&lt;/a&gt;&lt;/a&gt; for details!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>on our way to the gateway software symposium</title>
      <link>https://www.mattstine.com/2008/02/08/on-our-way-to-the-gateway-software-symposium/</link>
      <pubDate>Fri, 08 Feb 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/02/08/on-our-way-to-the-gateway-software-symposium/</guid>
      <description>&lt;p&gt;We&#39;re taking most of our team to the St. Louis, Missouri, edition of the &lt;a href=&#34;http://www.nofluffjuststuff.com&#34;&gt;No Fluff Just Stuff&lt;/a&gt; 2008 tour. This will be my first actual NFJS event. I attended the &lt;a href=&#34;http://www.thespringexperience.com&#34;&gt;Spring Experience&lt;/a&gt; in 2007, which was put on by the NFJS guys, so I expect this event in St. Louis to be great. Since we&#39;re based in Memphis, St. Louis is only about a 4 1/2 hour drive. We&#39;re all going to pile in a van and road trip. It should be a great time.&lt;/p&gt;
&lt;p&gt;I&#39;m going to have a hard time choosing sessions: Neal Ford, Scott Davis, David Geary, Jeff Brown, and Bryan Sletten all have sessions that I&#39;d like to attend, several of which are in conflict. I hope they do post-conference video delivery of these sessions just like they&#39;re doing for the Spring Experience.&lt;/p&gt;
&lt;p&gt;If anyone&#39;s going to be there, let&#39;s do dinner one night and you can meet some of the St. Jude team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>grails 10 released</title>
      <link>https://www.mattstine.com/2008/02/05/grails-10-released/</link>
      <pubDate>Tue, 05 Feb 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/02/05/grails-10-released/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://grails.org/Home&#34;&gt;Grails&lt;/a&gt;, by far my favorite of the JVM dynamic language frameworks, was released this morning, with a snazzy, new, &amp;ldquo;Web 2.0 style&amp;rdquo; website to boot. Congratulations Graeme and company on all of your hard work!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>practical jruby on rails web 20 projects</title>
      <link>https://www.mattstine.com/2008/01/25/practical-jruby-on-rails-web-20-projects/</link>
      <pubDate>Fri, 25 Jan 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/01/25/practical-jruby-on-rails-web-20-projects/</guid>
      <description>&lt;p&gt;Are Java&#39;s days numbered as a web development technology? With buzzwords like Ruby, Rails, and Web 2.0 zipping around the web development community, one may begin to wonder. Could Java&#39;s lifespan be extended by finding synergy between Java and Ruby? On the scene comes JRuby, the definitive implementation of Ruby for the JVM. In his new book from Apress, Ola Bini guides the reader through the development of four Web 2.0 projects using JRuby on Rails. I think that Bini does a masterful job of always using the right tool for the right job. &lt;a href=&#34;http://java.dzone.com/reviews/practical-jruby-rails-web-20-p&#34;&gt;Read my review for complete details.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mid year review my professional development goals for 2007 2008</title>
      <link>https://www.mattstine.com/2008/01/02/mid-year-review-my-professional-development-goals-for-2007-2008/</link>
      <pubDate>Wed, 02 Jan 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/01/02/mid-year-review-my-professional-development-goals-for-2007-2008/</guid>
      <description>&lt;p&gt;Back in July I posted my professional development goals for the year (My performance review is annually in July, so it&#39;s a good time to set goals.), and it seemed like a good idea to take a look at my progress while doing the &amp;ldquo;New Year&#39;s Resolution&amp;rdquo; thing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn Groovy and Grails&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Andy and Dave suggest learning a new language every year, so this seemed like a good goal for me. I can&#39;t say that I&#39;ve truly learned Groovy and Grails in depth, but I did learn them enough &lt;a href=&#34;http://www.memphisjug.org/october25%2C2007&#34;&gt;to do a presentation on them&lt;/a&gt; (as well as Ruby, JRuby, and Rails) at our Java User Group meeting  in October, so I&#39;ve effectively touched on two languages and two frameworks for those languages. I&#39;ve since gotten interested in Scala as well. At any rate, I&#39;d like to go deeper w/ Groovy and Grails as I have time, which is scarce!&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Release HallKeeper v1.0 as part of #1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This project seems destined to fail. I haven&#39;t worked on it in any meaningful way since the summer. I&#39;ve thought about it in the past week, and I&#39;d actually like to try doing it in straight Java POJOs with Spring and Hibernate since I&#39;m more well-versed in that area. At any rate, it really is my lack of spare time that keeps this one on the perpetual back burner.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Read and LEARN the following books:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;* The Definitive Guide to Grails - Rocher
* The Pragmatic Programmer - Hunt, Thomas
* Computer Algorithms: Introduction to Design &amp;amp; Analysis - Baase, Van Gelder
* Concepts of Programming Languages: Sebesta
* Groovy in Action - Konig  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve pretty much finished #1, got started on #2, and haven&#39;t really touched the last three. Again, the needs of the moment have necessitated I focus on other areas, particularly other books. Recent projects have pointed me to three additional books I&#39;d really like to cover this year, so I may not get to my original list. Here are the titles:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Working Effectively with Legacy Code - Feathers  

* POJOs in Action - Richardson
* Domain Driven Design - Evans  
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Review two books for the JavaLobby/DZone book review team&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is one I&#39;ve hit the nail on. I just completed my second book review, which will be published some time in the next few weeks. My first review, &lt;a href=&#34;http://matt-stine.blogspot.com/2007/10/ajax-construction-kit-building-plug-and.html&#34;&gt;Ajax Construction Kit: Building Plug-and-Play Ajax Applications&lt;/a&gt;, was published in October 2007. These have been rather time consuming and have kept me from other projects, so I don&#39;t plan to take any more reviews this year.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Pass the Sun Certified Programmer for the Java 2 Platform, Standard Edition 5.0 Exam&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Haven&#39;t touched this one yet. Preparing for this will be one of my foci in the coming weeks.&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Write one Java/software development blog article per week&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I haven&#39;t done so hot on this one. OK, let&#39;s be really honest. I haven&#39;t come close. However, my recent flurry of entries on The Spring Experience 2007 have gotten me into a bit of a groove. I&#39;m going to try to keep up the momentum and finish this year strong.&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Attend JavaOne 2008 or similar conference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;ve actually traveled twice since my original post. My first trip was to the &lt;a href=&#34;http://nerlscd.biotech.cornell.edu/&#34;&gt;Northeast Life Sciences Core Directors Meeting&lt;/a&gt; last November at Cornell University in Ithaca, NY. The purpose of this trip was to present and generate interest around our open source shared resource management system for core facilities, &lt;a href=&#34;http://stjude-srm.sourceforge.net/&#34;&gt;STJUDE-SRM&lt;/a&gt;. The trip was a great success. My second trip really fulfills this goal, as I attended &lt;a href=&#34;http://www.thespringexperience.com/conference/hollywood/2007/12/index.html&#34;&gt;The Spring Experience 2007&lt;/a&gt; in Hollywood, FL. This proved to be one of the best technical conferences I&#39;ve ever attended, and also one of the most fun!&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Start a Memphis/Mid-South Area Java User Group&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don&#39;t think this goal could have gone any better than it has. In late July I started a &lt;a href=&#34;http://groups.google.com/group/memphis-mid-south-jug&#34;&gt;Google Group&lt;/a&gt; and a small Google Page Creator website to attempt to drum up interest in a Java User Group for the Memphis, TN and surrounding Mid-South area. On July 23, 2007, along comes Diane Tabulog, a technical recruiter with local company &lt;a href=&#34;http://www.vaco.com/Technology/tech_about.htm&#34;&gt;Vaco Technology&lt;/a&gt;, who convinces her company to throw its support behind our JUG. All of a sudden we have an offer for a meeting location, food budget, giveaways, etc. Later, Clayton Naeve, our CIO at St. Jude, agreed to let us use our awesome conference room at our division&#39;s new offices at 160 Shadyac Avenue to meet, as Vaco&#39;s facilities were a bit small. On August 15, &lt;a href=&#34;http://weblogs.java.net/blog/caroljmcdonald&#34;&gt;Carol McDonald&lt;/a&gt;, a Java Technology Evangelist from Sun Microsystems, offered to speak at our JUG, and we signed her up for the first meeting. Little by little, all of the necessary pieces started to fall into place, including additional free giveaways from Sun, O&#39;Reilly, Atlassian, and JetBrains. &lt;a href=&#34;http://www.memphisjug.org/september20%2C2007&#34;&gt;The first meeting&lt;/a&gt; was a great success, and since then we&#39;ve had two more successful meetings. Our next meeting is Thursday, January 17, 2008. Find out more at &lt;a href=&#34;http://www.memphisjug.org&#34;&gt;&lt;a href=&#34;http://www.memphisjug.org&#34;&gt;http://www.memphisjug.org&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the state of the art in dependency injection rod johnson</title>
      <link>https://www.mattstine.com/2007/12/15/the-state-of-the-art-in-dependency-injection-rod-johnson/</link>
      <pubDate>Sat, 15 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/15/the-state-of-the-art-in-dependency-injection-rod-johnson/</guid>
      <description>&lt;p&gt;This was a truly fascinating talk. If you ever wanted to learn the entire history and landscape of dependency injection (DI), this was your opportunity. I really didn&#39;t realize how deep of a topic DI really is.&lt;/p&gt;
&lt;p&gt;According to Rod, DI had its beginnings in 2002, in the Interface 21 Framework that was born from his seminal work, &lt;a href=&#34;http://www.amazon.com/Expert-One-One-Design-Development/dp/1861007841&#34;&gt;Expert One-on-One J2EE Design and Development&lt;/a&gt;. In the beginning, DI was done solely through setter injection (SI), with external metadata (usually in XML). 2003 gave us Spring 0.9, which had the same DI model, but added FactoryBeans for indirection and proxy-based AOP (enabling among other things, declarative transaction management). With Spring, DI was always just one enabler of a complete enterprise solution. Contrast that with &lt;a href=&#34;http://www.picocontainer.org/&#34;&gt;PicoContainer&lt;/a&gt;, also arriving on the scene in 2003, which was an ultra-lightweight DI-only container. PicoContainer brought us several innovations, including constructor injection, automatic resolution by type, and an attempt to dispense with external configuration.&lt;/p&gt;
&lt;p&gt;Rod then discussed the Pros and Cons of Constructor Injection (CI). On the Pro side, we see that CI is great for immutable objects, can be used with existing code, enforces that the necessary dependencies are provided at object construction, and allows developers to dispense with methods like afterPropertiesSet(). On the Con side, there are no default arguments in Java, which forces us to ALWAYS provide all of the necessary dependencies, constructor overriding can be somewhat messy, and constructor argument names are not usually available through reflection, which forces us to depend on argument order for dependency resolution.&lt;/p&gt;
&lt;p&gt;Spring 1.0, which arrived in late 2003, incorporated some of PicoContainer&#39;s innovation: CI, &amp;ldquo;Autowiring&amp;rdquo; by type and by name, as well as the ability to mix CI and SI. Here Rod reflected on Spring&#39;s pragmatic philosophy, whereby they are more than willing to incorporate the good ideas that others had first.&lt;/p&gt;
&lt;p&gt;Spring 1.1 brought us method injection, a unique Spring feature, which solved the problem of long-lived managed objects which depend on short-lived objects. It also brought us Factory Methods. You now had the ability to create objects through invoking static factory methods or instance methods on other beans.&lt;/p&gt;
&lt;p&gt;With the finalization of the &lt;a href=&#34;http://java.sun.com/products/ejb/docs.html&#34;&gt;EJB 3.0 standard&lt;/a&gt; in May 2006, several new ideas became available in the world of DI: annotation-based DI, annotations for callback methods (e.g. @PostConstruct), scanning for annotations without any external configuration needed for a deployment unit, and field injection (FI). These EJB standard brought with it a new philosophy - that annotations are a superior model and that externalization should be a second-class citizen. The Pros of this standard? One big one - no configuration is necessary for simple cases. The Cons? Rod listed several: resources could only be injected from JNDI, no CI, limited control over object lifecycle, unsuitability for fine-grained object graphs, effectively usable ONLY with annotations, as the XML configuration option is so verbose, and it isn&#39;t just DI - it brings along with it enforcement of many obsolete EJB concepts (such as bean instance pooling).&lt;/p&gt;
&lt;p&gt;Spring 2.0 arrived in late 2005 with its own share of innovations: integration with &lt;a href=&#34;http://www.eclipse.org/aspectj/&#34;&gt;AspectJ&lt;/a&gt;, the ability to inject anything with an AspectJ aspect via @Configurable, namespaces to provide an XML-based DSL for external configuration, the @Required annotation, and pluggable scopes to manage the object lifecycle. About that same time, JBoss Seam introduced many strange ideas (that I didn&#39;t quite grasp from Rod&#39;s explanation): bijection, outjection, and subversion of control.&lt;/p&gt;
&lt;p&gt;Some additional players on the field include Spring Java Config, which is a DSL for configuration in Java, &lt;a href=&#34;http://code.google.com/p/google-guice/&#34;&gt;Google Guice 1.0&lt;/a&gt;, and the &lt;a href=&#34;http://jcp.org/en/jsr/detail?id=299&#34;&gt;JSR-299 Web Beans spec&lt;/a&gt;, which Rod described as &amp;ldquo;blogware&amp;rdquo; in that there is currently no available implementation.&lt;/p&gt;
&lt;p&gt;Finally we got to Spring 2.5, released last month. Rod didn&#39;t have his slides printed or available on the web (argh!), so about this time my hand was really hurting from taking furious notes, and I simply gave up. Fortunately, most of what Rod covered was redundant from some of the other sessions, so I&#39;ll have or will blog about it later. About the only thing I really don&#39;t have good notes on is Spring Java Config, which he discussed pretty extensively. If you want to learn more about it, check out &lt;a href=&#34;http://www.springframework.org/javaconfig&#34;&gt;&lt;a href=&#34;http://www.springframework.org/javaconfig&#34;&gt;http://www.springframework.org/javaconfig&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>whats new in spring 25 juergen hoeller</title>
      <link>https://www.mattstine.com/2007/12/14/whats-new-in-spring-25-juergen-hoeller/</link>
      <pubDate>Fri, 14 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/14/whats-new-in-spring-25-juergen-hoeller/</guid>
      <description>&lt;p&gt;This was my second talk of TSE 2007. I have to admit I chose it by process of elimination - none of the second session talks particularly jumped out and grabbed me like Chris Richardson&#39;s talk.&lt;/p&gt;
&lt;p&gt;Juergen is the project lead for the Spring Framework, so he was the obvious choice to give this talk. Juergen split it up into three sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Platforms&lt;/li&gt;
&lt;li&gt;Annotation Configuration&lt;/li&gt;
&lt;li&gt;AspectJ Support
To break down part one as quickly as possible, Spring supports virtually EVERYTHING. You get JDK 1.4 all the way to Java 6, including all of the new API&#39;s in Java 6. It fully supports Java EE 5 while remaining backward compatible all the way to J2EE 1.3.  You can now deploy a Spring ApplicationContext as a RAR file, and you also get full JCA 1.5 support (if you want to know what that means, don&#39;t ask me :-)). Quite notable was the fact that they have worked with IBM to support WebSphere&#39;s proprietary transaction manager. Also interesting was Spring&#39;s continuing strong support for OSGi as an alternative enterprise runtime.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The annotation configuration part of the talk was quite fascinating. I&#39;m something of an annotations junkie - I have to be careful about that. At any rate, it was so good that I was interested enough to attend Juergen and Mark Fisher&#39;s later talk that was completely dedicated to the subject. I&#39;ll leave the details for my entry on that talk.&lt;/p&gt;
&lt;p&gt;The final portion, on AspectJ support, was equally fascinating. The first new feature was the ability to advise specific beans by name rather than by type using AspectJ. This was made even sweeter by the fact that you can use pattern matching in your  definition.  Very exciting was the ability to do AspectJ load-time weaving, meaning you can use the power of AspectJ at runtime without involving the AspectJ compiler. Unfortunately, this isn&#39;t available across all appservers. I didn&#39;t get a chance to ask and comfirm, but it seems that JBoss (our primary appserver) does not support this. GlassFish, Weblogic, OC4J, and Tomcat were all mentioned as being able to handle it.&lt;/p&gt;
&lt;p&gt;The most interesting part of this talk for me was the ability to annotate a class as @Configurable, and then do dependency injection on it even thought it isn&#39;t managed by Spring. You could do this in Spring 2.0, but you had to use the AspectJ compiler. Now, with load-time weaving, you can do this at runtime! I really could have used this recently when I wanted to inject a single dependency into a class that was really overkill to manage as a Spring bean. Since I&#39;m using Spring 2.5 in this project, I can go back and try this feature. Exciting!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>enterprise java and the changing of the guard</title>
      <link>https://www.mattstine.com/2007/12/13/enterprise-java-and-the-changing-of-the-guard/</link>
      <pubDate>Thu, 13 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/13/enterprise-java-and-the-changing-of-the-guard/</guid>
      <description>&lt;p&gt;Greetings from &lt;a href=&#34;http://www.thespringexperience.com&#34;&gt;The Spring Experience 2007&lt;/a&gt; in Hollywood, FL. So far this has been a great conference - I&#39;m currently waiting for my third session of the day to start. As much as I enjoy all of the hype and eye candy at JavaOne, I really get a lot more out of these smaller conferences as you&#39;re not running around stressed out trying to weave through thousands of geeks as you move from session to session (or more accurately, from session to queue!).&lt;/p&gt;
&lt;p&gt;I wanted to post a few insights that I gained from Rod Johnson&#39;s keynote last night (the title of this entry). The basis for Rod&#39;s presentation was a Gartner report entitled &amp;ldquo;&lt;a href=&#34;http://www.gartner.com/DisplayDocument?ref=g_search&amp;amp;id=525420&amp;amp;subref=simplesearch&#34;&gt;Trends in Platform Middleware: Disruption Is in Sight&lt;/a&gt;.&amp;rdquo; To summarize, there are many converging forces in the enterprise Java space that are causing or will probably cause a great deal of disruption in the way we develop enterprise Java applications. These forces include our collective experience with application servers, the rediscovery of object-oriented or POJO-based programming, open source innovation, non-Java challengers (.NET, RoR), the rise of SOA, and Rich Internet Applications. Rod sees a big movement from the &amp;ldquo;old guard,&amp;rdquo; which he described as the &amp;ldquo;J2EE Stovepipe Architecture&amp;rdquo; which was based primarily around the idea of distributed objects, to a world in which many of the highest volume Java applications don&#39;t even use a Java EE application server. An interesting point was the stagnation in job requirements for the big name application servers coupled with the BZ Research statistic that 64% of Java application developers are using Tomcat for production deployment. Yet another force for disruption is the emergence of OSGi, which allows developers to modularize applications and provides facilities for versioned components, fine-grained redeployment, and library conflict resolution - all features that Java EE currently does not and perhaps cannot address. Open source provides yet more disruption, as developers have become participants in rather than spectators of the development of Java enterprise solutions. Innovation is now primarily coming from the open source world. All of this culminated in the rather telegraphed conclusion that Rod (and also the Gartner report apparently) believes that Spring is uniquely positioned to provide the best value for ongoing Enterprise Java development in the face of the current trends. Of course, what would you expect him to say? :-) [&lt;br&gt;
](&lt;a href=&#34;http://www.gartner.com/DisplayDocument?ref=g_search&amp;amp;id=525420&amp;amp;subref=simplesearch&#34;&gt;http://www.gartner.com/DisplayDocument?ref=g_search&amp;amp;id=525420&amp;amp;subref=simplesearch&lt;/a&gt;)&lt;br&gt;
I do tend to agree with him. The pace at which Spring is innovating and addressing the Java enterprise pain points far outpaces the pace of the JCP. It just takes too long to design specs by committee. One of the more wise things that Spring does is to learn from and in most cases accommodate the changing landscape of Java EE and integrate the best features directly into the framework. I for one am glad to be developing applications with Spring, as it makes it very easy to do the things I want to do and write quality code that isn&#39;t directly dependent on an infrastructure framework. Generally, it stays out of my way.&lt;/p&gt;
&lt;p&gt;More to come on the sessions I&#39;ve attended thus far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>improving application design with a rich domain model chris richardson</title>
      <link>https://www.mattstine.com/2007/12/13/improving-application-design-with-a-rich-domain-model-chris-richardson/</link>
      <pubDate>Thu, 13 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/13/improving-application-design-with-a-rich-domain-model-chris-richardson/</guid>
      <description>&lt;p&gt;This was my very first session of the conference. I&#39;ve really been looking forward to it. I became pretty excited about object-oriented programming when I first really learned it in my computer simulation course at Ole Miss. In that course we built discrete event simulation programs using collaborating Java threads. Each thread implemented an object from the domain model representing a particular simulation problem. Once I got into the &amp;ldquo;working world,&amp;rdquo; I found that the architecture described by Rod Johnson as the &amp;ldquo;J2EE stove pipe&amp;rdquo; had made my OO skills essentially unusable in the projects on which I was required to work on a day-to-day basis. My recent experiences developing in a more POJO-based style, particularly with JPA/Hibernate, have allowed me to get closer to my preferred OO-style, but the business logic still lived in the service-tier. My domain model was still essentially &amp;ldquo;anemic&amp;rdquo; to borrow from Martin Fowler.&lt;/p&gt;
&lt;p&gt;When I read the description for this session I was elated! Finally I could see that someone was building real enterprise applications using object-oriented techniques! I&#39;ve never quite been able to articulate what I felt was wrong with the way we&#39;re building applications in my group. I was fortunate enough to have breakfast with Chris Richardson prior to the session, and he said that addressing my inability to articulate those problems was one of the goals of his talk. Awesome! On to the session&amp;hellip;&lt;/p&gt;
&lt;p&gt;Chris began with a tour through his object-based programming experience, beginning in LISP, followed by C++ and then Java. Around 1999 he got into EJB programming, and described his experience as &amp;ldquo;Applications were still built from objects, but those objects were very different&amp;hellip;&amp;rdquo; Basically the EJB paradigm caused us to abandon object-oriented programming in favor of procedural programming. Why? Well, for all of the pros surrounding EJB, it made writing object-oriented code difficult, and in some cases, impossible. The EJB/procedural style works very well for simple business logic, but it doesn&#39;t scale well as business logic becomes more complex. The result is a few monolithic transactional classes containing hundreds to thousands of lines of code embedded in very long methods. Hence, the legacy of EJB (and I quote):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java is an object-oriented language, AND&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object-oriented design is a better way to tackle complexity, YET&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many complex enterprise Java applications are written in a procedural style&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chris then moved on to discuss the rich domain model pattern, which is really nothing new at all. It&#39;s just good OO design. Most of your classes (or entities) correspond to real world concepts, and the business logic is spread amongst them. Classes are true objects: they contain state and behavior. The goal is to push as much business logic as possible down into the domain objects, which is exactly where it belongs. What do you get? Better maintainability, better testability, better reusability, and a better shared understanding of your domain. Not only that, but your code is quantifiably simpler! Who doesn&#39;t want that? The main drawback to this is that you have to have good OO design skills to make it happen - which is exactly what the EJB programming model has made scarce.&lt;/p&gt;
&lt;p&gt;Chris followed this up by discussing the building blocks of domain models, concepts he derived from Eric Evans&amp;rsquo; book Domain Driven Design. In a nutshell, they are Entities, Value Objects, Aggregates, Services, Factories, and Repositories - the reader can get the book to find out what these are. Interesting notes for me include the fact that Repositories are nearly equivalent to DAO&#39;s, especially the way I typically implement them. The concept of a Service is far different from what I&#39;m used to. I &amp;ldquo;grew up&amp;rdquo; writing services according to the EJB Session Bean/Facade model, where essentially all of your business logic resides in service methods. Chris defined a service as a class implementing only logic that cannot be put in a single entity. They are actually quite thin!&lt;/p&gt;
&lt;p&gt;Next came the discussion of frameworks and their role. In short, frameworks act as an enabler to rich domain models when used properly. Your domain model should be implemented purely as Plain Old Java Objects (POJO&#39;s) in that they don&#39;t implement any infrastructure interfaces or call infrastructure API&#39;s. The jury is still out on annotations - Chris argues that they still violate the POJO concept, I&#39;m not so sure. You then wire your model together using dependency injection, handle crosscutting concerns (transaction management, security, logging, etc.) with Aspect-Oriented Programming (AOP), and use object/relational mapping (ORM) for persistence. What you often run into as obstacles are that many of these frameworks, particularly web and ORM frameworks, force you to introduce &amp;ldquo;smells&amp;rdquo; into your code for the framework to use them. Examples include requirements for public default constructors and JavaBean-style setters.&lt;/p&gt;
&lt;p&gt;Chris closed with an awesome discussion of common code smells and the refactorings used to eliminate them. I was most interested in Feature Envy, which is where you have methods that are far too interested in data belonging to other classes. This is very common in session facades, and the healing factor is to push that logic down into the appropriate domain classes. Another interesting smell was Primitive Obsession, where code uses built-in types (such as String and Integer) instead of application classes to represent state. The refactoring in this case is to introduce Value Objects, which are immutable, validated objects representing domain concepts (e.g. a shipping address).&lt;/p&gt;
&lt;p&gt;Chris closed with the charge to begin refactoring our procedural designs into a rich domain model on MONDAY! Oh, how I can&#39;t wait to begin. Good job Chris!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>13949712720901forosx</title>
      <link>https://www.mattstine.com/2007/11/08/13949712720901forosx/</link>
      <pubDate>Thu, 08 Nov 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/11/08/13949712720901forosx/</guid>
      <description>&lt;p&gt;Here&#39;s my vote for Java 6 on Mac OS X Leopard!&lt;/p&gt;
&lt;p&gt;13949712720901ForOSX&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>my professional development goals for 2007 2008</title>
      <link>https://www.mattstine.com/2007/07/10/my-professional-development-goals-for-2007-2008/</link>
      <pubDate>Tue, 10 Jul 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/07/10/my-professional-development-goals-for-2007-2008/</guid>
      <description>&lt;p&gt;I posted earlier on my desire to &lt;a href=&#34;http://matt-stine.blogspot.com/2007/07/help-me-become-better-programmer.html&#34;&gt;become a better programmer&lt;/a&gt;. Well, I&#39;ve since put together a plan of action for the next twelve months. I&#39;ve based some of these goals on suggestions from The Pragmatic Programmer by Andy Hunt and Dave Thomas.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn Groovy and Grails&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Andy and Dave suggest learning a new language every year. I had already informally started learning Groovy and Grails after JavaOne 2007. Since I already have a head start on this one, Groovy will be my language for the next year (I&#39;m learning Grails mainly because of my web development background - it will provide me more opportunity to apply my Groovy knowledge). This should be an easy way to get started on the goal of a new language each year since my Java knowledge should transfer easily.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Release HallKeeper v1.0 as part of #1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Several years ago I started an open source project called &lt;a href=&#34;http://code.google.com/p/hallkeeper&#34;&gt;HallKeeper&lt;/a&gt;. HallKeeper is planned to be a web-based management system for university residence halls. Life got in the way of this project so it lay dormant for a few years. I&#39;ve recently revived it as sort of a &amp;ldquo;lab&amp;rdquo; in which to learn Groovy and Grails, and hopefully have a little fun along the way.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Read and LEARN the following books:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;* The Definitive Guide to Grails - Rocher
* The Pragmatic Programmer - Hunt, Thomas
* Computer Algorithms: Introduction to Design &amp;amp; Analysis - Baase, Van Gelder
* Concepts of Programming Languages: Sebesta
* Groovy in Action - Konig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I say LEARN, I mean I don&#39;t just want to do a cursory read of these. I want to really engage the concepts presented in each and apply them to my day-to-day work. I already have a head start reading the first two books. The third and fourth books are actually textbooks from my undergraduate education. I could really use a refresher on these concepts, and I think I&#39;m a much more serious student now as a professional than I was when I was actually a student.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Review two books for the JavaLobby/DZone book review team&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I joined this team several months ago and was actually assigned to review two books - again, life got in the way (if you have any small children, you&#39;ll understand). Things have settled down a bit now and I&#39;ve asked to rejoin. Hopefully I&#39;ll be able to crank out some reviews this time and learn something in the process.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Pass the Sun Certified Programmer for the Java 2 Platform, Standard Edition 5.0 Exam&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I want to do this mainly to give myself an excuse to go back over the fundamentals of Java, as well as learn the new features that 5.0 brought to the table in detail (generics, annotations, etc.). I have still basically been living in a Java 1.4 world as I&#39;d say roughly 85% of my daily work is on an application that is still bound to that JDK. So, passing this is mainly just a reason to study, and it is a nice edition to the resume as well.&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Write one Java/software development blog article per week&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This would be numero uno! I&#39;ve always stressed about the frequency of my blog writing - I&#39;ve felt compelled to write every single day, and I usually end up writing a one paragraph synopsis of some other guy&#39;s blog entry. Not exactly something that will attract many readers. I&#39;ll still post those on a more frequent basis as they keep the content flowing, but I also want to write at least one in-depth article per week to give people something to look forward to. One way I&#39;ll do this is to blog about the books I&#39;m reading. The Pragmatic Programmer provides challenges and/or exercises at the end of each chapter - great seeds for entries.&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Attend JavaOne 2008 or similar conference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This one depends on the boss - hopefully I&#39;ll get to travel again this year. I&#39;d love to go back to JavaOne - I learned a lot, and big geek shows always motivate me to go back and introduce new technology to the group, as well as get more involved in the community. I always feel a surge in my professional development in the 2-3 month period following my attending a conference.&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Start a Memphis/Mid-South Area Java User Group&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We don&#39;t have a JUG in this area and I really think that we could benefit from one. My company has a large number of Java developers, and I know that several others in the area, including FedEx and Autozone do as well. This would be a great way to get some of the good speakers from the conferences I&#39;ve attended to speak locally, and it may even serve to get us on the map with some of the smaller shows like NFJS. Sun and others really seem to take an interest in supporting JUGS, so I look forward to see what happens. I&#39;ve started a &lt;a href=&#34;http://groups.google.com/group/memphis-mid-south-jug&#34;&gt;Google Group&lt;/a&gt; for the newborn JUG, and I&#39;ll be blogging more in the future about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>how to implement form level validation in jsf</title>
      <link>https://www.mattstine.com/2007/06/27/how-to-implement-form-level-validation-in-jsf/</link>
      <pubDate>Wed, 27 Jun 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/06/27/how-to-implement-form-level-validation-in-jsf/</guid>
      <description>&lt;p&gt;Recently I was faced with the challenge of implementing form-level (or page-level) validation in a JSF-based application. What I mean by form-level validation is the need to evaluate a subset of a form&#39;s fields as a unit, rather than simply validating each field in isolation. An example of this type of validation can be found on a user registration form where one has to select a password in one text field, and then retype the same password in another text field for confirmation. Validating that these two text fields contain the same password is an example of form level validation.&lt;/p&gt;
&lt;p&gt;In my case, I had two date selector components on my form, one for a start date/time and one for an end date/time for an event that was being scheduled. The rule I needed to validate was that the end date/time was later than the start date/time.&lt;/p&gt;
&lt;p&gt;There are a few ways to implement validation like this, including but not limited to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Build a custom component that renders selectors for both the start and end date/time, then validate as a unit. This actually is field-level validation and doesn&#39;t truly address the form-level problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a validator method on a managed bean that will evaluate the data submitted for multiple components.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;ll address the second method in this HOWTO.&lt;/p&gt;
&lt;p&gt;First, you&#39;ll need to bind at least &lt;em&gt;n-1&lt;/em&gt; of the components that you want to validate to properties on your managed bean. The simplest way is to declare properties of type &lt;strong&gt;UIInput&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;private UIInput startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public UIInput getStartDateComponent() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    return startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public void setStartDateComponent(UIInput startDateComponent) {  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    this.startDateComponent = startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and do the actual binding in the JSP:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&amp;lt;t:inputDate id=&amp;quot;eventStart&amp;rdquo; value=&amp;rdquo;#{orderForm.sampleInfo.requestedStartTime}&amp;ldquo;&lt;br&gt;&lt;/br&gt;    type=&amp;quot;both&amp;quot;&lt;br&gt;&lt;/br&gt;    popupCalendar=&amp;quot;true&amp;quot;&lt;br&gt;&lt;/br&gt;    ampm=&amp;quot;true&amp;rdquo; binding=&amp;rdquo;#{dateValidationForm.startDateComponent}&amp;quot;/&amp;gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, you&#39;ll implement the validation method, which can have any name you like, but must share the same signature as this example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;public void validateEndDate(FacesContext context, UIComponent toValidate, Object value) {&lt;br&gt;&lt;/br&gt;    Date endDate = (Date) value;&lt;br&gt;&lt;/br&gt;    Date startDate = (Date) getStartDateComponent().getLocalValue();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    if (startDate == null) {&lt;br&gt;&lt;/br&gt;        context.addMessage(getStartDateComponent().getClientId(context),new FacesMessage(&amp;ldquo;Please specify a valid date and time.&amp;quot;));&lt;br&gt;&lt;/br&gt;        throw new ValidatorException(new FacesMessage());&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    long endTime = endDate.getTime();&lt;br&gt;&lt;/br&gt;    long startTime = startDate.getTime();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    if (startTime &amp;gt;= endTime) {&lt;br&gt;&lt;/br&gt;        addError(&amp;ldquo;errors.batchOrder.invalidEndDate&amp;rdquo;);&lt;br&gt;&lt;/br&gt;        throw new ValidatorException(new FacesMessage(&amp;ldquo;Event end must be later than event start.&amp;quot;));&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And finally, you&#39;ll bind the validation method to the last component in your subset of components that need to be validated together:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&amp;lt;t:inputDate id=&amp;quot;eventEnd&amp;rdquo; value=&amp;rdquo;#{orderForm.sampleInfo.requestedEndTime}&amp;rdquo; type=&amp;quot;both&amp;rdquo; popupCalendar=&amp;quot;true&amp;rdquo; ampm=&amp;quot;true&amp;rdquo; validator=&amp;rdquo;#{dateValidationForm.validateEndDate}&amp;quot;/&amp;gt;&lt;br&gt;&lt;/br&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To understand why I say &lt;em&gt;n-1&lt;/em&gt; components, think of the way the validation phase occurs in JSF. Data is bound to the components in the order that they occur in the JSF component tree, which just so happens to be the order in which they appear in the JSP source. Looking at the &lt;strong&gt;validateEndDate&lt;/strong&gt; method, you&#39;ll see that I only reference the &lt;strong&gt;startDateComponent&lt;/strong&gt; from the binding, but I reference the &lt;strong&gt;endDate&lt;/strong&gt; as the &lt;strong&gt;Object value&lt;/strong&gt; reference that was passed into the method. This is why you only need to bind &lt;em&gt;n-1&lt;/em&gt; components, because you get the &lt;em&gt;nth&lt;/em&gt; component from the method signature.&lt;/p&gt;
&lt;p&gt;If you want to be more uniform and bind all of the components, you could create an extra dummy hidden value component and bind the validator method to it. You could then bind all of the components to your managed bean and access them all from the bindings rather than accessing one from the method signature.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;validateEndDate&lt;/strong&gt; method itself is rather simple. First you access the data by getting the local value of each component (again, the &lt;strong&gt;endDate&lt;/strong&gt; value is not accessed in this way - in fact, it hasn&#39;t been bound yet because it must be validated first, and that&#39;s what&#39;s happening in this method!). You then apply the business rule. You&#39;ll see that first I look to see if the &lt;strong&gt;startDate&lt;/strong&gt; is null. I&#39;m not sure why this is possible, but if the &lt;strong&gt;startDate&lt;/strong&gt; was not submitting a good value on the FIRST submit, the local value was null. So, I catch that here. I add an error message to the &lt;strong&gt;startDateComponent&lt;/strong&gt; and throw a &lt;strong&gt;ValidatorException&lt;/strong&gt;. If the business rule is violated, throw a &lt;strong&gt;ValidatorException&lt;/strong&gt;. (I&#39;m also using the &lt;strong&gt;addError&lt;/strong&gt; method provided by AppFuse to work w/ its message framework as well, but that is not necessary w/ all JSF apps).&lt;/p&gt;
&lt;p&gt;Now, for the final problem I encountered. In Weblogic server, which we&#39;re still using for the time being, if your session cannot be serialized then it deletes your entire session. Obviously this can cause major problems in any web app. To deal with this, ANY SESSION SCOPED MANAGED BEAN must be fully serializable, meaning it and any objects referenced in its state. Herein lies the problem for JSF. Instances of &lt;strong&gt;UIComponent&lt;/strong&gt; (an ancestor of &lt;strong&gt;UIInput&lt;/strong&gt;) are not serializable, so if we bind our components to &lt;strong&gt;UIInput&lt;/strong&gt; fields on a session-scoped managed bean (the bean backing this form is an Order Form/Shopping Cart style bean), it will not be serializable and Weblogic will kick out your session.&lt;/p&gt;
&lt;p&gt;To deal with this problem, realize that there is no reason that you can only have one managed bean backing a form. In fact, you can reference as many managed beans as you need. Since validation is done for each request, there is no need to manage any state there across multiple requests like we need to do with a shopping cart. So, why not declare an additional managed bean that is REQUEST SCOPED, and then put the bindings and validation method there. That is exactly what I did. Here is the entire bean:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;public class DateValidationForm extends BasePage {&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    private UIInput startDateComponent;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    public UIInput getStartDateComponent() {&lt;br&gt;&lt;/br&gt;        return startDateComponent;&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt;    public void setStartDateComponent(UIInput startDateComponent) {&lt;br&gt;&lt;/br&gt;        this.startDateComponent = startDateComponent;&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    public void validateEndDate(FacesContext context, UIComponent toValidate, Object value) {&lt;br&gt;&lt;/br&gt;        Date endDate = (Date) value;&lt;br&gt;&lt;/br&gt;        Date startDate = (Date) getStartDateComponent().getLocalValue();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        if (startDate == null) {&lt;br&gt;&lt;/br&gt;            context.addMessage(getStartDateComponent().getClientId(context),new FacesMessage(&amp;ldquo;Please specify a valid date and time.&amp;quot;));&lt;br&gt;&lt;/br&gt;            throw new ValidatorException(new FacesMessage());&lt;br&gt;&lt;/br&gt;        }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        long endTime = endDate.getTime();&lt;br&gt;&lt;/br&gt;        long startTime = startDate.getTime();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        if (startTime &amp;gt;= endTime) {&lt;br&gt;&lt;/br&gt;            addError(&amp;ldquo;errors.batchOrder.invalidEndDate&amp;rdquo;);&lt;br&gt;&lt;/br&gt;            throw new ValidatorException(new FacesMessage(&amp;ldquo;Event end must be later than event start.&amp;quot;));&lt;br&gt;&lt;/br&gt;        }&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the declaration in faces-config.xml:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;managed-bean&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-name&gt;dateValidationForm&lt;/managed-bean-name&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-class&gt;org.stjude.hc.srmcti.webapp.action.ordering.
DateValidationForm&lt;/managed-bean-class&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-scope&gt;request&lt;/managed-bean-scope&gt;&lt;br&gt;&lt;/br&gt;&lt;/managed-bean&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;The added bonus is that you can reuse this bean across all forms where you need this behavior. My application happens to have 2 additional forms where I would have repeated this logic, so I just reference this bean there.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matt rtfm commons collections has closures</title>
      <link>https://www.mattstine.com/2006/08/17/matt-rtfm-commons-collections-has-closures/</link>
      <pubDate>Thu, 17 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/17/matt-rtfm-commons-collections-has-closures/</guid>
      <description>&lt;p&gt;Thanks to everyone who pointed me to &lt;a href=&#34;http://jakarta.apache.org/commons/collections/&#34;&gt;Commons Collections&lt;/a&gt; and its &lt;a href=&#34;http://jakarta.apache.org/commons/collections/api-release/org/apache/commons/collections/functors/package-summary.html&#34;&gt;Functor package&lt;/a&gt; yesterday. To me, this is just one step below having closures natively present in the language. FYI, I was able to remove all duplication from my class and reduce the LOC from 211 to 136 - in other words, 75 lines of useless code GONE.&lt;/p&gt;
&lt;p&gt;Here is what I did. First, I defined Predicates for each of my conditions. The simplest ones called a boolean method on the User object:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private final Predicate isX = new Predicate() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public boolean evaluate(Object object) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     return ((User) object).isX();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only slightly more complicated ones checked to see if a given Collection was empty on the User object:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private final Predicate isX = new Predicate() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public boolean evaluate(Object object) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     return CollectionUtils.isNotEmpty(((User) object).getItems());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I defined a method that would check the delegations for the User to see if any of them were an X:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boolean checkDelegations(User user, Predicate checkPredicate) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return CollectionUtils.exists(user.getDelegations(), checkPredicate);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I implemented the security methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public boolean canDoThis() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return isX.evaluate(loggedInUser) || checkDelegations(loggedInUser, isX);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe it isnât the most elegant or simplest of solutions, but it sure is a lot better than what I posted yesterday!&lt;/p&gt;
&lt;p&gt;P.S. Since this is a Christian blog, I must remind you that RTFM stands for Read The &lt;strong&gt;FINE&lt;/strong&gt; Manual!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>java needs closures</title>
      <link>https://www.mattstine.com/2006/08/16/java-needs-closures/</link>
      <pubDate>Wed, 16 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/16/java-needs-closures/</guid>
      <description>&lt;p&gt;Iâm sure everyone is sick of reading this same rant over and over, but I just had to add more fuel to the fire. Iâm attempting to implement access privilege delegation in a JSF application - basically, users can delegate their ability to do âstuffâ in our application to other users. I have a backing bean that has several methods that are called by the JSF components, returning whether or not to render that component based on security privileges. Well, I now have to make all of those methods aware of delegation! I have something like this in several methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boolean notX = (loggedInUser.isX());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;if (notX) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  boolean result = false;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Set delegations = loggedInUser.getDelegations();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  for (Iterator i = delegations.iterator(); i.hasNext();) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     User delegator = (User) i.next();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     if (delegator.isX()) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        result = true;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        break;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return result;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;} else {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return true;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, it would be nice if I could extract the contents of that if block into a new method, say âcheckDelegations()â. Unfortunately, the isX() that I need to call is different for every method following this pattern. Iâd like to be able to pass a function that calls isX() on the delegator into the checkDelegations() method. No dice in Java. Does anyone else have a solution to this problem?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>it seems that appfuse has a competitor</title>
      <link>https://www.mattstine.com/2006/08/15/it-seems-that-appfuse-has-a-competitor/</link>
      <pubDate>Tue, 15 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/15/it-seems-that-appfuse-has-a-competitor/</guid>
      <description>&lt;p&gt;I found &lt;a href=&#34;http://blogs.opensymphony.com/plightbo/2006/08/project_able_a_complete_java_w.html&#34;&gt;Project Able&lt;/a&gt; while reading &lt;a href=&#34;http://www.analienandastranger.com/?p=25&#34;&gt;Raibleâs blog&lt;/a&gt; this morning. While it doesnât claim to duplicate everything that AppFuse does (i.e. they pick a framework and stick with it instead of providing choice), they are doing some neat things. I may take a look at it if I ever have time. &lt;img src=&#34;http://www.analienandastranger.com/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Project Able is a full Java-based web development stack designed to make web development painless. In a sense, it is an attempt to bring together quality opensource tools in one cohesive stack, similar to what Rails has done for Ruby, while also encouraging common practices Iâve used in software engineering for a long time.&lt;/p&gt;
&lt;p&gt;It is very similar to projects such as Trails, Grails, and AppFuse. However, there are a few key differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The stack components are different (WebWork, Spring, iBatis, etc).&lt;/li&gt;
&lt;li&gt;In addition to the basic framework, Able also encourages common development techniques and patterns (more below).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>raiblee28099s wiki appfuseroadmap</title>
      <link>https://www.mattstine.com/2006/08/15/raiblee28099s-wiki-appfuseroadmap/</link>
      <pubDate>Tue, 15 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/15/raiblee28099s-wiki-appfuseroadmap/</guid>
      <description>&lt;p&gt;Raible updated the &lt;a href=&#34;http://raibledesigns.com/wiki/AppFuseRoadmap.html&#34;&gt;AppFuseRoadmap&lt;/a&gt; yesterday. Iâm really excited about where the project is going. XDoclet has been a good friend, but Iâm really happy to see its demise in favor of annotations. JDK 5 and JSP 2.0 will also be really helpful - Iâve wanted to leverage these technologies for a long time, but havenât had an easy way to do so. I think the most interesting thing for me will be the switch over to Maven 2. I have absolutely ZERO experience with Maven, other that seeing the pretty websites that it generates for many of my favorite open source projects. I consider myself to be something of an Ant wizard, so I hope that Iâll be able to leverage that experience in Maven.&lt;/p&gt;
&lt;p&gt;It looks like TestNG replacing JUnit is a nice-to-have for 2.0 - I hope this becomes a configuration option. I donât know anything about TestNG. Perhaps itâs time to learn. &lt;img src=&#34;http://www.analienandastranger.com/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34;&gt;&lt;/p&gt;
&lt;p&gt;AppFuse 2.2 is where things are really going to start getting cool. Convention over configuration (ala RoR) will really speed development, and features by plugin will make my life really easier. I spend a lot of time stripping things out that I donât need for particular projects - the time I save by using AppFuse is worth the pain of stripping them out - so this will be yet another way that AppFuse will make Java EE development a pleasure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>seven simple reasons to use appfuse</title>
      <link>https://www.mattstine.com/2006/08/09/seven-simple-reasons-to-use-appfuse/</link>
      <pubDate>Wed, 09 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/09/seven-simple-reasons-to-use-appfuse/</guid>
      <description>&lt;p&gt;Iâve wanted for some time now to write a blog entry promoting my favorite open source project - AppFuse. Since I started developing web applications using AppFuse as a base, I can truly say that Iâve rediscovered the joy of software development. Iâve found no other technology or methodology that has allowed me to place as much focus as I now do on solving business problems and not on technology ramp-up or figuring out the eccentricities of âframework X.â In this article, &lt;a href=&#34;http://raibledesigns.com/&#34;&gt;Matt Raible&lt;/a&gt;, the founder of the &lt;a href=&#34;http://www.appfuse.org/&#34;&gt;AppFuse&lt;/a&gt; project, humbly states very compelling reasons that you should use AppFuse for your J2EE development. To summarize, here are the 7 reaons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Automation&lt;/li&gt;
&lt;li&gt;Security Features and Extensibility&lt;/li&gt;
&lt;li&gt;Code Generation with AppGen&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Read the article to get the meat:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www-128.ibm.com/developerworks/java/library/j-appfuse/&#34;&gt;Seven simple reasons to use AppFuse&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jfreechart appfuse integration</title>
      <link>https://www.mattstine.com/2006/07/25/jfreechart-appfuse-integration/</link>
      <pubDate>Tue, 25 Jul 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/07/25/jfreechart-appfuse-integration/</guid>
      <description>&lt;p&gt;I recently finished integrating &lt;a href=&#34;http://http//www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt; with AppFuse for a project I&#39;m working on. JFreeChart is a really powerful Java chart library. If your application has any requirements for charts/graphs, I highly recommend it. The user manual and demo code come with a price tag ($39.95 for a single developer), but they are well worth the purchase - especially the demo code. If you don&#39;t have the $$$, the &lt;a href=&#34;http://www.jfree.org/phpBB2/viewforum.php?f=3&#34;&gt;support forum&lt;/a&gt; is also very helpful.&lt;/p&gt;
&lt;p&gt;I plan to put together a tutorial to help anyone interested in using JFreeChart in their AppFuse application. Look for it here and on the appfuse-user mailing list. It will be based on JSF since that&#39;s what I&#39;m using right now.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
