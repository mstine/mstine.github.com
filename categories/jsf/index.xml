<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jsf | Matt Stine</title>
    <link>https://www.mattstine.com/categories/jsf/</link>
      <atom:link href="https://www.mattstine.com/categories/jsf/index.xml" rel="self" type="application/rss+xml" />
    <description>jsf</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020 Matt Stine</copyright><lastBuildDate>Wed, 27 Jun 2007 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>jsf</title>
      <link>https://www.mattstine.com/categories/jsf/</link>
    </image>
    
    <item>
      <title>how to implement form level validation in jsf</title>
      <link>https://www.mattstine.com/2007/06/27/how-to-implement-form-level-validation-in-jsf/</link>
      <pubDate>Wed, 27 Jun 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/06/27/how-to-implement-form-level-validation-in-jsf/</guid>
      <description>&lt;p&gt;Recently I was faced with the challenge of implementing form-level (or page-level) validation in a JSF-based application. What I mean by form-level validation is the need to evaluate a subset of a form&#39;s fields as a unit, rather than simply validating each field in isolation. An example of this type of validation can be found on a user registration form where one has to select a password in one text field, and then retype the same password in another text field for confirmation. Validating that these two text fields contain the same password is an example of form level validation.&lt;/p&gt;
&lt;p&gt;In my case, I had two date selector components on my form, one for a start date/time and one for an end date/time for an event that was being scheduled. The rule I needed to validate was that the end date/time was later than the start date/time.&lt;/p&gt;
&lt;p&gt;There are a few ways to implement validation like this, including but not limited to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Build a custom component that renders selectors for both the start and end date/time, then validate as a unit. This actually is field-level validation and doesn&#39;t truly address the form-level problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a validator method on a managed bean that will evaluate the data submitted for multiple components.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;ll address the second method in this HOWTO.&lt;/p&gt;
&lt;p&gt;First, you&#39;ll need to bind at least &lt;em&gt;n-1&lt;/em&gt; of the components that you want to validate to properties on your managed bean. The simplest way is to declare properties of type &lt;strong&gt;UIInput&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;private UIInput startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public UIInput getStartDateComponent() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    return startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public void setStartDateComponent(UIInput startDateComponent) {  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    this.startDateComponent = startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and do the actual binding in the JSP:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&amp;lt;t:inputDate id=&amp;quot;eventStart&amp;rdquo; value=&amp;rdquo;#{orderForm.sampleInfo.requestedStartTime}&amp;ldquo;&lt;br&gt;&lt;/br&gt;    type=&amp;quot;both&amp;quot;&lt;br&gt;&lt;/br&gt;    popupCalendar=&amp;quot;true&amp;quot;&lt;br&gt;&lt;/br&gt;    ampm=&amp;quot;true&amp;rdquo; binding=&amp;rdquo;#{dateValidationForm.startDateComponent}&amp;quot;/&amp;gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, you&#39;ll implement the validation method, which can have any name you like, but must share the same signature as this example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;public void validateEndDate(FacesContext context, UIComponent toValidate, Object value) {&lt;br&gt;&lt;/br&gt;    Date endDate = (Date) value;&lt;br&gt;&lt;/br&gt;    Date startDate = (Date) getStartDateComponent().getLocalValue();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    if (startDate == null) {&lt;br&gt;&lt;/br&gt;        context.addMessage(getStartDateComponent().getClientId(context),new FacesMessage(&amp;ldquo;Please specify a valid date and time.&amp;quot;));&lt;br&gt;&lt;/br&gt;        throw new ValidatorException(new FacesMessage());&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    long endTime = endDate.getTime();&lt;br&gt;&lt;/br&gt;    long startTime = startDate.getTime();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    if (startTime &amp;gt;= endTime) {&lt;br&gt;&lt;/br&gt;        addError(&amp;ldquo;errors.batchOrder.invalidEndDate&amp;rdquo;);&lt;br&gt;&lt;/br&gt;        throw new ValidatorException(new FacesMessage(&amp;ldquo;Event end must be later than event start.&amp;quot;));&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And finally, you&#39;ll bind the validation method to the last component in your subset of components that need to be validated together:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&amp;lt;t:inputDate id=&amp;quot;eventEnd&amp;rdquo; value=&amp;rdquo;#{orderForm.sampleInfo.requestedEndTime}&amp;rdquo; type=&amp;quot;both&amp;rdquo; popupCalendar=&amp;quot;true&amp;rdquo; ampm=&amp;quot;true&amp;rdquo; validator=&amp;rdquo;#{dateValidationForm.validateEndDate}&amp;quot;/&amp;gt;&lt;br&gt;&lt;/br&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To understand why I say &lt;em&gt;n-1&lt;/em&gt; components, think of the way the validation phase occurs in JSF. Data is bound to the components in the order that they occur in the JSF component tree, which just so happens to be the order in which they appear in the JSP source. Looking at the &lt;strong&gt;validateEndDate&lt;/strong&gt; method, you&#39;ll see that I only reference the &lt;strong&gt;startDateComponent&lt;/strong&gt; from the binding, but I reference the &lt;strong&gt;endDate&lt;/strong&gt; as the &lt;strong&gt;Object value&lt;/strong&gt; reference that was passed into the method. This is why you only need to bind &lt;em&gt;n-1&lt;/em&gt; components, because you get the &lt;em&gt;nth&lt;/em&gt; component from the method signature.&lt;/p&gt;
&lt;p&gt;If you want to be more uniform and bind all of the components, you could create an extra dummy hidden value component and bind the validator method to it. You could then bind all of the components to your managed bean and access them all from the bindings rather than accessing one from the method signature.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;validateEndDate&lt;/strong&gt; method itself is rather simple. First you access the data by getting the local value of each component (again, the &lt;strong&gt;endDate&lt;/strong&gt; value is not accessed in this way - in fact, it hasn&#39;t been bound yet because it must be validated first, and that&#39;s what&#39;s happening in this method!). You then apply the business rule. You&#39;ll see that first I look to see if the &lt;strong&gt;startDate&lt;/strong&gt; is null. I&#39;m not sure why this is possible, but if the &lt;strong&gt;startDate&lt;/strong&gt; was not submitting a good value on the FIRST submit, the local value was null. So, I catch that here. I add an error message to the &lt;strong&gt;startDateComponent&lt;/strong&gt; and throw a &lt;strong&gt;ValidatorException&lt;/strong&gt;. If the business rule is violated, throw a &lt;strong&gt;ValidatorException&lt;/strong&gt;. (I&#39;m also using the &lt;strong&gt;addError&lt;/strong&gt; method provided by AppFuse to work w/ its message framework as well, but that is not necessary w/ all JSF apps).&lt;/p&gt;
&lt;p&gt;Now, for the final problem I encountered. In Weblogic server, which we&#39;re still using for the time being, if your session cannot be serialized then it deletes your entire session. Obviously this can cause major problems in any web app. To deal with this, ANY SESSION SCOPED MANAGED BEAN must be fully serializable, meaning it and any objects referenced in its state. Herein lies the problem for JSF. Instances of &lt;strong&gt;UIComponent&lt;/strong&gt; (an ancestor of &lt;strong&gt;UIInput&lt;/strong&gt;) are not serializable, so if we bind our components to &lt;strong&gt;UIInput&lt;/strong&gt; fields on a session-scoped managed bean (the bean backing this form is an Order Form/Shopping Cart style bean), it will not be serializable and Weblogic will kick out your session.&lt;/p&gt;
&lt;p&gt;To deal with this problem, realize that there is no reason that you can only have one managed bean backing a form. In fact, you can reference as many managed beans as you need. Since validation is done for each request, there is no need to manage any state there across multiple requests like we need to do with a shopping cart. So, why not declare an additional managed bean that is REQUEST SCOPED, and then put the bindings and validation method there. That is exactly what I did. Here is the entire bean:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;public class DateValidationForm extends BasePage {&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    private UIInput startDateComponent;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    public UIInput getStartDateComponent() {&lt;br&gt;&lt;/br&gt;        return startDateComponent;&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt;    public void setStartDateComponent(UIInput startDateComponent) {&lt;br&gt;&lt;/br&gt;        this.startDateComponent = startDateComponent;&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    public void validateEndDate(FacesContext context, UIComponent toValidate, Object value) {&lt;br&gt;&lt;/br&gt;        Date endDate = (Date) value;&lt;br&gt;&lt;/br&gt;        Date startDate = (Date) getStartDateComponent().getLocalValue();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        if (startDate == null) {&lt;br&gt;&lt;/br&gt;            context.addMessage(getStartDateComponent().getClientId(context),new FacesMessage(&amp;ldquo;Please specify a valid date and time.&amp;quot;));&lt;br&gt;&lt;/br&gt;            throw new ValidatorException(new FacesMessage());&lt;br&gt;&lt;/br&gt;        }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        long endTime = endDate.getTime();&lt;br&gt;&lt;/br&gt;        long startTime = startDate.getTime();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        if (startTime &amp;gt;= endTime) {&lt;br&gt;&lt;/br&gt;            addError(&amp;ldquo;errors.batchOrder.invalidEndDate&amp;rdquo;);&lt;br&gt;&lt;/br&gt;            throw new ValidatorException(new FacesMessage(&amp;ldquo;Event end must be later than event start.&amp;quot;));&lt;br&gt;&lt;/br&gt;        }&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the declaration in faces-config.xml:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;managed-bean&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-name&gt;dateValidationForm&lt;/managed-bean-name&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-class&gt;org.stjude.hc.srmcti.webapp.action.ordering.
DateValidationForm&lt;/managed-bean-class&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-scope&gt;request&lt;/managed-bean-scope&gt;&lt;br&gt;&lt;/br&gt;&lt;/managed-bean&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;The added bonus is that you can reuse this bean across all forms where you need this behavior. My application happens to have 2 additional forms where I would have repeated this logic, so I just reference this bean there.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>thursday was slow</title>
      <link>https://www.mattstine.com/2007/05/11/thursday-was-slow/</link>
      <pubDate>Fri, 11 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/11/thursday-was-slow/</guid>
      <description>&lt;p&gt;for me, not for JavaOne. Of course I was a good little programmer and used the schedule builder to sign up for all of my sessions. I edited them a bit after the first two keynotes. Even then, I had one lone session scheduled for Thursday morning (that wasn&#39;t really directly applicable to my work, it just looked interesting), and then two sessions in the afternoon, the first starting at 4:10. I decided to skip out on the morning session and do a little shopping at Pier 39. The highlight was a &amp;ldquo;Bucket of Boat Trash&amp;rdquo; and clam chowder at the Bubba Gump Shrimp Company. And yes, we Ole Miss Rebels are represented as far out as the end of Pier 39:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/SanFranciscoJavaOne2007/photo#5063511710562298018&#34;&gt;&lt;img src=&#34;http://lh4.google.com/image/matt.stine/RkU1ErgYqKI/AAAAAAAAAMA/6BJ0mkhqgn8/s288/DSCN1117.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The two sessions that I attended were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RubyTooling: State of the Art&lt;/li&gt;
&lt;li&gt;Using Ajax with POJC (Plain Old JavaServer Faces Components)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I attended the first session simply to get a little more detail on all of the hype surrounding Ruby tooling support in NetBeans 6. What I got was even more than I bargained for. The project leaders actually walked us through not only the features that were available, but how they were implemented. I had never really thought about the problems with providing code completion and refactoring with a dynamically-typed language. It was really cool to see the thought process that went into their solutions. I&#39;d love to hear a similar discussion from the JetBrains guys, as the Ruby support in IntelliJ IDEA is quite good as well.&lt;/p&gt;
&lt;p&gt;For me the second session was the best of the conference for me up until that point, and arguably it still is after attending Friday&#39;s sessions. Craig McClanahan, of Struts fame, was the main speaker and was joined by his colleagues Matthew Bohm and Jayashri Visvanathan. What made this session so good for me was that they presented a problem - &amp;ldquo;How can I add Ajax behaviors to my JavaServerâ¢ Faces technology based application, without throwing away my investment in existing component libraries?&amp;rdquo; - and then provided three different solutions to that problem - low, medium, and high level.&lt;/p&gt;
&lt;p&gt;The low level consisted of simply using the HTML event pass-through attributes that are implemented by most standard JSF components (onClick, onBlur, etc.). One could use an existing JavaScript framework such as Dojo to send an XMLHttpRequest and then map that request to a Servlet or JSF handler using a technology such as Shale Remoting. The response could be sent back as JSON data which could then be transformed into the desired UI update.&lt;/p&gt;
&lt;p&gt;The medium level consisted of actually extending existing JSF components and adding the desired Ajax behavior. Due to time constraints they didn&#39;t cover this solution in detail, but they did provide a link to a detailed discussion in the Java BluePrints catalog: &lt;a href=&#34;https://blueprints.dev.java.net/bpcatalog/ee5/ajax/extendingRenderFunctionality.html&#34;&gt;https://blueprints.dev.java.net/bpcatalog/ee5/ajax/extendingRenderFunctionality.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The high level solutions addressed the following needs (copied directly from the slides):&lt;/p&gt;
&lt;p&gt;â Partial page submitâgather up a particular set of&lt;br&gt;
input element values, and send them to a bit of server&lt;br&gt;
side business logic&lt;br&gt;
â Partial page refreshâthe business logic needs to&lt;br&gt;
refresh the content of one or more subtrees of the&lt;br&gt;
client side DOM&lt;br&gt;
â Synchronizationâthe benefits of synchronizing the&lt;br&gt;
server side state&lt;br&gt;
â Donât repeat yourself (DRY)âreuse existing&lt;br&gt;
components and renderers for partial page updates&lt;/p&gt;
&lt;p&gt;To address these issues, the speakers highlighted two add-on frameworks:&lt;/p&gt;
&lt;p&gt;â Ajax4JSF (&lt;a href=&#34;http://labs.jboss.com/portal/jbossajax4jsf&#34;&gt;http://labs.jboss.com/portal/jbossajax4jsf&lt;/a&gt;)&lt;br&gt;
â Dynamic Faces (&lt;a href=&#34;https://jsf-extensions.dev.java.net/&#34;&gt;https://jsf-extensions.dev.java.net/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I was quite impressed with both of these frameworks. One of my colleagues is currently implementing Ajax behavior in a Facelets-based application using Ajax4JSF and he is quite happy with it. Dynamic Faces looked really awesome, especially its tooling support in NetBeans (actually I&#39;m quite impressed with the overall JSF support in NetBeans - I&#39;ll definitely be adding it to my tool belt). The highlight of the presentation was Matt&#39;s video of him building an entire currency trading application in 28 minutes - except it was &amp;ldquo;fast-played&amp;rdquo; to finish in 3 1/2 minutes and set to techno music. Matt wowed us with his dancing abilities while we watched true RAD. The crowd went wild!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>wednesday was ajax day</title>
      <link>https://www.mattstine.com/2007/05/10/wednesday-was-ajax-day/</link>
      <pubDate>Thu, 10 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/10/wednesday-was-ajax-day/</guid>
      <description>&lt;p&gt;Not officially, but nearly every session I attended had something to do with AJAX:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating Amazing Web Interfaces with Ajax&lt;/li&gt;
&lt;li&gt;jMaki: Web 2.0 App Building Made Easy&lt;/li&gt;
&lt;li&gt;Fast, Beautiful, Easy: Pick Three - Building Web User Interfaces in the Java Programming Language with Google Web Toolkit&lt;/li&gt;
&lt;li&gt;Killer JavaScript Technology Frameworks for Java Platform Developers: An Exploration of Prototype, Script.aculo.us, and Rico&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have to say that I was rather impressed by what I saw.&lt;/p&gt;
&lt;p&gt;The first talk was by Ben and Dion, the Ajaxian guys. It was an appropriate way to start, as they gave a quick history overview of Ajax. One nice point they made was that Ajax really isn&#39;t about the acronym - it never was - it&#39;s about building killer websites. Who cares what the actual technology behind it is. They discussed a couple of what they seemed to consider the better frameworks available - Dojo and ExtJS. They then explored some amazing up and coming features, including offline support and 2D client side graphics manipulation.&lt;/p&gt;
&lt;p&gt;I was rather impressed with jMaki - in short it is a wrapper around many of the popular JavaScript frameworks available (Dojo, Yahoo UI, Script.aculo.us, Spry, Google), and makes them accessible to Java, PHP, and Ruby. It has excellent tool support in NetBeans and Eclipse. It provides protection from changes in the API&#39;s of all of these projects - you can mix and match frameworks and only be concerned about one API - jMaki&#39;s. It does the work of linking all of the widgets together and communicating amongst them and with the server side.&lt;/p&gt;
&lt;p&gt;The GWT talk was easily my favorite of the day. I&#39;m extremely impressed with what these guys have done. I hadn&#39;t had much opportunity to look at GWT until now, and I really wish I had. I was initially skeptical about writing an entire application in Java and letting it generate HTML and JavaScript. I guess these guys knew that, because they&#39;re development philosophy addresses my concerns quite nicely:&lt;/p&gt;
&lt;p&gt;To radically improve the web experience for&lt;br&gt;
users by enabling developers to use existing&lt;br&gt;
Java tools to build no-compromise AJAX for&lt;br&gt;
any modern browser&lt;/p&gt;
&lt;p&gt;From what I can see, they deliver on their mission. They&#39;ve optimized their code for speed and for browser specificity (e.g. from what I understand, if your client is using Firefox, you get Firefox optimized JavaScript, same for IE, etc.). You can use all of your favorite IDE features to build the code, including the debugger. I really want to try to make use of this toolkit in the near future.&lt;/p&gt;
&lt;p&gt;The final talk was less informative for me, but only because I had experience with most of the technologies already. The killer part of this was how the speaker extended existing JSF components and added Script.aculo.us effects. It really made his version of Yahoo maps shine.&lt;/p&gt;
&lt;p&gt;Ajax isn&#39;t going anywhere but up. I just left yet another Ajax/JSF session, which for me was the best session of the conference so far. In a later entry I&#39;ll tell you why.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
