<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Matt Stine</title>
    <link>https://www.mattstine.com/post/</link>
      <atom:link href="https://www.mattstine.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020 Matt Stine</copyright><lastBuildDate>Sun, 14 May 2017 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>Posts</title>
      <link>https://www.mattstine.com/post/</link>
    </image>
    
    <item>
      <title>Upcoming Cloud Native Architecture Training on O&#39;Reilly&#39;s Safari</title>
      <link>https://www.mattstine.com/2017/05/14/upcoming-cloud-native-architecture-training-on-oreillys-safari/</link>
      <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2017/05/14/upcoming-cloud-native-architecture-training-on-oreillys-safari/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m offering online training in Cloud Native Architecture via O&amp;#8217;Reilly&amp;#8217;s amazing Safari platform. Several dates still have openings:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.safaribooksonline.com/live-training/courses/cloud-native-architecture-patterns/0636920082057/&#34;&gt;September 6-7, 2017: 12:00pm - 4:00pm EDT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.safaribooksonline.com/live-training/courses/cloud-native-architecture-patterns/0636920082118/&#34;&gt;September 13-14, 2017: 12:00pm - 4:00pm EDT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.safaribooksonline.com/live-training/courses/cloud-native-architecture-patterns/0636920082231/&#34;&gt;October 4-5, 2017: 12:00pm - 4:00pm EDT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;More dates will be announced soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Designed for software architects and senior developers working on medium-to-large scale enterprise systems, this two-day, hands-on course will introduce you to the cloud native architectural pattern language and give you practice applying it. By the end of this course, you’ll be able to articulate the high-level narrative of cloud native architecture and why it is so important to your company. You’ll also be able to apply cloud native architecture patterns to various practice “katas” to prepare for future use on real projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Join us!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>cloud native app arch training</title>
      <link>https://www.mattstine.com/2015/02/18/cloud-native-app-arch-training/</link>
      <pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2015/02/18/cloud-native-app-arch-training/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m offering a two-day, intensive, hands-on training course at the upcoming O&amp;#8217;Reilly Software Architecture Conference in Boston, MS.
The class is entitled &lt;a href=&#34;http://softwarearchitecturecon.com/sa2015/public/schedule/detail/39989&#34;&gt;Cloud-Native Application Architectures with Spring and Cloud Foundry&lt;/a&gt;.
In this class you will have the opportunity to implement an easy-to-understand storefront system (complete with product search, details, reviews, and recommendations) as a cloud-native architecture using Spring and Cloud Foundry.
In addition, you&amp;#8217;ll get hands-on exposure to the Netflix OSS family of technologies.
All of this will happen over the course of 8 90-minute training sessions with 26 self-guided hands-on labs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use the discount code &lt;strong&gt;SPRING&lt;/strong&gt; for a 20% discount on your pass!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Join us!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>learning to go part i interfaces</title>
      <link>https://www.mattstine.com/2014/07/08/learning-to-go-part-i-interfaces/</link>
      <pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2014/07/08/learning-to-go-part-i-interfaces/</guid>
      <description>&lt;div class=&#34;quoteblock abstract&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;This article was originally published in the &lt;a href=&#34;https://nofluffjuststuff.com/home/magazine_subscribe?id=52&#34;&gt;April 2014 issue&lt;/a&gt; of NFJS the Magazine.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This article begins an introductory series on the &lt;a href=&#34;http://golang.org&#34;&gt;Go programming language&lt;/a&gt;.
Go is a language optimized for large-scale software engineering and is rapidly becoming the language of choice for building cloud services.
It does this in a very interesting way, optimizing for simplicity rather than complexity and taking a &amp;#8220;less is exponentially more&amp;#8221; approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Three ways in which this really stands out are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A pragmatic approach to component design (through implicitly satisfied interfaces)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The need to forget much of what you&amp;#8217;ve learned about object-oriented programming (and to prefer composition over inheritance)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A concurrency model that mere mortals can use to great effect (via goroutines and channels)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Overall, it&amp;#8217;s a language with the productivity of a dynamically-typed, interpreted language with the safety and efficiency found in a statically-typed, compiled language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This series will focus on learning Go from the perspective of Java developers.
We&amp;#8217;ll begin with design ideas informed by Go&amp;#8217;s primary method of abstraction: interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_what_if_i_told_you_classes_were_unnecessary&#34;&gt;What If I Told You Classes Were Unnecessary?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Object-oriented programming (OO) has dominated large-scale software engineering for quite some time now.
While OO finds its roots in simulation programming, it moved into and began to dominate the mainstream of business programming with the advent of languages like C++ and Java.
When we design programs in an OO language, we usually begin with an object model, defining a taxonomy of objects representing all of the entities, or nouns, in our business domain.
Languages like C++ and Java support this via the &lt;em&gt;class&lt;/em&gt; construct, with a class defining a &lt;em&gt;template&lt;/em&gt; for creating a particular type of &lt;em&gt;object&lt;/em&gt;.
Classes normally can be extended, creating &lt;em&gt;subclasses&lt;/em&gt;.
This allows us to define a hierarchy of types that inherit characteristics and behavior from one another.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But what if I told you that classes were unnecessary? This may seem like heresy, but we already know it.
JavaScript has the feel of an OO language, but it does not have classes at all.
In fact, it utilizes what&amp;#8217;s called &lt;em&gt;prototype-based programming&lt;/em&gt; &lt;a href=&#34;#PBP&#34;&gt;[PBP]&lt;/a&gt;.
With prototype-based programming, we achieve reuse by cloning existing objects that serve as &lt;em&gt;prototypes&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Those of us that have surfed the wave of &lt;em&gt;functional programming&lt;/em&gt; have discovered that it&amp;#8217;s indeed possible to structure large programs around a very basic set of types (sets, lists, maps, etc.), along with a large collection of behaviors, or &lt;em&gt;functions&lt;/em&gt;, that can operate on those types.
In these languages, we don&amp;#8217;t really see anything resembling an object!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Go programming language is somewhat unique in that it offers many OO-like constructs, but does not offer either classes or prototypes. But it is also not correct to refer to it as a functional language &lt;em&gt;per se&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_favoring_composition_over_inheritance&#34;&gt;Favoring Composition Over Inheritance&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While the Java programming language has always included a type system featuring inheritance, it has long been considered best practice to favor composition over inheritance.
When Joshua Bloch, now Chief Java Architect at Google and then Distinguished Engineer at Sun Microsystems, wrote his seminal work &lt;em&gt;Effective Java&lt;/em&gt; &lt;a href=&#34;#EJ&#34;&gt;[EJ]&lt;/a&gt;, he included as Item #16: &amp;#8220;Favor composition over inheritance.&amp;#8221;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we use inheritance, we must be careful to implement subclasses such that they are in an &lt;em&gt;is-a&lt;/em&gt; relationship with their parents.
In other words, any context that expects an instance of the parent type should also work well with an instance of the subtype.
We call this &lt;em&gt;substitutabilty&lt;/em&gt;, which is expressed well by the Liskov Substitution Principle &lt;a href=&#34;#LSP&#34;&gt;[LSP]&lt;/a&gt;.
When we don&amp;#8217;t follow this principle, we usually end up creating a lot of code that uses type checking to implement special behaviors.
In doing so, we create fragile systems that don&amp;#8217;t abide by the Open-Closed Principle &lt;a href=&#34;#OCP&#34;&gt;[OCP]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we instead utilize composition, we build classes that are in a &lt;em&gt;has-a&lt;/em&gt; relationship with their components.
If we&amp;#8217;d like to encapsulate the relationship between a class and its components, we can apply &lt;em&gt;delegation&lt;/em&gt;, forwarding method calls to the underlying component.
This makes it appear as if our object &lt;em&gt;is-a&lt;/em&gt; instance of another type in terms of behavior, without the problems associated with inheritance-based reuse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Go programming language also emphasizes composition over inheritance, in that it does not even provide inheritance as a language construct! Instead, it provides the ability to use composition at the type and behavior level.
Let&amp;#8217;s see how.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_structs_ftw&#34;&gt;Structs FTW!&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In Go we can define composite data types using &lt;em class=&#34;term&#34;&gt;structs&lt;/em&gt;.
You may be familiar with structs if you&amp;#8217;ve spent any time programming in C.
Structs are simply a sequence of fields, each of which has a name and a type.
If you take a look at &lt;a href=&#34;#pstruct&#34;&gt;A &lt;code&gt;Point&lt;/code&gt; struct&lt;/a&gt;, you&amp;#8217;ll see that we&amp;#8217;ve defined a struct representing a point in Cartesian space.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pstruct&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;A &lt;code&gt;Point&lt;/code&gt; struct&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;type Point struct {
	X, Y float64
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;New Go types are defined using the &lt;code&gt;type&lt;/code&gt; keyword.
We give our type the name &lt;code&gt;Point&lt;/code&gt;.
It&amp;#8217;s important to note that we&amp;#8217;ve used uppercase here.
Visibility in Go is determined by the case of an identifier.
All code in Go is defined within a package.
If you&amp;#8217;d like your types and functions to be visible beyond the confines of your package, you need to &lt;em&gt;export&lt;/em&gt; them by starting them with an uppercase letter.
If you use a lowercase letter or underscore (&lt;code&gt;_&lt;/code&gt;), they will be &lt;em&gt;unexported&lt;/em&gt;, roughly equivalent to the Java concept of &lt;code&gt;private&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You&amp;#8217;ll quickly notice that we&amp;#8217;ve defined two fields in our struct, &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;, both of which take on the type &lt;code&gt;float64&lt;/code&gt;, representing a 64-bit floating-point number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Unlike Java, Go places the type declarations &lt;em&gt;after&lt;/em&gt; the field names (the same applies when declaring function arguments) - you&amp;#8217;ll get used to this eventually!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;del&gt;The keen observer will also note the case of the field names.
Just as case matters when dealing with type visibility beyond package boundaries, case also matters when dealing with field visibility beyond struct boundaries.
Because both &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are uppercase, they are exported from the struct.
Had they been &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, they would be unexported, and therefore only visible within the struct.
To find out how we&#39;ll deal with that, hold on until the next section!&lt;/del&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Update (2014-07-09):&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;My understanding of this point &lt;a href=&#34;http://www.reddit.com/r/golang/comments/2a5aui/learning_to_go_part_i_interfaces/cis9bm8&#34;&gt;was corrected&lt;/a&gt; on Reddit. Case only affects visibility with respect to packages, so &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; would also be accessible to any code within the package enclosing the struct. See &lt;a href=&#34;http://play.golang.org/p/ySlG9K5yfN&#34;&gt;this example&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So how do we create one of our &lt;code&gt;Point&lt;/code&gt;s? We have a couple of options. First, we can utilize the &lt;code&gt;new&lt;/code&gt; function:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pnew&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	p := *new(point.Point)
	p.X = 1
	p.Y = 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We prefixed our call to &lt;code&gt;new&lt;/code&gt; with an asterisk (&lt;code&gt;*&lt;/code&gt;) in order to dereference the pointer returned by &lt;code&gt;new&lt;/code&gt;.
Yes, that&amp;#8217;s right, Go has pointers.
With that said, there&amp;#8217;s no pointer arithmetic, so they&amp;#8217;re not quite as scary as what we find in languages like C and C++.
They almost represent a happy medium between C and Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
You also don&amp;#8217;t have to worry about freeing memory! Go is a garbage collected language.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Built-in types in Go start &lt;em&gt;zeroed&lt;/em&gt;, rather than &lt;code&gt;nil&lt;/code&gt;.
In the case of &lt;code&gt;float64&lt;/code&gt;, they take on the value &lt;code&gt;0&lt;/code&gt;.
It&amp;#8217;s good practice for our types to start zeroed as well, and we get that for free here.
Our newly initialized &lt;code&gt;Point&lt;/code&gt; represents the Cartesian coordinate &lt;em&gt;(0,0)&lt;/em&gt;. The next two statements move our &lt;code&gt;Point&lt;/code&gt; to &lt;em&gt;(1,2)&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We can eliminate the two step process by utilizing a composite literal:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pliteral&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	p = point.Point{X: 1, Y: 2}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A composite literal creates a new instance each time it is evaluated, and initializes each field with the given value.
In addition, this particular &lt;code&gt;Point&lt;/code&gt; starts out dereferenced.
If we actually want a pointer to it, we need to prefix the literal with an ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
It is generally considered idiomatic Go to prefer the composite literal style to using &lt;code&gt;new&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Enough about structs, on to methods!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_methods&#34;&gt;Methods&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Go methods are just functions that happen to have a &lt;em&gt;receiver&lt;/em&gt; argument.
You can find one in &lt;a href=&#34;#trans&#34;&gt;Method for translating &lt;code&gt;Point&lt;/code&gt;s&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;trans&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Method for translating &lt;code&gt;Point&lt;/code&gt;s&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;func (p Point) Translate(xDist float64, yDist float64) Point {
	return Point{p.X + xDist, p.Y + yDist}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;code&gt;Translate&lt;/code&gt; method takes two distances along the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;-axes, and &lt;em&gt;translates&lt;/em&gt; a point from its current position to a new position by returning a new &lt;code&gt;Point&lt;/code&gt; literal that combines the current &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; coordinates with those distances.
We call &lt;code&gt;Translate&lt;/code&gt; in &lt;a href=&#34;#trans-in&#34;&gt;Calling &lt;code&gt;Translate&lt;/code&gt;&lt;/a&gt;, and the output is found in &lt;a href=&#34;#trans-out&#34;&gt;Output of calling &lt;code&gt;Translate&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;trans-in&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Calling &lt;code&gt;Translate&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	q := p.Translate(5, 5)
	fmt.Printf(&#34;Translated %v to %v\n&#34;, p, q)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;trans-out&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Output of calling &lt;code&gt;Translate&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ go run point.go
Translated {1 2} to {6 7}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Because we&amp;#8217;re not operating on a pointer to a &lt;code&gt;Point&lt;/code&gt;, there&amp;#8217;s no way for us to affect the existing instance.
If we couple this with unexported fields, we&amp;#8217;d have completely controlled access to a &lt;code&gt;Point&lt;/code&gt; instance&amp;#8217;s fields.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;If we want to mutate a &lt;code&gt;Point&lt;/code&gt;, we need our method to use a pointer as the receiver argument rather than a value.
We do this in &lt;a href=&#34;#pointer&#34;&gt;Method for translating a &lt;code&gt;Point&lt;/code&gt; via a pointer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pointer&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Method for translating a &lt;code&gt;Point&lt;/code&gt; via a pointer&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;func (p *Point) TranslatePointer(xDist float64, yDist float64) {
	p.X = p.X + xDist
	p.Y = p.Y + yDist
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As you can see, rather than creating a new &lt;code&gt;Point&lt;/code&gt; and returning it, this method returns no value and directly mutates the &lt;code&gt;Point&lt;/code&gt; referred to by the pointer passed in as a receiver.
Notice that Go conveniently dereferences the pointer automatically when using the dot (&lt;code&gt;.&lt;/code&gt;) operator to access fields. We call this method on a pointer to a &lt;code&gt;Point&lt;/code&gt; in &lt;a href=&#34;#transp-in&#34;&gt;Calling &lt;code&gt;TranslatePointer&lt;/code&gt;&lt;/a&gt; (with output in &lt;a href=&#34;#transp-out&#34;&gt;Output of calling &lt;code&gt;TranslatePointer&lt;/code&gt;&lt;/a&gt;), again using an ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) to tell Go we&amp;#8217;d like a pointer to a &lt;code&gt;Point&lt;/code&gt;, not a &lt;code&gt;Point&lt;/code&gt; value.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;transp-in&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Calling &lt;code&gt;TranslatePointer&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	qP := &amp;amp;point.Point{X: 1, Y: 2}
	qP.TranslatePointer(5, 5)
	fmt.Printf(&#34;Translated using pointer to %v\n&#34;, qP)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;transp-out&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Output of calling &lt;code&gt;TranslatePointer&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ go run point.go
Translated using pointer to &amp;amp;{6 7}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now that we have the capability to create types with associated methods, let&amp;#8217;s look at how we can compose new composite types from existing ones.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_type_composition_with_structs&#34;&gt;Type composition with structs&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s imagine that we&amp;#8217;d like to extend the concept of &lt;code&gt;Point&lt;/code&gt; and add the notion of color.
If we were working in Java, we might do the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pcolor&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class ColorPoint extends Point {
  private Color color;

  // rest omitted...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Since Go doesn&amp;#8217;t have the concept of classes or inheritance, we need to work with structs to accomplish our goal.
We can compose a type called &lt;code&gt;ColorPoint&lt;/code&gt; by &lt;em&gt;embedding&lt;/em&gt; the &lt;code&gt;Point&lt;/code&gt; type and then adding the additional field representing color (&lt;a href=&#34;#pembed&#34;&gt;Embedding &lt;code&gt;Point&lt;/code&gt; into &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pembed&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Embedding &lt;code&gt;Point&lt;/code&gt; into &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;const (
	BLUE  = iota
	RED   = iota
	GREEN = iota
)

type ColorPoint struct {
	Point Point
	Color int
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First note the use of the &lt;code&gt;const&lt;/code&gt; keyword.
We&amp;#8217;re defining a set of integer constants to represent our colors.
This is the closest approximation that Go has to an enumerated type (such as Java&amp;#8217;s &lt;code&gt;enum&lt;/code&gt;) and is usually more that sufficient.
The predeclared identifier &lt;code&gt;iota&lt;/code&gt; represents successive untyped integer constants.
It is reset to &lt;code&gt;0&lt;/code&gt; whenever &lt;code&gt;const&lt;/code&gt; appears again in the source.
This has the effect in our code of setting &lt;code&gt;BLUE&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;RED&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;GREEN&lt;/code&gt; to &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Next we define our &lt;code&gt;ColorPoint&lt;/code&gt; type as a &lt;code&gt;struct&lt;/code&gt;.
We embed &lt;code&gt;Point&lt;/code&gt; as an exported field also called &lt;code&gt;Point&lt;/code&gt;, and we define an additional exported field called &lt;code&gt;Color&lt;/code&gt; that is typed as an &lt;code&gt;int&lt;/code&gt;.
Now, in &lt;a href=&#34;#color-in&#34;&gt;Creating and printing a &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/a&gt;, we&amp;#8217;ll create an instance of &lt;code&gt;ColorPoint&lt;/code&gt;, and then we&amp;#8217;ll print out both the previously defined &lt;code&gt;Point&lt;/code&gt; instance as well as the &lt;code&gt;ColorPoint&lt;/code&gt; instance (results in &lt;a href=&#34;#color-out&#34;&gt;Output of creating and printing a &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color-in&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Creating and printing a &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	r := point.ColorPoint{Point: point.Point{X: 1, Y: 4}, Color: point.BLUE}

	fmt.Printf(&#34;Point: %v\n&#34;, p)
	fmt.Printf(&#34;Color Point: %v\n&#34;, r)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;color-out&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Output of creating and printing a &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ go run point.go
Point: {1 2}
Color Point: {{1 4} 0}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;ve now successfully created a composite type, but we&amp;#8217;re missing something. Let&amp;#8217;s press on.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_houston_we_have_a_problem&#34;&gt;Houston, we have a problem&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Here&amp;#8217;s a summary of our problem:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We have &lt;code&gt;Point&lt;/code&gt;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have &lt;code&gt;ColorPoint&lt;/code&gt;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ColorPoint&lt;/code&gt;s are like &lt;code&gt;Point&lt;/code&gt;s, but they are definitely not &lt;code&gt;Point&lt;/code&gt;s since Go does not have inheritance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;That said, we&amp;#8217;d like to be able to write methods that can interoperate between them. What do we do?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As an example, since both &lt;code&gt;Point&lt;/code&gt; and &lt;code&gt;ColorPoint&lt;/code&gt; have &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; coordinates, it might be interesting if we could compute the Euclidean distance &lt;a href=&#34;#EUC&#34;&gt;[EUC]&lt;/a&gt; between them.
As a reminder, the formula can be found in &lt;a href=&#34;#e-formula&#34;&gt;Euclidean distance formula&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;e-formula&#34; class=&#34;imageblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;img src=&#34;https://www.mattstine.com/images/distance_formula.png&#34; alt=&#34;distance formula&#34;&gt;
&lt;/div&gt;
&lt;div class=&#34;title&#34;&gt;Figure 1. Euclidean distance formula&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As expressed here, you can think of &lt;em&gt;p&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; and &lt;em&gt;q&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; as the &lt;em&gt;x&lt;/em&gt; coordinates for the two points, and &lt;em&gt;p&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; and &lt;em&gt;q&lt;sub&gt;2&lt;/sub&gt;&lt;/em&gt; as the &lt;em&gt;y&lt;/em&gt; coordinates for the two points.
So how do we implement a method that will allow us to compute this formula in such a way that will work with &lt;code&gt;Point&lt;/code&gt;s, &lt;code&gt;ColorPoint&lt;/code&gt;s, or both?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_go_interfaces&#34;&gt;Go Interfaces&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Fortunately Go contributes a very powerful version of &lt;em&gt;interfaces&lt;/em&gt; to the abstraction conversation.
Go interfaces describe groups of behaviors in the form of method signatures that implementors of the interface must implement.
So far this doesn&amp;#8217;t sound unlike Java interfaces. Let&amp;#8217;s take a look at two Go interfaces in &lt;a href=&#34;#interfaces&#34;&gt;&lt;code&gt;Positioner&lt;/code&gt; and &lt;code&gt;Distancer&lt;/code&gt; interfaces&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;interfaces&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;&lt;code&gt;Positioner&lt;/code&gt; and &lt;code&gt;Distancer&lt;/code&gt; interfaces&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;type Positioner interface {
	Coordinates() Point
}

type Distancer interface {
	DistanceTo(p Positioner) float64
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Notice that &lt;code&gt;interface&lt;/code&gt;s are themselves types. This is important, because it allows us to define function and method signatures that accept interfaces as arguments. &lt;code&gt;Positioner&lt;/code&gt;&#39;s &lt;code&gt;Coordinates()&lt;/code&gt; method should provide us the position of any implementor in terms of a &lt;code&gt;Point&lt;/code&gt;. &lt;code&gt;Distancer&lt;/code&gt;&#39;s &lt;code&gt;DistanceTo()&lt;/code&gt; method will calculate the distance between any implementor and a &lt;code&gt;Positioner&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
It is idiomatic in Go for interface names to be suffixed with &amp;#8220;-er.&amp;#8221;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;However, unlike Java interfaces, where we might write:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class Point implements Positioner, Distancer {
  // implementation omitted...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Go does not have an &lt;code&gt;implements&lt;/code&gt; keyword.
In fact, if you think about the way we&amp;#8217;ve defined structs and methods so far, the only place in which we indicated any attachment between a struct and a method is in the method signature itself, in the form of the receiver parameter.
So how does this work in Go?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s talk about how interfaces are &lt;em&gt;satsified&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In languages like Java, an interfaces is satisfied &lt;em&gt;explicitly&lt;/em&gt;.
Classes are tagged with &lt;code&gt;implements Interface&lt;/code&gt;.
The compiler then looks up that interface and identifies all of the method signatures defined by it.
It then examines the class to ensure that all of those method signatures have a concrete implementation in either the class itself or one of its parents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In Go, interfaces are satisfied &lt;em&gt;implicitly&lt;/em&gt;.
We do not tag structs in any way.
For a type to implement an interface, it simply needs to implement all of the method signatures defined by that interface.
When we use a type in the context of an interface (e.g. we pass a type into a function that expects an interface as one of its arguments), the compiler will check to see if that type satisfies the interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s see how this falls out in practice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First, let&amp;#8217;s define a function that can calculate the distance between two &lt;code&gt;Positioner&lt;/code&gt;s (&lt;a href=&#34;#distance-between&#34;&gt;Calculates the distance between two &lt;code&gt;Positioner&lt;/code&gt;s&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;distance-between&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Calculates the distance between two &lt;code&gt;Positioner&lt;/code&gt;s&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;func distanceBetween(a Positioner, b Positioner) float64 {
	p := a.Coordinates()
	q := b.Coordinates()
	sqOfXDist := math.Pow(p.X-q.X, 2)
	sqOfYDist := math.Pow(p.Y-q.Y, 2)
	return math.Sqrt(sqOfXDist + sqOfYDist)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Next, in &lt;a href=&#34;#point-satisfies-int&#34;&gt;&lt;code&gt;Point&lt;/code&gt; satisfies &lt;code&gt;Positioner&lt;/code&gt; and &lt;code&gt;Distancer&lt;/code&gt;&lt;/a&gt;, we satisfy both interfaces for &lt;code&gt;Point&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;point-satisfies-int&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;&lt;code&gt;Point&lt;/code&gt; satisfies &lt;code&gt;Positioner&lt;/code&gt; and &lt;code&gt;Distancer&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;func (p Point) Coordinates() Point {
	return p
}

func (p Point) DistanceTo(pos Positioner) float64 {
	return distanceBetween(p, pos)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In &lt;a href=&#34;#cp-satisfies-int&#34;&gt;&lt;code&gt;ColorPoint&lt;/code&gt; satisfies &lt;code&gt;Positioner&lt;/code&gt; and &lt;code&gt;Distancer&lt;/code&gt;&lt;/a&gt;, we satisfy both interfaces for &lt;code&gt;ColorPoint&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cp-satisfies-int&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;&lt;code&gt;ColorPoint&lt;/code&gt; satisfies &lt;code&gt;Positioner&lt;/code&gt; and &lt;code&gt;Distancer&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;func (cp ColorPoint) Coordinates() Point {
	return cp.Point
}

func (cp ColorPoint) DistanceTo(pos Positioner) float64 {
	return distanceBetween(cp, pos)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This all results in our ability to interchange &lt;code&gt;Point&lt;/code&gt;s and &lt;code&gt;ColorPoint&lt;/code&gt;s in calls to &lt;code&gt;DistanceTo()&lt;/code&gt; (&lt;a href=&#34;#calculating-distance-in&#34;&gt;Calculating the distance between &lt;code&gt;Point&lt;/code&gt; and &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/a&gt;). The output of these calls is found in &lt;a href=&#34;#calculating-distance-out&#34;&gt;Output of calculating the distance between &lt;code&gt;Point&lt;/code&gt; and &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-distance-in&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Calculating the distance between &lt;code&gt;Point&lt;/code&gt; and &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	fmt.Printf(&#34;Dist b/w p and q = %v\n&#34;, p.DistanceTo(r))
	fmt.Printf(&#34;Dist b/w q and p = %v\n&#34;, r.DistanceTo(p))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;calculating-distance-out&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Output of calculating the distance between &lt;code&gt;Point&lt;/code&gt; and &lt;code&gt;ColorPoint&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ go run point.go
Dist b/w p and q = 2
Dist b/w q and p = 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At first glance this may not seem so impressive, nor may it seem to be that great of an advantage over what&amp;#8217;s available to us in Java.
The power, however, is hiding just under the surface.
When we think about implementing an interface in Java, we usually are thinking in terms of taxonomy.
Classes extend other classes, and as we&amp;#8217;ve previously stated, that means that a child class ought to be substitutable for its parent &lt;a href=&#34;#LSP&#34;&gt;[LSP]&lt;/a&gt;.
When we implement an interface in Java, we are also usually thinking that the class &lt;em&gt;is a&lt;/em&gt; version of that interface.
We might have expressed our Cartesian coordinate taxonomy in Java as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public interface Coordinate {
  double distanceTo(Coordinate c);
}

public class Point implements Coordinate {
  // implementation omitted
}

public class ColorPoint extends Point implements Coordinate {
  // implementation omitted
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When we do this, we soon hear ourselves talking about &lt;code&gt;Coordinate&lt;/code&gt;s as things, not as groups of behaviors.
Let&amp;#8217;s contrast this with Go&amp;#8217;s implicit satisfaction by adding an additional example.
Perhaps our program&amp;#8217;s purpose is to keep track of animals in a wildlife preserve.
It&amp;#8217;s quite natural that we&amp;#8217;d have an &lt;code&gt;Animal&lt;/code&gt; type, and that type would have some way of keeping track of the animal&amp;#8217;s current location (&lt;a href=&#34;#animal-struct&#34;&gt;&lt;code&gt;Animal&lt;/code&gt; struct&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;animal-struct&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;&lt;code&gt;Animal&lt;/code&gt; struct&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;type Animal struct {
	Name string
	X, Y float64
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In order to perform our desired distance calculations, we need &lt;code&gt;Animal&lt;/code&gt; to satisfy our two interfaces (&lt;a href=&#34;#animal-dp&#34;&gt;&lt;code&gt;Animal&lt;/code&gt; satisfies &lt;code&gt;Positioner&lt;/code&gt; and &lt;code&gt;Distancer&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;animal-dp&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;&lt;code&gt;Animal&lt;/code&gt; satisfies &lt;code&gt;Positioner&lt;/code&gt; and &lt;code&gt;Distancer&lt;/code&gt;&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;func (a Animal) Coordinates() point.Point {
	return point.Point{X: a.X, Y: a.Y}
}

func (a Animal) DistanceTo(pos point.Positioner) float64 {
	thing := pos.Coordinates()
	sqOfXDist := math.Pow(a.X-thing.X, 2)
	sqOfYDist := math.Pow(a.Y-thing.Y, 2)
	return math.Sqrt(sqOfXDist + sqOfYDist)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;admonitionblock note&#34;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&#34;icon&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&#34;content&#34;&gt;
Because &lt;code&gt;distanceBetween()&lt;/code&gt; was not exported from the &lt;code&gt;point&lt;/code&gt; package, we cannot use it in the &lt;code&gt;animal&lt;/code&gt; package. Sometimes you&amp;#8217;ll run into this situation in Go, which prefers &amp;#8220;dependency hygiene&amp;#8221; over reuse.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;And now, we can perform our desired calculations (&lt;a href=&#34;#animal-in&#34;&gt;Mixing &lt;code&gt;Animal&lt;/code&gt;s and &lt;code&gt;Point&lt;/code&gt;s using interfaces&lt;/a&gt;).
We now know the distance between our penguin and our original point &lt;code&gt;p&lt;/code&gt;, and we also know that given the proximity of the seal (&lt;a href=&#34;#animal-out&#34;&gt;Output of mixing &lt;code&gt;Animal&lt;/code&gt;s and &lt;code&gt;Point&lt;/code&gt;s using interfaces&lt;/a&gt;), our penguin needs to start running!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;animal-in&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Mixing &lt;code&gt;Animal&lt;/code&gt;s and &lt;code&gt;Point&lt;/code&gt;s using interfaces&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	penguin := animal.Animal{Name: &#34;penguin&#34;, X: 1, Y: 1}
	seal := animal.Animal{Name: &#34;seal&#34;, X: 1, Y: 4}

	fmt.Printf(&#34;Dist b/w penguin and seal = %v\n&#34;, penguin.DistanceTo(seal))
	fmt.Printf(&#34;Dist b/w penguin and point = %v\n&#34;, penguin.DistanceTo(p))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;animal-out&#34; class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;title&#34;&gt;Output of mixing &lt;code&gt;Animal&lt;/code&gt;s and &lt;code&gt;Point&lt;/code&gt;s using interfaces&lt;/div&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ go run point.go
Dist b/w penguin and seal = 3
Dist b/w penguin and point = 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now for the test.
Is it proper to think of an &lt;code&gt;Animal&lt;/code&gt; as being a &lt;code&gt;Distancer&lt;/code&gt; or &lt;code&gt;Positioner&lt;/code&gt; in terms of taxonomy?
Not really.
In fact, that seems like a coupling of concerns.
And if we were implementing this program in Java, a naive translation would probably cause us to do the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class Animal implements Positioner, Distancer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So to summarize, Go interfaces allow us to use arbitrary types in contexts expecting a particular interface type, as long as the type in question implements all of the methods defined by that interface.
Since interfaces are satisfied implicitly, we&amp;#8217;re no longer pressured toward treating interfaces as part of a type taxonomy.
Instead, we&amp;#8217;re able to focus on them as groups of related behaviors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This may seem like a concept popularized by dynamic languages called &amp;#8220;duck typing&amp;#8221; &lt;a href=&#34;#DT&#34;&gt;[DT]&lt;/a&gt;.
In most cases, you call a method &lt;em&gt;blindly&lt;/em&gt;, and allow the runtime dispatch system to determine if the object can &lt;em&gt;respond to&lt;/em&gt; that method.
While this is a similar concept, it is not a very good description of how Go works.
Go actually employs &amp;#8220;structural typing&amp;#8221; &lt;a href=&#34;#ST&#34;&gt;[ST]&lt;/a&gt;, which uses the compiler to determine interface satisfaction in a type safe manner.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I hope you&amp;#8217;ve enjoyed this brief introduction to the Go programming language, as well as one of its most powerful features: interfaces.
With interfaces we&amp;#8217;re able to take a more pragmatic approach to component design, as we&amp;#8217;re not forced to think in terms of taxonomies and deep type hierarchies.
In the next installment we&amp;#8217;ll explore Go&amp;#8217;s approach to concurrency.
Until next time my fellow gophers!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;EJ&#34;&gt;&lt;/a&gt;[EJ] Bloch, Joshua. &lt;em&gt;Effective Java: Programming Language Guide&lt;/em&gt;. Addison-Wesley, 2001.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;EUC&#34;&gt;&lt;/a&gt;[EUC] Euclidean distance, Wikipedia. &lt;a href=&#34;http://en.wikipedia.org/wiki/Euclidean_distance&#34; class=&#34;bare&#34;&gt;http://en.wikipedia.org/wiki/Euclidean_distance&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;DT&#34;&gt;&lt;/a&gt;[DT] Duck typing, Wikipedia. &lt;a href=&#34;http://en.wikipedia.org/wiki/Duck_typing&#34; class=&#34;bare&#34;&gt;http://en.wikipedia.org/wiki/Duck_typing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;LSP&#34;&gt;&lt;/a&gt;[LSP] Liskov substitution principle, Wikipedia. &lt;a href=&#34;http://en.wikipedia.org/wiki/Liskov_substitution_principle&#34; class=&#34;bare&#34;&gt;http://en.wikipedia.org/wiki/Liskov_substitution_principle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;PBP&#34;&gt;&lt;/a&gt;[PBP] Prototype-based programing, Wikipedia. &lt;a href=&#34;http://en.wikipedia.org/wiki/Prototype-based_programming&#34; class=&#34;bare&#34;&gt;http://en.wikipedia.org/wiki/Prototype-based_programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;ST&#34;&gt;&lt;/a&gt;[ST] Structural type system, Wikipedia. &lt;a href=&#34;http://en.wikipedia.org/wiki/Structural_type_system&#34; class=&#34;bare&#34;&gt;http://en.wikipedia.org/wiki/Structural_type_system&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>wip microservices reading list</title>
      <link>https://www.mattstine.com/2014/07/02/wip-microservices-reading-list/</link>
      <pubDate>Wed, 02 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2014/07/02/wip-microservices-reading-list/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;ve started curating a &lt;a href=&#34;https://www.mattstine.com/microservices&#34;&gt;Microservices Reading List&lt;/a&gt;. It&amp;#8217;s still work in progress, but there&amp;#8217;s some good stuff there. Watch for more!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>microservices are solid</title>
      <link>https://www.mattstine.com/2014/06/30/microservices-are-solid/</link>
      <pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2014/06/30/microservices-are-solid/</guid>
      <description>&lt;div class=&#34;quoteblock abstract&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;Microservices&lt;/a&gt; are often described as small, loosely coupled applications that follow the UNIX philosophy of &amp;#8220;doing one thing well.&amp;#8221; They have also &lt;a href=&#34;http://www.infoq.com/articles/microservices-intro&#34;&gt;been related&lt;/a&gt; to the &lt;a href=&#34;http://en.wikipedia.org/wiki/Single_responsibility_principle&#34;&gt;Single Responsibility Principle&lt;/a&gt;, the first of the five principles making up &lt;a href=&#34;http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&#34;&gt;SOLID&lt;/a&gt;. A microservices-based architecture is typically constructed around a set of common patterns. This set of patterns is actually consistent with all of the SOLID principles when thought of at the architectural rather than the class/module level. In this article, we&amp;#8217;ll gain an understanding of each of the SOLID principles and how they relate to microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_a_solid_architecture&#34;&gt;A SOLID Architecture?&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have spent a significant portion of the last three years speaking and writing about the SOLID principles of object-oriented design.
I spent the first year teaching SOLID much as expressed by Robert C. &amp;#8220;Uncle Bob&amp;#8221; Martin in his foundational book, &lt;em&gt;&lt;a href=&#34;http://www.amazon.com/Software-Development-Principles-Patterns-Practices/dp/0135974445&#34;&gt;Agile Software Development: Principles, Patterns, and Practices&lt;/a&gt;&lt;/em&gt;.
About the same time I was embarking on a reintroduction to and exploration of functional programming, spending a significant amount of time with &lt;a href=&#34;http://clojure.org&#34;&gt;Clojure&lt;/a&gt;.
Retraining my mind for functional thinking while simultaneously teaching the SOLID principles resulted in a perfect thought storm in my mind, resulting in the following question:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;quoteblock&#34;&gt;
&lt;blockquote&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Is there an overlap between functional programming and the SOLID principles?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The thought journey that followed led me to start giving the talk entitled &amp;#8220;Functional SOLID&amp;#8221; on August 25, 2012.
That same month I began publishing a &lt;a href=&#34;https://nofluffjuststuff.com/m/article/functional_solid_part_1&#34;&gt;four-part&lt;/a&gt; &lt;a href=&#34;https://nofluffjuststuff.com/m/article/functional_solid_part_2&#34;&gt;series&lt;/a&gt; &lt;a href=&#34;https://nofluffjuststuff.com/m/article/functional_solid_part_3&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;https://nofluffjuststuff.com/m/article/functional_solid_part_2&#34;&gt;articles&lt;/a&gt; by the same name.
In both of these presentations of my ideas, I related a couple of foundational memes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Functional programming, especially within the Clojure programming language, provides wonderful constructs for building programs consistent with the SOLID principles.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SOLID principles actually transcend all of programming, regardless of the particular programming paradigm (structured, object-oriented, functional) employed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It is this second meme that provides the impetus for this particular article.
At the conclusion of both presentations, I refer to Rich Hickey&amp;#8217;s seminal Strange Loop keynote, &lt;a href=&#34;http://www.infoq.com/presentations/Simple-Made-Easy&#34;&gt;&amp;#8220;Simple Made Easy&amp;#8221;&lt;/a&gt;.
In his presentation, Hickey decries our continual conflation of the ideas of simplicity and ease by tracing the origins of both words:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simple, from the Latin &lt;em&gt;simplex&lt;/em&gt;, meaning &amp;#8220;one fold or braid&amp;#8221; (opposed to &lt;em&gt;complex&lt;/em&gt;, meaning &amp;#8220;many folds or braids,&amp;#8221;) is an objective concept.
In software we can relate it to the degree of interleaving of concerns in software components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Easy, from the Latin &lt;em&gt;adjacens&lt;/em&gt;, means &amp;#8220;to lie near.&amp;#8221; While &amp;#8220;hard&amp;#8221; does not trace to a root meaning &amp;#8220;to lie far,&amp;#8221; we can still understand that &amp;#8220;easy&amp;#8221; is a relative concept.
What lies near, or is easy to me, is not necessarily easy or near to you.
In software we can relate it to the programming languages, paradigms, framweworks, technologies, etc. with which we are intimately familiar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This analysis led me to restate the SOLID principles in terms of another Rich Hickey word, &lt;em&gt;complectedness&lt;/em&gt;, or the degree to which software concerns are interleaved:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;dlist&#34;&gt;
&lt;dl&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Single Responsibility Principle&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Complecting responsibilities leads to rigid and/or fragile design.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Open-Closed Principle&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Complecting concretions of an abstraction in such a way that new concretions adversely affect existing, working concretions is problemmatic.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Liskov Substitution Principle&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Reuse via inheritance is dangerous.
It often complects entities not in a true “is-a” relationship, which leads to non-substitutability.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Interface Segregation Principle&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Don’t complect clients with uninteresting operations by complecting unrelated groups of operations in a single entity!&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&#34;hdlist1&#34;&gt;Dependency Inversion Principle&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;Transitive dependency leads to transitive complectedness!&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As you can see, we&amp;#8217;ve now stated the principles independently of any programming-paradigm specific language.
It is this restatement that cemented in my mind the idea that SOLID actually transcends all of software engineering&amp;#8201;&amp;#8212;&amp;#8201;software engineering principles that are &lt;em&gt;universally true&lt;/em&gt;, regardless of the context in which they are applied.
So, we can easily walk these principles up the abstraction ladder into the world of architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_microservices_introduced&#34;&gt;Microservices Introduced&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With businesses built around software now disrupting multiple industries that appeared to have stable leaders, the need has emerged for enterprises to create &amp;#8220;software factories&amp;#8221; built around the following principles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Streaming customer feedback directly into rapid, iterative cycles of application development;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Horizontally scaling applications to meet user demand;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compatibility with an enormous diversity of clients, with mobility (smartphones, tablets, etc.) taking the lead;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Continuous delivery of value, shrinking the cycle time from concept to cash.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Infrastructure has taken the lead in adapting to meet these needs with the move to the cloud, and Platform as a Service (PaaS) has raised the level of abstraction to a focus on an ecosystem of applications and services.
However, most applications are still developed as if we&amp;#8217;re living in the previous generation of both business and infrastructure: the monolithic application.
Microservices&amp;#8201;&amp;#8212;&amp;#8201;small, loosely coupled applications that follow the Unix philosophy of &#34;doing one thing well&#34;&amp;#8201;&amp;#8212;&amp;#8201;represent the application development side of enabling rapid, iterative development, horizontal scale, polyglot clients, and continuous delivery.
They also enable us to scale application development and eliminate long term commitments to a single technology stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I won&amp;#8217;t belabor the introduction to microservices anymore, as a wealth of reading is already available all over the web.
As a jumping off point, I invite the reader to dive into James Lewis&#39; and Martin Fowler&amp;#8217;s &lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;excellent coverage of the topic&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_solid_microservices&#34;&gt;SOLID Microservices&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s now get to the heart of the matter: how do the patterns associated with a microservices architecture overlap with the SOLID principles?
Let&amp;#8217;s walk through each, briefly relating them in their natural context, and then swinging them into our microservices discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_single_responsibility_principle&#34;&gt;Single Responsibility Principle&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Single Responsibility Principle (SRP) is stated by Martin as &amp;#8220;each software module should have one and only one reason to change&amp;#8221; &lt;a href=&#34;#SRP&#34;&gt;[SRP]&lt;/a&gt;.
Of all of the SOLID principles, the SRP is the one I&amp;#8217;ve &lt;a href=&#34;http://byterot.blogspot.com/2014/04/reactive-cloud-actors-no-nonsense-microservice-beehive-restful-evolvable-web-events-orleans-framework.html&#34;&gt;most&lt;/a&gt; &lt;a href=&#34;http://www.slideshare.net/joshlong/microservices-with-spring-boot&#34;&gt;often&lt;/a&gt; &lt;a href=&#34;http://www.tigerteam.dk/2014/microservices-its-not-only-the-size-that-matters-its-also-how-you-use-them-part-4/&#34;&gt;seen&lt;/a&gt; cited in the context of microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One common thread between how Martin relates SOLID and microservices is &lt;em&gt;change&lt;/em&gt;.
Change in software is inevitable and constant. Requirements are realized as responsibilities doled out to various software modules.
Requirements change leads to changes in responsibilities.
If we couple responsibilities in a single module, then change to one responsibility can affect another unrelated responsibility simply due to its location.
In other words, change one thing, sometimes another unrelated thing breaks.
Risk goes up; change velocity goes down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A monolithic architecture, no matter how modular on the inside, couples responsibilities together.
Change cycles are coupled, increasing the risk associated with frequent deployments.
Effective continuous delivery is far more difficult, as the release management process reimposes the waterfall process on the agile development team.
If we instead separate architectural responsibilities into different microservices, we can decouple those change cycles, thus decreasing the risks associated with frequent deployments. Continuous delivery becomes more easily attainable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The most common technique I&amp;#8217;ve seen applied to decomposing a monolith into microservices is the &lt;a href=&#34;http://martinfowler.com/bliki/BoundedContext.html&#34;&gt;bounded context&lt;/a&gt; from &lt;a href=&#34;http://en.wikipedia.org/wiki/Domain-driven_design&#34;&gt;Domain-Driven Design&lt;/a&gt;.
We identify discrete business capabilities, each of which owns and governs its own discrete segment of the overall data model for an organization.
A microservice implements each business capability, encapsulating its data segment behind an often RESTful API.
Overlaps between the capabilities (e.g. a shipping service and ordering service will both likely have the notion of customer, likely governed by a customer service) are realized by mappings in higher-order microservices or by utilizing hypermedia.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_open_closed_principle&#34;&gt;Open-Closed Principle&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Open-Closed Principle (OCP), first coined by Bertrand Meyer &lt;a href=&#34;#OOSC&#34;&gt;[OOSC]&lt;/a&gt;, states that &amp;#8220;software entities should be open for extension, but closed for modification.&amp;#8221;
Again we relate this principle to change.
We should be able to change what a module does as software requirements change, but we should be able to do so without modifying any existing, working code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At face value this looks impossible.
How can we change the behavior of a module without changing its code?
The key is in how we define the facade of the module, thinking at the appropriate level of abstraction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Let&amp;#8217;s draw an example from Java&amp;#8217;s standard library.
What if my client code is provided an instance of &lt;code&gt;java.util.HashMap&lt;/code&gt;, and I instead want sorted keys?
I would need to not only provide an instance of &lt;code&gt;java.util.TreeMap&lt;/code&gt; to my client, but I would also need to change all of the existing references.
If I instead refer to the map abstraction as &lt;code&gt;java.util.Map&lt;/code&gt; (a Java interface), then I can provide my client with the new &lt;code&gt;Map&lt;/code&gt; type without changing any code.
By utilizing the appropriate module facade, we can decouple an abstraction from the its larger set of derivative behaviors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What is our microservice facade?
The API of course! As long as a given microservice continues to fulfill the contract expressed by its API, it should be possible to swap in new behaviors without changing any existing client code.
This becomes supremely important when we consider the term of our commitment to a particular technology stack. Monolithic architectures are not closed to this particular type of modification, and the risk of incorporating new technology into an existing monolith can be very high.
Microservices drastically reduce the risk associated with experimenting, even in production, with new technology stacks, and increase our ability to use the right tool for the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another important technique enabled by the open-closed nature of microservices is &lt;a href=&#34;http://martinfowler.com/bliki/PolyglotPersistence.html&#34;&gt;polyglot persistence&lt;/a&gt;.
By encapsulating the data store technology used for a particular business capability behind its facade (e.g. a recommendations service is very amenable to graph databases), we can hide the presence of that data store behind a microservice API.
This enables us to both experiment with and utilize various data stores in advantageous contexts without polluting the overall service ecosystem with the semantics of each store.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_liskov_substitution_principle&#34;&gt;Liskov Substitution Principle&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Liskov Substitution Principle (LSP) was born the same year as Meyer&amp;#8217;s OCP, written down by Barbara Liskov.
The LSP is concerned with types and subtypes, focused on the idea that &amp;#8220;subtypes must be substitutable for their base types.&amp;#8221;
In object-oriented terms, drawing again from the Java language, if a class &lt;code&gt;extends&lt;/code&gt; from a parent class or &lt;code&gt;implements&lt;/code&gt; a parent interface, we should be able to use that class in the context of any code expecting an instance of the parent.
If at any time that code context exhibits aberrant behavior, we have violated the LSP with our class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Extending the idea of object-oriented inheritance to logical architecture is a bit of a stretch, but let&amp;#8217;s give it a try.
We&amp;#8217;ll start by again considering the microservice&amp;#8217;s facade, or its API.
From the client&amp;#8217;s perspective, the API represents the &amp;#8220;base type&amp;#8221; for our microservice.
So long as any microservice we swap in properly fulfills this API, we can say it&amp;#8217;s consistent with the LSP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It&amp;#8217;s unlikely that we&amp;#8217;ll often substitute different implementations of the same API at runtime, and it&amp;#8217;s unclear to me what a child microservice might look like.
However, consider the case of services that implement the same API, but that must implement different business rules or policies given the legal jurisdiction governing the data.
Further, consider that regulatory compliance dicates that those services actually are deployed and run in the same geographic location governed by that legal jurisdiction.
We could implement each instance of this API as a separate microservice and deploy each of them in the appropriate geography.
From the client&amp;#8217;s perspective, the substitution would be transparent (thus abiding by the LSP), and the &amp;#8220;polymorphic&amp;#8221; substitution could be performed by another higher-order microservice or global site-selection mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_interface_segregation_principle&#34;&gt;Interface Segregation Principle&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Interface Segregation Principle (ISP) is stated in Martin&amp;#8217;s book as &amp;#8220;clients should not be forced to depend on methods they do not use.&amp;#8221;
Martin introduces the concept of so-called &amp;#8220;fat interfaces,&amp;#8221; or interfaces whose method set is not cohesive.
One can divide their method sets into multiple groups, each group serving a different set of interested clients.
The primary reason for seeking to separate these groups into different modules is to prevent change driven by one set of clients from affecting other distinct groups of clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;API&amp;#8217;s implemented via monolithic architectures cannot abide by the ISP.
Adding or improving capabilities to serve one group of clients must involve minimally a redeployment of all of the capabilities affecting all clients.
More likely, a lengthy regression test phase will also be required, as we must ensure that these additional or improved capabilities have not damaged the system&amp;#8217;s other capabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Microservices, when designed well around bounded contexts, also abide by the ISP, as we enforce a hard boundary between interfaces by separating them into discrete, independently deployable units.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_dependency_inversion_principle&#34;&gt;Dependency Inversion Principle&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Dependency Inversion Principle (DIP) tells us that &amp;#8220;abstractions should not depend upon details. Details should depend upon abstractions.&amp;#8221;
Stated another way, &amp;#8220;high-level modules should not depend on low-level modules.&amp;#8221;
Our abstractions, or higher-level modules, are what codify the important business knowledge inherent in a body of software, whereas our details, or lower-level modules, represent the mechanical recipes for carrying them out.
One of the promises of the other principles is the ability to &amp;#8220;swap out&amp;#8221; the details beneath the abstractions when it becomes advantageous.
However, when our higher-level modules have direct dependency on our lower-level modules, swapping out details often causes the abstraction itself to have to change.
&amp;#8220;Absurd&amp;#8221; is Uncle Bob&amp;#8217;s description of this situation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The DIP typically deals with this scenario by defining &lt;em&gt;service interfaces&lt;/em&gt; for each module.
If a module requires services that are not relevant to its bounded context, rather than implementing them itself or directly delegating to a dependency, it instead declares a &lt;em&gt;signature&lt;/em&gt; for that service within its service interface.
This interface then becomes a secondary abstraction expressing all of the collaboration a module intends to do.
Possible collaborators then cooperate with the module by implementing its service interface.
In this way, they become &lt;em&gt;dependent&lt;/em&gt; on the module, rather than the module becoming dependent on the collaborator!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In a microservices architecture, the DIP finds its realization in the &lt;em&gt;API Gateway&lt;/em&gt; pattern.
An API Gateway acts as a single point of entry into a microservices architecture for a given client.
It plays a multi-faceted role in serving the diverse clients (i.e. disparate mobile device platforms) of the architecture by:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reducing the chattiness of the network by reducing the number of services consulted;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;performing protocol translation (e.g. AMQP to HTTP) when a particular protocol is not well supported by the client;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aggregating service responses concurrently to reduce response latency;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;transforming service responses to service the needs of specific devices, screen sizes, and use cases.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The important thing to note is that the &amp;#8220;API&amp;#8221; defined by the API Gateway is owned by the client in much the same way as the &lt;em&gt;service interface&lt;/em&gt; is owned by a higher-level module. In this way, we invert the dependency between clients and the microservices themselves.
Consult &lt;a href=&#34;http://techblog.netflix.com/2013/01/optimizing-netflix-api.html&#34;&gt;&amp;#8220;Optimizing the Netflix API&amp;#8221;&lt;/a&gt; for a fantastic example of this architectural pattern.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Experience has taught me that ease is often cheap but illusory, but that simplicity is a pearl of great price.
Microservices &lt;a href=&#34;http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html&#34;&gt;are not easy&lt;/a&gt;, but they are simple.
One of the reasons for their simplicity is what I see as their strong compatibility with the SOLID principles, not only of object-oriented design, but of all of software engineering.
By resisting the temptation to interleave distinct business capabilities, we retain the ability to develop and deploy them in an agile manner.
I hope you&amp;#8217;ve found some value in this article, and I even hope you&amp;#8217;ve found some things with which you disagree.
Please sound off in the blogosphere, the Twitterverse, or wherever suits your fancy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_references&#34;&gt;References&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist bibliography&#34;&gt;
&lt;ul class=&#34;bibliography&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;OOSC&#34;&gt;&lt;/a&gt;[OOSC] Meyer, Bertrand (1988). &lt;em&gt;Object-Oriented Software Construction&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a id=&#34;SRP&#34;&gt;&lt;/a&gt;[SRP] Martin, Robert C. &amp;#8220;The Single Responsibility Principle.&amp;#8221; &lt;a href=&#34;http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&#34; class=&#34;bare&#34;&gt;http://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>bosh and cloud api compatibility</title>
      <link>https://www.mattstine.com/2013/08/02/bosh-and-cloud-api-compatibility/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2013/08/02/bosh-and-cloud-api-compatibility/</guid>
      <description>&lt;p&gt;The gauntlet has again been dropped in the world of cloud interoperability. The dueling factions include those asserting that competitors to Amazon&#39;s web services (principally OpenStack) must adopt AWS&#39;s API&#39;s in order to remain viable, and those that believe such &amp;ldquo;API cloning&amp;rdquo; will do nothing more than stunt innovation. If you were to ask me, I&#39;d say that we&#39;ve seen this play out before. Remember the &amp;ldquo;Clone Wars&amp;rdquo; that began in the late 1980&#39;s and that persisted for the better part of two decades? A huge cast of competitors battled for the title of &amp;ldquo;best PC that&#39;s not manufactured by IBM.&amp;rdquo; How did that play out? For a relatively short period of time, having the best PC &amp;ldquo;designed for Microsoft Windows,&amp;rdquo; along with the leanest supply chain (see Dell), paved a golden path to victory. And then Steve Jobs returns to Apple, and now better than 50% of the laptops running in the Starbucks in which I&#39;m writing this blog have a shiny white fruit on their lids. As it turns out, &amp;ldquo;going your own way&amp;rdquo; can work out awfully well.&lt;/p&gt;
&lt;p&gt;But that&#39;s not the angle I want to take in this discussion. Let&#39;s dig deeper into what the two sides have to say.&lt;/p&gt;
&lt;p&gt;The battle was first renewed with Cloud Scaling CTO Randy Bias&amp;rsquo; &lt;a href=&#34;http://www.cloudscaling.com/blog/cloud-computing/openstack-aws&#34;&gt;Open Letter to the OpenStack Community&lt;/a&gt;. Randy adopts the position that full-compatibility with the AWS API&#39;s is necessary for OpenStack&#39;s survival. The gist of his argument is that Amazon currently dominates public cloud, supporting this via a comparison between Amazon&#39;s and Rackspace&#39;s growth rates since 2009, and that they also &amp;ldquo;control the innovation curve&amp;rdquo; as they push &amp;ldquo;new features into production at a breathtaking pace.&amp;rdquo; Furthermore, he asserts that any hope for survival with respect to competing cloud platforms is limited to the hybrid cloud space, providing enterprises with the capability to seamlessly migrate workloads between the public cloud and private, on-premises clouds. Therefore, OpenStack must adopt API compatibility with AWS in order to become the enterprise choice for hybrid cloud.&lt;/p&gt;
&lt;p&gt;A few days later, Rackspace&#39;s &amp;ldquo;Startup Liaison Officer&amp;rdquo; Robert Scoble responded with his own &lt;a href=&#34;https://plus.google.com/+Scobleizer/posts/HQ7Wi4WCQse&#34;&gt;Open Letter&lt;/a&gt;. Scoble makes some interesting counterpoints, most notably the argument that customers don&#39;t adopt cloud platforms because of API compatibility with Amazon, but because of the promise of a &amp;ldquo;10x improvement&amp;rdquo; to their own business. In order to provide such improvements, cloud platform competitors must not shackle themselves to a &amp;ldquo;de facto standard&amp;rdquo; API, but rather must focus their limited resources on driving those 10x improvements in infrastructure capability.&lt;/p&gt;
&lt;p&gt;So by now you must be wondering, whose side am I on? I&#39;m on the side of innovation. But that doesn&#39;t necessarily put me in either camp. I think the end goals of both parties are things that we want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Freedom:&lt;/strong&gt; the ability to migrate workloads between cloud infrastructure providers without needing to significantly alter the behavior of the workload itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Innovation:&lt;/strong&gt; the ability to realize capabilities that don&#39;t exist today that will solve emerging problems (particularly those related to the explosion of generated and archived data).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spending development cycles on API compatibility will certainly slow anyone&#39;s ability to innovate. And what is API compatibility anyway? I believe that much of the concern rests on the large investment many enterprises have (or believe they will need to create) in bespoke automation written to a particular vendor&#39;s API. Having recently left a large-scale project that generated thousands of lines of such automation to drive consumption of a particular vendor&#39;s infrastucture platform, and that was in the near term planning to migrate to another platform, I can tell you that this concern is very real. But simply stating that &amp;ldquo;your existing code will work when you target our API&amp;rdquo; does not compatibility make. As Amazon continues to deploy new features at their breathtaking pace, how will OpenStack and other platforms keep up?&lt;/p&gt;
&lt;p&gt;For API compatibility to be &lt;em&gt;real&lt;/em&gt;, a &amp;ldquo;technology compatibility kit&amp;rdquo; (TCK) is needed. For those in the Java world, TCK&#39;s are near and dear. Java itself is not a particular implementation, but a standard API that invites competing implementations and innovation. But for any competing implementation to call itself &amp;ldquo;Java,&amp;rdquo; it must pass the tests contained within the TCK. An AWS TCK is really the only true way to ensure API compatibility. But I think it&#39;s hard to argue that Amazon has any real business interest in creating and sharing one.&lt;/p&gt;
&lt;p&gt;There is another way. Perhaps we should stop creating bespoke automation and rally around a common standard toolkit for managing large-scale cloud application deployments. This toolkit could provide mechanisms for configuration management, orchestration, health management, and rolling upgrades. It could further, as part of its architecture, build an adapter layer between its core components and the underlying infrastructure provider. Plugins could then be developed to provide the toolkit with the ability to manage all of the common infrastructure providers.&lt;/p&gt;
&lt;p&gt;Enter BOSH and it&#39;s Cloud Provider Interface (CPI) layer. BOSH was initially developed as the means of deploying and managing the Cloud Foundry PaaS platform, but it&#39;s much more generally applicable. BOSH can today deploy any distributed system, &lt;em&gt;unchanged&lt;/em&gt;, to any of several popular IaaS providers: VMware vSphere, VMware vCloud Director, Amazon Web Services, and OpenStack. Heresy you say! Not so. Just ask Colin Humphreys of CloudCredo, who recently &lt;a href=&#34;http://blog.cloudfoundry.com/2013/04/30/uk-charity-raises-record-donations-powered-by-cloud-foundry&#34;&gt;described their wildly successful deployment&lt;/a&gt; of Cloud Foundry to a hybrid composition of vSphere and AWS-based clouds. He recently presented a technical deep dive in Pivotal&#39;s offices in which he made the statement (paraphrasing) &amp;ldquo;I took the same Cloud Foundry bits that were running on AWS and deployed them unchanged to vSphere using BOSH.&amp;rdquo; As anyone can tell, this isn&#39;t just theory, it&#39;s production.&lt;/p&gt;
&lt;p&gt;So how then does BOSH make this happen? A trip &lt;a href=&#34;https://github.com/cloudfoundry/bosh/blob/master/bosh_cpi/lib/cloud.rb&#34;&gt;into the code&lt;/a&gt; for the BOSH CPI &amp;ldquo;interface&amp;rdquo; will show a list of core infrastructure capabilities that BOSH requires:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;current_vm_id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_stemcell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete_stemcell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_vm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete_vm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;has_vm?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reboot_vm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_vm_metadata&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configure_networks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attach_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;snapshot_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete_snapshot&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detach_disk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_disks&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All interactions between BOSH and the underlying infrastructure provider pass through these core methods. As long as a CPI exists that exposes these capabilities to BOSH, BOSH can deploy and manage the lifecycle of Cloud Foundry (or any other distributed system described by a BOSH release) on an infrastructure provider.&lt;/p&gt;
&lt;p&gt;So how hard is it to provide the CPI&#39;s for both AWS and OpenStack? If you choose simple metrics like number of classes (NOC) and lines of code (LOC), not that hard.&lt;/p&gt;
&lt;p&gt;You can find the CPI implementations at these links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudfoundry/bosh/tree/master/bosh_aws_cpi&#34;&gt;&lt;a href=&#34;https://github.com/cloudfoundry/bosh/tree/master/bosh_aws_cpi&#34;&gt;https://github.com/cloudfoundry/bosh/tree/master/bosh_aws_cpi&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudfoundry/bosh/tree/master/bosh_openstack_cpi&#34;&gt;&lt;a href=&#34;https://github.com/cloudfoundry/bosh/tree/master/bosh_openstack_cpi&#34;&gt;https://github.com/cloudfoundry/bosh/tree/master/bosh_openstack_cpi&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First we&#39;ll generate the metrics for AWS:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find ./bosh_aws_cpi/lib -name &amp;quot;*.rb&amp;quot; -exec wc -l {} \;
       2 ./bosh_aws_cpi/lib/bosh_aws_cpi.rb
      68 ./bosh_aws_cpi/lib/cloud/aws/aki_picker.rb
      39 ./bosh_aws_cpi/lib/cloud/aws/availability_zone_selector.rb
     651 ./bosh_aws_cpi/lib/cloud/aws/cloud.rb
      22 ./bosh_aws_cpi/lib/cloud/aws/dynamic_network.rb
      30 ./bosh_aws_cpi/lib/cloud/aws/helpers.rb
     171 ./bosh_aws_cpi/lib/cloud/aws/instance_manager.rb
      25 ./bosh_aws_cpi/lib/cloud/aws/manual_network.rb
      37 ./bosh_aws_cpi/lib/cloud/aws/network.rb
      89 ./bosh_aws_cpi/lib/cloud/aws/network_configurator.rb
     189 ./bosh_aws_cpi/lib/cloud/aws/resource_wait.rb
      68 ./bosh_aws_cpi/lib/cloud/aws/stemcell.rb
     114 ./bosh_aws_cpi/lib/cloud/aws/stemcell_creator.rb
      30 ./bosh_aws_cpi/lib/cloud/aws/tag_manager.rb
       7 ./bosh_aws_cpi/lib/cloud/aws/version.rb
      44 ./bosh_aws_cpi/lib/cloud/aws/vip_network.rb
      43 ./bosh_aws_cpi/lib/cloud/aws.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We&#39;ll also want the total LOC:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find ./bosh_aws_cpi/lib -name &amp;quot;*.rb&amp;quot; -exec wc -l {} \; | awk &#39;{ sum += $1 } END { print sum }&#39;
1629
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now let&#39;s do the same for OpenStack:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find ./bosh_openstack_cpi/lib -name &amp;quot;*.rb&amp;quot; -exec wc -l {} \;
       4 ./bosh_openstack_cpi/lib/bosh_openstack_cpi.rb
     867 ./bosh_openstack_cpi/lib/cloud/openstack/cloud.rb
      28 ./bosh_openstack_cpi/lib/cloud/openstack/dynamic_network.rb
     131 ./bosh_openstack_cpi/lib/cloud/openstack/helpers.rb
      34 ./bosh_openstack_cpi/lib/cloud/openstack/manual_network.rb
      37 ./bosh_openstack_cpi/lib/cloud/openstack/network.rb
     159 ./bosh_openstack_cpi/lib/cloud/openstack/network_configurator.rb
      16 ./bosh_openstack_cpi/lib/cloud/openstack/tag_manager.rb
       8 ./bosh_openstack_cpi/lib/cloud/openstack/version.rb
      50 ./bosh_openstack_cpi/lib/cloud/openstack/vip_network.rb
      39 ./bosh_openstack_cpi/lib/cloud/openstack.rb
$ find ./bosh_openstack_cpi/lib -name &amp;quot;*.rb&amp;quot; -exec wc -l {} \; | awk &#39;{ sum += $1 } END { print sum }&#39;
1373
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, summarizing:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CPI&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Number of Classes (NOC)&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Lines of Code (LOC)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Amazon AWS&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1629&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OpenStack&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1373&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;br/&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let&#39;s make a couple of points about these metrics. First of all, the two CPI&#39;s do not use a common foundation. The AWS CPI uses the &lt;a href=&#34;http://aws.amazon.com/sdkforruby&#34;&gt;AWS SDK for Ruby&lt;/a&gt; while the OpenStack CPI uses &lt;a href=&#34;http://fog.io&#34;&gt;Fog&lt;/a&gt;. Fog could also have been used as the foundation for the AWS CPI, but the CPI authors presumably thought it better to stick with the toolkit provided by Amazon. This is a minor point, however, as both of these toolkits essentially provide simple wrappers around the infrastructure providers&amp;rsquo; REST API&#39;s. It&#39;s doubtful that using a common API wrapper for both CPI&#39;s would have substantially changed the metrics presented here.&lt;/p&gt;
&lt;p&gt;Second, obviously NOC and LOC are rather naive metrics. It&#39;s incredibly possible to write terse code that is opaque, buggy, and hard to maintain or enhance. In fact, according to Code Climate, both of the top-level implementation classes for these CPI&#39;s have quite a lot of room for improvement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::AwsCloud::Cloud&#34;&gt;&lt;a href=&#34;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::AwsCloud::Cloud&#34;&gt;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::AwsCloud::Cloud&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::OpenStackCloud::Cloud&#34;&gt;&lt;a href=&#34;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::OpenStackCloud::Cloud&#34;&gt;https://codeclimate.com/github/cloudfoundry/bosh/Bosh::OpenStackCloud::Cloud&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With that said, it is rather amazing that one could encapuslate all of the infrastructure-specific implementation necessary to deploy and manage a distributed system as powerful as Cloud Foundry in &lt;em&gt;less than twenty classes and 1700 lines of code&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, to summarize where we&#39;ve been, while there&#39;s an impressive war of words out there regarding API compatibility with Amazon AWS, Cloud Foundry and BOSH don&#39;t necessarily need to take sides. If OpenStack chooses to embrace the AWS API&#39;s, the BOSH AWS CPI will be there waiting. However, if OpenStack chooses to follow in the footsteps of Apple and take the road less traveled, the OpenStack CPI is ready and waiting to evolve with it. Should Google Compute Engine or Microsoft&#39;s Azure gain a foodhold on the innovation curve, they are presumably a relatively simple CPI away from joining the BOSH ecosystem. So if you really want &amp;ldquo;cloud freedom,&amp;rdquo; BOSH is leading the charge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>blue green deployments on cloudfoundry</title>
      <link>https://www.mattstine.com/2013/07/10/blue-green-deployments-on-cloudfoundry/</link>
      <pubDate>Wed, 10 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2013/07/10/blue-green-deployments-on-cloudfoundry/</guid>
      <description>&lt;p&gt;One of the great things about Cloud Foundry is that it is a great enabler. Tall words. But what do they mean? Essentially, Cloud Foundry (and any other well-designed PaaS) enables us to do things as developers and operators that would be extremely difficult in a traditional deployment environments. One particularly valuable area of enablement is our new found ability to practice &lt;a href=&#34;http://continuousdelivery.com/&#34;&gt;Continous Delivery&lt;/a&gt;, meaning that we continuously prove our ability to deliver working software by continuously treating each code commit to a system as if it could be deployed to a production environment. We do this by shipping these commits through what&#39;s called a &amp;ldquo;deployment pipeline,&amp;rdquo; which consists of a series of build-test-deploy cycles that prove out a commit&#39;s suitability for production deployment. At the end of the pipeline we can either deploy automatically to our production environment (i.e. continuous deployment), or we can have a business decision to deploy that &amp;ldquo;deployable artifact&amp;rdquo; or not.&lt;/p&gt;
&lt;p&gt;One particular practice associated with Continuous Delivery is &lt;a href=&#34;http://martinfowler.com/bliki/BlueGreenDeployment.html&#34;&gt;Blue-Green Deployments&lt;/a&gt;. Martin Fowler describes these very well at the link provided, but I&#39;ll summarize briefly here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cut-over to a new software version is tricky, and must be quick in order to minimize downtime events.&lt;/li&gt;
&lt;li&gt;Blue-green deployments ensure the parallel existence of two, identical (as possible) production environments.&lt;/li&gt;
&lt;li&gt;At any given point, only one (e.g. blue) services production traffic.&lt;/li&gt;
&lt;li&gt;New deploys are made to the other (e.g. green) environment. Final smoke testing is performed here.&lt;/li&gt;
&lt;li&gt;When green is determined ready, we begin routing traffic to it.&lt;/li&gt;
&lt;li&gt;We then stop routing traffic to blue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, there are several concerns that must be dealt with at the application level in order for this to work (datastores should support concurrent usage by two app versions, long running requests may be killed, etc.). What we&#39;ll focus on in this post is how Cloud Foundry supports the mechanics summarized above.&lt;/p&gt;
&lt;p&gt;We&#39;ll begin with a basic Spring application named &lt;code&gt;ms-spr-demo&lt;/code&gt;. This app takes users to a simple web page announcing the ubiquitous &amp;ldquo;Hello World!&amp;rdquo; message. We&#39;ll utilize the &lt;code&gt;cf&lt;/code&gt; command-line interface to push the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cf push --path build/libs/cf-demo.war
Name&amp;gt; ms-spr-demo

Instances&amp;gt; 1

Memory Limit&amp;gt; 512M

Creating ms-spr-demo... OK

1: ms-spr-demo
2: none
Subdomain&amp;gt; ms-spr-demo

1: cfapps.io
2: mattstine.com
3: none
Domain&amp;gt; 1

Creating route ms-spr-demo.cfapps.io... OK
Binding ms-spr-demo.cfapps.io to ms-spr-demo... OK

Create services for application?&amp;gt; n

Save configuration?&amp;gt; y

Saving to manifest.yml... OK
Uploading ms-spr-demo... OK
Starting ms-spr-demo... OK
-----&amp;gt; Downloaded app package (9.5M)
Installing java.
Downloading JDK...
Copying openjdk-1.7.0_25.tar.gz from the buildpack cache ...
Unpacking JDK to .jdk
Downloading Tomcat: apache-tomcat-7.0.41.tar.gz
Copying apache-tomcat-7.0.41.tar.gz from the buildpack cache ...
Unpacking Tomcat to .tomcat
Copying mysql-connector-java-5.1.12.jar from the buildpack cache ...
Copying postgresql-9.0-801.jdbc4.jar from the buildpack cache ...
Copying auto-reconfiguration-0.6.8.jar from the buildpack cache ...
-----&amp;gt; Uploading droplet (48M)
-----&amp;gt; Uploaded droplet
Checking ms-spr-demo...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  1/1 instances: 1 running
OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The end result of this &lt;code&gt;cf push&lt;/code&gt; event is that an application is now serving requests at &lt;code&gt;http://ms-spr-demo.cfapps.io&lt;/code&gt;. The following graphic shows the state of our system, with the CF Router sending traffic to our application:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.mattstine.com/images/blue-green/BlueGreen1.png&#34; alt=&#34;BlueGreen1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next, we make a slight change to our application. Rather that saying &amp;ldquo;Hello World!&amp;rdquo; we decide to make it say &amp;ldquo;Goodbye World!&amp;rdquo; We build a new war file for the application. Rather than letting &lt;code&gt;cf&lt;/code&gt; prompt us this time, we&#39;ll make use of the &lt;code&gt;manifest.yml&lt;/code&gt; file that we saved from our previous push. However, we&#39;ll rename the application and provide a new route. Take a look:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+++
applications:
- name: ms-spr-demo-green
  memory: 512M
  instances: 1
  url: ms-spr-demo-green.cfapps.io
  path: build/libs/cf-demo.war
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, we&#39;re calling our new application version &lt;code&gt;ms-spr-demo-green&lt;/code&gt; and we&#39;re mapping it to the URL &lt;code&gt;ms-spr-demo-green.cfapps.io&lt;/code&gt;. Let&#39;s push the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Using manifest file manifest.yml

Creating ms-spr-demo-green... OK

1: ms-spr-demo-green
2: none
Subdomain&amp;gt; ms-spr-demo-green

1: cfapps.io
2: mattstine.com
3: none
Domain&amp;gt; 1

Creating route ms-spr-demo-green.cfapps.io... OK
Binding ms-spr-demo-green.cfapps.io to ms-spr-demo-green... OK
Uploading ms-spr-demo-green... OK
Starting ms-spr-demo-green... OK
-----&amp;gt; Downloaded app package (9.5M)
Installing java.
Downloading JDK...
Copying openjdk-1.7.0_25.tar.gz from the buildpack cache ...
Unpacking JDK to .jdk
Downloading Tomcat: apache-tomcat-7.0.41.tar.gz
Copying apache-tomcat-7.0.41.tar.gz from the buildpack cache ...
Unpacking Tomcat to .tomcat
Copying mysql-connector-java-5.1.12.jar from the buildpack cache ...
Copying postgresql-9.0-801.jdbc4.jar from the buildpack cache ...
Copying auto-reconfiguration-0.6.8.jar from the buildpack cache ...
-----&amp;gt; Uploading droplet (48M)
-----&amp;gt; Uploaded droplet
Checking ms-spr-demo-green...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  1/1 instances: 1 running
OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have two instances of the application running, each of them using distinct routes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.mattstine.com/images/blue-green/BlueGreen2.png&#34; alt=&#34;BlueGreen2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now it&#39;s time for the magic to happen. We&#39;ll map our original URL route (&lt;code&gt;ms-spr-demo.cfapps.io&lt;/code&gt;) to our &amp;ldquo;green&amp;rdquo; instance. This is accomplished very simply by using &lt;code&gt;cf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf map --app ms-spr-demo-green --host ms-spr-demo --domain cfapps.io
Binding ms-spr-demo.cfapps.io to ms-spr-demo-green... OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CF router immediately begins to load balance requests between each instance of the application, as shown here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.mattstine.com/images/blue-green/BlueGreen3.png&#34; alt=&#34;BlueGreen3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now our router will send requests to &lt;code&gt;ms-spr-demo.cfapps.io&lt;/code&gt; to both instances of the application, while &lt;code&gt;ms-spr-demo-green.cfapps.io&lt;/code&gt; only services the &amp;ldquo;green&amp;rdquo; instance. Once we determine that all is well, it&#39;s time to stop routing requests to the &amp;ldquo;blue&amp;rdquo; instance. This is just as simple using &lt;code&gt;cf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf unmap --url ms-spr-demo.cfapps.io --app ms-spr-demo
Unbinding ms-spr-demo.cfapps.io from ms-spr-demo... OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our &amp;ldquo;blue&amp;rdquo; instance is now no longer receiving any web traffic:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.mattstine.com/images/blue-green/BlueGreen4.png&#34; alt=&#34;BlueGreen4&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can now decomission our &amp;ldquo;blue&amp;rdquo; instance, or we can leave it around for a period of time in case we decide we need to roll back our changes. The important thing is that our customers suffered absolutely no downtime!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>clojure on cloud foundry</title>
      <link>https://www.mattstine.com/2013/05/29/clojure-on-cloud-foundry/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2013/05/29/clojure-on-cloud-foundry/</guid>
      <description>&lt;p&gt;I was inspired by Brian McClain&#39;s &lt;a href=&#34;http://catdevrandom.me/blog/2013/05/16/buildpacks-in-cloud-foundry-v2/&#34;&gt;post on bringing Haskell to Cloud Foundry&lt;/a&gt; using Cloud Foundry v2 buildpacks, so I decided to go on a buildpack journey of my own. Since Clojure is the language I most enjoying &amp;ldquo;toying around with,&amp;rdquo; I thought I&#39;d try to deploy a simple Clojure web application using the &lt;a href=&#34;https://github.com/mstine/heroku-buildpack-clojure&#34;&gt;Heroku Clojure Buildpack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To reiterate some of the coolness around buildpacks, they are what allows a PaaS like Cloud Foundry or Heroku to support various runtimes without first building that support into the core platform. If your favorite language or framework runtime isn&#39;t available, there&#39;s absolutely nothing stopping you from providing your own buildpack to support it. Stuff can get crazy &amp;ndash; McClain has even &lt;a href=&#34;https://twitter.com/BrianMMcClain/status/339479905974751232&#34;&gt;hinted at bringing FORTRAN support to Cloud Foundry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided for my experiment to build a VERY basic &amp;ldquo;Hello World&amp;rdquo; style application using &lt;a href=&#34;https://github.com/ring-clojure/ring&#34;&gt;Ring&lt;/a&gt;, which is &amp;ldquo;a Clojure web applications library inspired by Python&#39;s WSGI and Ruby&#39;s Rack.&amp;rdquo; The easiest way to get started building Ring applications is to utilize the popular Clojure build tool &lt;a href=&#34;http://github.com/technomancy/leiningen&#34;&gt;Leiningen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First I started by creating a new project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lein new hello-cf
$ cd hello-cf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next task was to add the Ring dependencies to my &lt;code&gt;project.clj&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(defproject hello-cf &amp;quot;0.1.0-SNAPSHOT&amp;quot;
  :min-lein-version &amp;quot;2.0.0&amp;quot;
  :description &amp;quot;Hello Clojure on Cloud Foundry!&amp;quot;
  :license {:name &amp;quot;Eclipse Public License&amp;quot;
            :url &amp;quot;http://www.eclipse.org/legal/epl-v10.html&amp;quot;}
  :dependencies [[org.clojure/clojure &amp;quot;1.4.0&amp;quot;]
                 [ring/ring-core &amp;quot;1.1.8&amp;quot;]
                 [ring/ring-jetty-adapter &amp;quot;1.1.8&amp;quot;]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then it was time to create the Ring application itself, by editing &lt;code&gt;src/hello_cf/core.clj&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns hello-cf.core
  (:use [ring.adapter.jetty :only [run-jetty]]))

(defn handler [request]
  {:status 200
   :headers {&amp;quot;Content-Type&amp;quot; &amp;quot;text/html&amp;quot;}
   :body &amp;quot;Hello Cloud Foundry from heroku-buildpack-clojure!&amp;quot;})

(defn -main [port]
  (run-jetty handler {:port (Integer. port)}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s break this down a bit. The &lt;code&gt;handler&lt;/code&gt; function will handle any HTTP request that hits our application, and will return an &amp;ldquo;OK&amp;rdquo; response containing a pleasant message indicating that we&#39;ve succeeded. That&#39;s really about it. Our application is complete. We can test it out by running the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lein trampoline run -m hello-cf.core 8080
2013-05-29 22:42:52.576:INFO:oejs.Server:jetty-7.6.1.v20120215
2013-05-29 22:42:52.804:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hitting &lt;code&gt;http://localhost:8080&lt;/code&gt; in the browser confirms that we&#39;re well on our way. Now it&#39;s time to trying pushing the application to Cloud Foundry. As Brian stated in his blog, one of the stellar aspects of Cloud Foundry buildpacks is that they are approximately the same as Heroku buildpacks. Practically, this means that one &lt;em&gt;should&lt;/em&gt; be able to utilize a Heroku buildpack on Cloud Foundry with minimal or no modifications. Let&#39;s put that theory to the test, shall we? Before we do, let&#39;s create a &lt;code&gt;Procfile&lt;/code&gt; quickly to let the buildpack know what we want to run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;web: lein with-profile production trampoline run -m hello-cf.core $PORT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And on with the push:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf push hello-cf --buildpack=git://github.com/heroku/heroku-buildpack-clojure.git
Using manifest file manifest.yml

Creating hello-cf... OK

1: hello-cf
2: none
Subdomain&amp;gt; hello-cf

1: mstine.cf-app.com
2: none
Domain&amp;gt; mstine.cf-app.com

Binding hello-cf.mstine.cf-app.com to hello-cf... OK
Uploading hello-cf... OK
Starting hello-cf... OK
-----&amp;gt; Downloaded app package (12K)
Initialized empty Git repository in /tmp/buildpacks/heroku-buildpack-clojure.git/.git/
Installing heroku-buildpack-clojure.git.
-----&amp;gt; Installing OpenJDK 1.6...done
-----&amp;gt; Installing Leiningen
       Downloading: leiningen-2.1.2-standalone.jar
       Writing: lein script
-----&amp;gt; Building with Leiningen
       Running: lein with-profile production compile :all
       Retrieving lein-standalone-repl/lein-standalone-repl/0.1.5/lein-standalone-repl-0.1.5.pom from clojars
       Retrieving lein-standalone-repl/lein-standalone-repl/0.1.5/lein-standalone-repl-0.1.5.jar from clojars
       Performing task &#39;compile&#39; with profile(s): &#39;production&#39;
       Retrieving org/clojure/clojure/1.4.0/clojure-1.4.0.pom from
       ...
       Compiling hello-cf.core
-----&amp;gt; Uploading staged droplet (66M)
-----&amp;gt; Uploaded droplet
Checking hello-cf...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 down
  0/1 instances: 1 starting
  0/1 instances: 1 flapping
Application failed to start.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Drat. Let&#39;s take a quick look at the logs to see what may be awry:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Reading logs/stderr.log... OK
/home/vcap/app/.lein/bin/lein: line 42: java: command not found
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ah-hah! Looks like the existing buildpack is making some assumptions about the structure of our application that no longer hold true on Cloud Foundry. So, I followed in Brian&#39;s footsteps and &lt;a href=&#34;https://github.com/mstine/heroku-buildpack-clojure&#34;&gt;forked away&lt;/a&gt;. One small &lt;a href=&#34;https://github.com/mstine/heroku-buildpack-clojure/commit/fd2c46cc23267fa2d808123d2fd58f4295da4b85&#34;&gt;commit&lt;/a&gt; looks like it ought to fix the problem. Let&#39;s give it another try:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cf push hello-cf --buildpack=git://github.com/mstine/heroku-buildpack-clojure.git
Using manifest file manifest.yml

Not applying manifest changes without --reset
See `cf diff` for more details.

Uploading hello-cf... OK
Changes:
  buildpack: &#39;git://github.com/heroku/heroku-buildpack-clojure.git&#39; -&amp;gt; &#39;git://github.com/mstine/heroku-buildpack-clojure.git&#39;
Updating hello-cf... OK
Stopping hello-cf... OK

Starting hello-cf... OK
-----&amp;gt; Downloaded app package (8.0K)
-----&amp;gt; Downloaded app buildpack cache (17M)
Initialized empty Git repository in /tmp/buildpacks/heroku-buildpack-clojure.git/.git/
Installing heroku-buildpack-clojure.git.
-----&amp;gt; Installing OpenJDK 1.6...done
-----&amp;gt; Using cached Leiningen 2.1.2
       Writing: lein script
-----&amp;gt; Building with Leiningen
       Running: lein with-profile production compile :all
       Performing task &#39;compile&#39; with profile(s): &#39;production&#39;
       Compiling hello-cf.core
-----&amp;gt; Uploading staged droplet (66M)
-----&amp;gt; Uploaded droplet
Checking hello-cf...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
Staging in progress...
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  0/1 instances: 1 starting
  1/1 instances: 1 running
OK
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;BOOM!&lt;/p&gt;
&lt;p&gt;I quickly pointed my browser, and as yesterday&#39;s tweet indicates, success:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34; data-partner=&#34;tweetdeck&#34;&gt;&lt;p&gt;Yeah...that just happened. cc: &lt;a href=&#34;https://twitter.com/cloudfoundry&#34;&gt;@cloudfoundry&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23clojure&amp;amp;src=hash&#34;&gt;#clojure&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23buildpacks&amp;amp;src=hash&#34;&gt;#buildpacks&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23winning&amp;amp;src=hash&#34;&gt;#winning&lt;/a&gt; &lt;a href=&#34;http://t.co/9lJHqmWQPw&#34;&gt;pic.twitter.com/9lJHqmWQPw&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matt Stine (@mstine) &lt;a href=&#34;https://twitter.com/mstine/statuses/339248683151417344&#34;&gt;May 28, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;  
&lt;p&gt;Score another win for Cloud Foundry&#39;s buildpack support. I&#39;m now toying with the idea of doing something of a world tour of LISP on Cloud Foundry. My next candidate may be &lt;a href=&#34;https://github.com/evhan/heroku-buildpack-chicken&#34;&gt;Scheme&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>into the crucible</title>
      <link>https://www.mattstine.com/2013/05/29/into-the-crucible/</link>
      <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2013/05/29/into-the-crucible/</guid>
      <description>&lt;p&gt;Wow&amp;hellip;it seems I only post to this blog toward the end of May. Well, that all changes now. You see, as of June 3, 2013, this blog is going to become one of many aspects of my new &amp;ldquo;day job.&amp;rdquo; On Monday, I start my life as a Community Engineer with &lt;a href=&#34;http://cloudfoundry.com&#34;&gt;Cloud Foundry&lt;/a&gt; by &lt;a href=&#34;http://goPivotal.com&#34;&gt;Pivotal&lt;/a&gt;. What&#39;s a Community Engineer? Quite honestly, I&#39;m not completely sure of the answer to that question yet. But given the many conversations I&#39;ve had over the past few weeks, it seemingly fits right in with the bridge-building roles I&#39;ve played many times over the course of my career. In this case, I have one foot squarely planted in the world of Cloud Foundry engineering, and one foot squarely planted out in the world with you guys and gals - the community. My job is to help you understand how we are quite literally seeking to &amp;ldquo;build a new platform for a new era.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Of course, this is a journey that for me started a few years ago. In my previous life as a front-line development manager, I helped lead an agile transformation within my team with &amp;ldquo;ruthless automation&amp;rdquo; playing a central role in everything that our team did. However, it seemed that the better we &amp;ldquo;did agile,&amp;rdquo; the more pain we felt when dealing with those outside of our circle of control. It was only years later, after reading Eliyahu Goldratt&#39;s &lt;a href=&#34;http://en.wikipedia.org/wiki/The_Goal_(novel)&#34;&gt;The Goal&lt;/a&gt; and coming to an understanding of his &lt;a href=&#34;http://en.wikipedia.org/wiki/Theory_of_Constraints&#34;&gt;Theory of Constraints&lt;/a&gt;, that I realized what was happening. Our constraints had moved &amp;ldquo;out of the plant,&amp;rdquo; if you will, and landed in the world of operations. Even without this understanding, I developed a keen interest in this newly emerging topic called &amp;ldquo;DevOps&amp;rdquo; and began to explore the ideas emerging around agile operations and infrastructure as code. I started playing with tools like Puppet, Chef, and Vagrant, and taught sessions on all three of them at the Project Automation Experience in 2011.&lt;/p&gt;
&lt;p&gt;You can read my &lt;a href=&#34;http://www.mattstine.com/2012/05/24/the-relaunch/&#34;&gt;last entry&lt;/a&gt; and find out that not much later I joined VMware as a Senior Consultant for its Cloud Application Platform. I was hired into that role based on my extensive background in enterprise Java and the Spring ecosystem, but it was nothing short of a staffing accident that I found myself thrust into a role on a virtualization platform provisioning team helping to build out a private self-service cloud! I was steadily getting carried further away from my role as an application architect, steadily becoming assimilated into that mysterious world of web operations that I knew so little about. These experiences, along with my continued reading and thinking about the worlds of DevOps, Lean, and Kanban, have quite literally changed the way I look at the world of software engineering (or as I prefer to think of it now, value delivery through product engineering that just so happens to involve software!). These experiences have formed around me a &lt;a href=&#34;http://en.wikipedia.org/wiki/Crucible&#34;&gt;crucible&lt;/a&gt;, melting me that I might be poured into a new professional mold.&lt;/p&gt;
&lt;p&gt;So now it&#39;s time to plunge into the world of building the leading &lt;a href=&#34;http://wattersjames.com/2013/03/04/my-fork-you-shirt/&#34;&gt;open&lt;/a&gt; platform as a service, and to help YOU experience the &lt;a href=&#34;https://twitter.com/mstine/status/339570787914760195&#34;&gt;HUGE can of @cloudfoundry awesome&lt;/a&gt; that we at Pivotal are about to unleash on the world. Sound good to you? &lt;a href=&#34;http://blog.cloudfoundry.com/2013/05/16/want-to-contribute-to-cloud-foundry-come-on-in/&#34;&gt;Join us!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the relaunch</title>
      <link>https://www.mattstine.com/2012/05/24/the-relaunch/</link>
      <pubDate>Thu, 24 May 2012 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2012/05/24/the-relaunch/</guid>
      <description>&lt;p&gt;I have rebooted this blog many times over the last several years. If you&#39;ve been a reader of my blog in the past, you will have noticed significant changes. If you&#39;re new here, welcome!&lt;/p&gt;
&lt;p&gt;This reboot has been in the works for several months now, even though I&#39;ve probably spent far less than 24 active hours working on it. Life as an &amp;ldquo;itinerant&amp;rdquo; consultant and conference speaker is extremely busy compared to what I was doing on May 16, 2012 (the date of my last blog posting). At that time I was in the middle of a transition from 3+ years as a front-line manager of a software development team into a lead software architect role. Since that time I&#39;ve changed jobs (careers?) twice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;June 2011 - February 2012: During this time I was titled as a &amp;ldquo;Technical Architect&amp;rdquo; at AutoZone&#39;s corporate offices in Memphis, TN. My focus was the modernization of their retail store management system architecture and technical stack. While there I also did a fair amount of agile coaching.&lt;/li&gt;
&lt;li&gt;February 2012 - Present: In January, VMware came calling, wanting to know if I would join the vFabric Cloud Application Platform PSO as a Senior Consultant. After a few weeks of interviews and careful consideration, I made the jump. I&#39;m now in the midst of helping a Fortune 50 company build a brand new &amp;ldquo;private cloud&amp;rdquo; hosting platform for their next generation of application development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During that time I also significantly increased my participation on the No Fluff Just Stuff tour. In other words, I&#39;ve BEEN BUSY.&lt;/p&gt;
&lt;p&gt;At any rate, I have for quite awhile now wanted to get back into the practice of writing. However, I&#39;ve wanted to do so outside the constraints of a hosted platform like Blogger or WordPress.com. Those systems place far too many constraints on how your blog works, and they also happen to be the only place that your data is housed. Sure, I could write my posts in Vim and then copy/paste them into the platform, but that&#39;s annoying. I wanted to manage my writing using a plain text editor, mark it up using something lightweight like Markdown, check my writing into version control using Git, generate my site using a tool like Jekyll, and then push my site to the cloud. What was the easiest way to achieve all of this goodness? &lt;a href=&#34;http://octopress.org&#34;&gt;Octopress&lt;/a&gt; seemed to fit the bill.&lt;/p&gt;
&lt;p&gt;So, what you now see is the result of my labor in migrating from WordPress.com to Octopress, hosted at Heroku. One day (perhaps) I&#39;ll write up the process that I used. It was a bit convoluted and involved gigantic piles of yak hair, so I&#39;d rather not consider that piece right now.&lt;/p&gt;
&lt;p&gt;What I will be focusing on quite a bit is the idea of simplicity. For more than a decade I have wandered through the barren wasteland that is accidental complexity in software. A few months ago I viewed Rich Hickey’s &lt;a href=&#34;https://thestrangeloop.com/sessions/simple-made-easy&#34;&gt;keynote session at StrangeLoop 2011&lt;/a&gt; entitled &lt;a href=&#34;http://www.infoq.com/presentations/Simple-Made-Easy&#34;&gt;“Simple Made Easy”&lt;/a&gt;. It is Rich’s definition of simplicity in software that has inspired the brand new title of this blog, wherein I will chronicle my continuing quest to seek out simplicity in software structure.&lt;/p&gt;
&lt;p&gt;Alas, it is time to return to billable work. I shall endeavor to post again in far less than a year. So, as we say in the south, &amp;ldquo;Ya&#39;ll come back now, you hear?&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>design meeting patterns/antipatterns</title>
      <link>https://www.mattstine.com/2011/05/16/design-meeting-patternsantipatterns/</link>
      <pubDate>Mon, 16 May 2011 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2011/05/16/design-meeting-patternsantipatterns/</guid>
      <description>&lt;p&gt;For those of you that don&#39;t know, I recently returned to the technical ranks as a Software Architect after a three-year stint in management. To make a long story short, I now love my job again. Perhaps I&#39;ll write the long story in a future blog entry. On to the topic at hand. Today I led the first significant design discussion that I have led in quite a long time. A few minutes afterward, I was already reflecting on what had occurred and how. The very first thing that I noticed was my drastically different approach to the task. I felt that my facilitation skills were more mature and effective than I remember from previous similar engagements. I&#39;m not sure if the time I spent in management (where I facilitated quite a few meetings, though much more business-focused ones) helped, but something certainly has.&lt;/p&gt;
&lt;p&gt;I also noticed several things that I&#39;ll call &amp;ldquo;pattern vs. antipattern&amp;rdquo; tugs of war. Quite often during the meeting I felt the group trying to move our discussion in one direction that I, for better or for worse, thought was ineffective. I would then redirect us on to what I felt was a better path. In true catalog form, here&#39;s the list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Understand the Problem vs. Jump to the Solution&lt;/strong&gt; - only a couple of minutes into our discussion solutions were being flung about like drunken darts. This situation almost always leads to suboptimal or faulty solutions. As a facilitator, try to ensure that the problem has been clearly stated. If at all possible, write it down on a whiteboard. Make sure everyone agrees that the problem as stated is the problem the group is there to solve. Sure enough, after performing this exercise, we all had a very different and clear understanding of the problem than that with which we walked in the door.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Assume the Worst vs. Assume the Best&lt;/strong&gt; - occasionally the exact details of a requirement are unclear, and not assuming something will totally derail the design discussion. You have a couple of choices. The first is to halt the discussion and get the details cleared up. This is clearly the best solution, as you&#39;ll no longer have to assume anything. However, it can be the case that the person who can clear things up isn&#39;t available. Or in some cases, the question you&#39;ll be asking will require another meeting at another level of the organization. If you find yourself in that spot, and you can&#39;t wait (we couldn&#39;t!), then the best approach is to work from the worst possible case scenario. You&#39;ll then be in the best position to handle whatever answer comes your way. However, our tendency is often to assume the best (&amp;ldquo;That will &lt;em&gt;never&lt;/em&gt; happen!&amp;quot;). Fight that tendency. However, whatever you choose, follow up at your earliest opportunity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Basing Decisions on the Current Situation vs. Basing Decisions on History&lt;/strong&gt; - many times the group wanted to veer off into safer territory. In some cases, a possible solution departed significantly from the current design. While this is a valid concern (we do want consistency of design across the system where possible), it is certainly not a trump card. Occasionally the situation at hand will merit a significant departure from the current design. Another way history can rear its ugly head is the assertion that we&#39;ve always solved similar problems like &amp;lsquo;x,&amp;rsquo; so we should do so with this problem as well. Again, note the word &amp;ldquo;similar.&amp;rdquo; All problems are somewhat different and have their own eccentricities. So, rather than working from history, I pushed us back to a clean slate with the statement &amp;ldquo;Let&#39;s stop thinking about the past and start from scratch. We may very well come up with the same solution you guys are proposing, but I&#39;d rather do so through our own objective analysis and not instinct.&amp;rdquo; Guess what. We came up with a different solution that we all felt better about.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Shooting for the &amp;ldquo;Best&amp;rdquo; Solution vs. the &amp;ldquo;Easiest&amp;rdquo; Solution&lt;/strong&gt; - now sometimes we can&#39;t afford the best solution. I grant that. However, I&#39;m trying to fight the tendency to immediately jump to the &amp;ldquo;easiest thing that could possibly work.&amp;rdquo; Often this pops up in the first P vs. AP - if we don&#39;t clearly understand the problem, sometimes an easy solution jumps out that doesn&#39;t deal with the underlying details we&#39;ve yet to uncover. Also, sometimes the best solution is quite simple and elegant. It doesn&#39;t necessarily have to be harder and more complex than the easiest solution. In fact, sometimes the &amp;ldquo;easiest&amp;rdquo; solution leads to the most accidental complexity in the long-run. So, shoot for the best solution you can come up with and only then, optimize for cost.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Present Possible Solutions Objectively vs. My Solution is the Best!&lt;/strong&gt; - one would hope that we all start here, but we don&#39;t. We tend to like our own solutions to problems and want them to &amp;ldquo;win.&amp;rdquo; Our ego can get in the way of even hearing an alternate solution presented by another team member. I point you to &lt;a href=&#34;http://www.code-magazine.com/Article.aspx?quickid=1105121&#34;&gt;my colleague Ted Neward&#39;s post for more on &amp;ldquo;egoless programming.&amp;quot;&lt;/a&gt; So, as a facilitator, you&#39;ve got to make sure that all solutions are presented objectively. I often had to say things like &amp;ldquo;OK, let&#39;s assume before we ever get started that this is a good solution to the problem and not hack away at it until its fully presented, and we all understand it.&amp;rdquo; In the end, this insistence led us to choose a solution that none of us (myself included) originally thought we&#39;d pick.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Validating from Code vs. Validating from Memory&lt;/strong&gt; - more often than not, questions about the existing design/code/behavior will come up. Rather than scratching your head and trying to remember what you wrote six months ago, pull up the code and find out. I can&#39;t tell you the number of meetings I&#39;ve attended where baseless assertions were made about existing code, only to require another meeting the next day to revisit the whole discussion once those assertions were proven wrong. Again, as a facilitator, I directed us to solve every problem for which all of the facts were available. We inserted placeholders in our solution where questions remained. Guess what we&#39;re doing now? Well, I&#39;m blogging about the meeting, but the rest of us are validating from code. Tomorrow will fill in the blanks!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>selenium conference 2011</title>
      <link>https://www.mattstine.com/2011/01/05/selenium-conference-2011/</link>
      <pubDate>Wed, 05 Jan 2011 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2011/01/05/selenium-conference-2011/</guid>
      <description>&lt;p&gt;I completed an interest survey for a potential Selenium-focused conference several weeks ago, and I&#39;m excited to let you know that the &amp;ldquo;powers that be&amp;rdquo; have decided that the conference is going to happen! I have already submitted my &amp;ldquo;Executable Specifications: Automating Your Requirements Document with Geb and Spock&amp;rdquo; talk as a potential session. Whether it makes the conference program or not, I plan on attending the event. Here are the details:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2011/01/selenium-conf-2011.png&#34; alt=&#34;Selenium Conference 2011&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Join members of the growing Selenium community for 3 jam-packed days of talks, workshops, lightning talks, and hack sessions. Hear speakers from around the world talk about the present and future of automated testing, share ideas with fellow Selenium developers, including Core Committers, and take part in shaping the future success of the Selenium project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;When:&lt;/strong&gt; April 4-6, 2011
&lt;strong&gt;Where:&lt;/strong&gt; Marines’ Memorial Club &amp;amp; Hotel, 609 Sutter St, San Francisco, CA 94102 USA
&lt;strong&gt;Register now to be a speaker or sponsor. More details: &lt;a href=&#34;http://www.seleniumconf.com/&#34;&gt;&lt;a href=&#34;http://www.seleniumconf.com/&#34;&gt;http://www.seleniumconf.com/&lt;/a&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2010 in review the automated analysis</title>
      <link>https://www.mattstine.com/2011/01/02/2010-in-review-the-automated-analysis/</link>
      <pubDate>Sun, 02 Jan 2011 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2011/01/02/2010-in-review-the-automated-analysis/</guid>
      <description>&lt;p&gt;The stats helper monkeys at WordPress.com mulled over how this blog did in 2010, and here&#39;s a high level summary of its overall blog health:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://s0.wp.com/i/annual-recap/meter-healthy3.gif&#34; alt=&#34;Healthy blog!&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Blog-Health-o-Meter™&lt;/em&gt; reads Fresher than ever.&lt;/p&gt;
&lt;h2 id=&#34;crunchy-numbers&#34;&gt;Crunchy numbers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://s0.wp.com/i/annual-recap/abstract-stats-1.png&#34; alt=&#34;Featured image&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A helper monkey made this abstract painting, inspired by your stats.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A Boeing 747-400 passenger jet can hold 416 passengers.  This blog was viewed about &lt;strong&gt;6,600&lt;/strong&gt; times in 2010.  That&#39;s about 16 full 747s.&lt;/p&gt;
&lt;p&gt;In 2010, there were &lt;strong&gt;15&lt;/strong&gt; new posts, growing the total archive of this blog to 115 posts. There were &lt;strong&gt;24&lt;/strong&gt; pictures uploaded, taking up a total of 979kb. That&#39;s about 2 pictures per month.&lt;/p&gt;
&lt;p&gt;The busiest day of the year was June 4th with &lt;strong&gt;139&lt;/strong&gt; views. The most popular post that day was &lt;a href=&#34;http://mattstine.com/2010/06/03/dont-build-software-thats-too-smart/&#34;&gt;Don&#39;t build software that&#39;s TOO smart!&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;where-did-they-come-from&#34;&gt;Where did they come from?&lt;/h2&gt;
&lt;p&gt;The top referring sites in 2010 were &lt;strong&gt;agile.dzone.com&lt;/strong&gt;, &lt;strong&gt;java.dzone.com&lt;/strong&gt;, &lt;strong&gt;twitter.com&lt;/strong&gt;, &lt;strong&gt;Google Reader&lt;/strong&gt;, and &lt;strong&gt;javablogs.com&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Some visitors came searching, mostly for &lt;strong&gt;matt stine&lt;/strong&gt;, &lt;strong&gt;groovy http post&lt;/strong&gt;, &lt;strong&gt;groovy post&lt;/strong&gt;, &lt;strong&gt;groovy url post&lt;/strong&gt;, and &lt;strong&gt;groovy url encode&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;attractions-in-2010&#34;&gt;Attractions in 2010&lt;/h2&gt;
&lt;p&gt;These are the posts and pages that got the most views in 2010.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mattstine.com/2010/06/03/dont-build-software-thats-too-smart/&#34;&gt;Don&#39;t build software that&#39;s TOO smart!&lt;/a&gt; June 2010 1 comment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mattstine.com/2009/04/25/groovy-post-to-a-url/&#34;&gt;Groovy: Post to a URL&lt;/a&gt; April 2009 4 comments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mattstine.com/resume/&#34;&gt;Resume&lt;/a&gt; March 2009&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mattstine.com/2009/03/29/deploying-grails-with-groovy/&#34;&gt;Deploying Grails with Groovy&lt;/a&gt; March 2009&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mattstine.com/2009/04/02/loty-time-again-scala-or-clojure/&#34;&gt;LOTY Time Again: Scala or Clojure?!?!&lt;/a&gt; April 2009 17 comments&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>selenium 2.0 refcard</title>
      <link>https://www.mattstine.com/2010/11/29/selenium-2-0-refcard/</link>
      <pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/11/29/selenium-2-0-refcard/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://refcardz.dzone.com/refcardz/getting-started-selenium-20?oid=hom31797&#34;&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2010/11/31797.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;Today DZone released my first Refcard: &amp;ldquo;&lt;a href=&#34;http://refcardz.dzone.com/refcardz/getting-started-selenium-20?oid=hom31797&#34;&gt;Selenium 2.0: Using the WebDriver API to Create Robust User Acceptance Tests&lt;/a&gt;.&amp;rdquo; I have been interested in writing a Refcard for a long time but have never pulled the trigger. For whatever reason, I decided to jump on the bandwagon last month. Writing this card was quite a challenge, as it&#39;s difficult to boil down a big topic into only six pages while keeping it useful. Thus far the feedback from the community has been largely positive.&lt;/p&gt;
&lt;p&gt;If you&#39;re looking for your next automated testing tool for browser-based user acceptance tests, download the card and let me know what you think!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>agile zone roundup</title>
      <link>https://www.mattstine.com/2010/11/10/agile-zone-roundup/</link>
      <pubDate>Wed, 10 Nov 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/11/10/agile-zone-roundup/</guid>
      <description>&lt;p&gt;I&#39;ve been really quiet on this blog lately. There have been multiple reasons for that. I&#39;ve been extremely busy preparing for conferences this Fall including SpringOne/2GX and The Rich Web Experience. I&#39;ve also stayed busy writing for DZone. I have my first DZone Refcard coming out soon, which is focused on Web Driver/Selenium 2. I&#39;ve also been writing my regular articles for Agile Zone. Here&#39;s a roundup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://agile.dzone.com/articles/modular-agile-loosely-coupled&#34;&gt;Modular Agile: Loosely coupled, highly cohesive ceremonies&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://agile.dzone.com/articles/think-youre-doing-kanban-think&#34;&gt;	Think You&#39;re &amp;ldquo;Doing Kanban?&amp;rdquo; Think Again.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://agile.dzone.com/articles/gaelyks-and-golden-hammers&#34;&gt;On Gaelyks and Golden Hammers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://agile.dzone.com/articles/automation-people-because&#34;&gt;Automation for the People (because Everybody Doing It Manually Hurts) 	&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://agile.dzone.com/articles/build-scripts-we-dont-need-no&#34;&gt;Build Scripts? We Don&#39;t Need No Stinkin&amp;rsquo; Build Scripts!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://agile.dzone.com/polls/automated-browser-testing&#34;&gt;Automated Browser Testing: What&#39;s in Your Toolkit?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://agile.dzone.com/articles/selenese-or-not-test-seems-be&#34;&gt;To Selenese or not to Test? That Seems to be the Question.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://agile.dzone.com/articles/apple-jvm-extra-feature&#34;&gt;Is the Apple JVM an &amp;ldquo;Extra Feature?&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>the seven wastes of software development</title>
      <link>https://www.mattstine.com/2010/11/10/the-seven-wastes-of-software-development/</link>
      <pubDate>Wed, 10 Nov 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/11/10/the-seven-wastes-of-software-development/</guid>
      <description>&lt;p&gt;In late September I completed an eight-part article series for Agile Zone entitled &amp;ldquo;The Seven Wastes of Software Development.&amp;rdquo; This series discussed Mary and Tom Poppendieck&#39;s mapping of Shigeo Shingo&#39;s &amp;ldquo;Seven Wastes of Lean Manufacturing&amp;rdquo; into the software development world. This has been a very popular series, having been viewed a total of 57,887 times at this writing. Here&#39;s a set of links to the series:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://agile.dzone.com/articles/seven-wastes-software&#34;&gt;The Seven Wastes of Software Development - Introduction&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://agile.dzone.com/articles/waste-1-partially-done-work&#34;&gt;Waste #1 - Partially Done Work&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://agile.dzone.com/articles/waste-2-extra-features&#34;&gt;Waste #2 - Extra Features&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://agile.dzone.com/articles/waste-3-relearning&#34;&gt;Waste #3 - Relearning&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://agile.dzone.com/articles/waste-4-handoffs&#34;&gt;Waste #4 - Handoffs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://agile.dzone.com/articles/waste-5-delays&#34;&gt;Waste #5 - Delays&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://agile.dzone.com/articles/waste-6-task-switching&#34;&gt;Waste #6 - Task Switching&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://agile.dzone.com/articles/waste-7-defects&#34;&gt;Waste #7 - Defects&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>the agile guerilla series</title>
      <link>https://www.mattstine.com/2010/09/05/the-agile-guerilla-series/</link>
      <pubDate>Sun, 05 Sep 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/09/05/the-agile-guerilla-series/</guid>
      <description>&lt;p&gt;I recently completed a series of articles for Agile Zone entitled &amp;ldquo;The Agile Guerilla.&amp;rdquo; Those of you that have seen me on the No Fluff Just Stuff tour this year may recognize a talk by the same name. They are one and the same concept: my attempt to reach the masses with strategies for introducing change, specifically moving to agility, into organizations from the grassroots level.&lt;/p&gt;
&lt;p&gt;Here&#39;s a list of the complete set of articles for your convenience!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/agile-guerilla&#34;&gt;The Agile Guerilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/show-dont-tell-persuade-dont&#34;&gt;Show (Don&#39;t Tell), Persuade (Don&#39;t Preach)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/going-guerilla-where-start&#34;&gt;Going Guerilla: Where to Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/guerillas-workflow&#34;&gt;The Guerilla&#39;s Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/guerilla-tdd&#34;&gt;Guerilla TDD &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/guerilla-continuous&#34;&gt;Guerilla Continous Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/so-what-are-you-waiting-go&#34;&gt;So What Are You Waiting For? GO BANANAS!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>more agile zone articles</title>
      <link>https://www.mattstine.com/2010/08/02/more-agile-zone-articles/</link>
      <pubDate>Mon, 02 Aug 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/08/02/more-agile-zone-articles/</guid>
      <description>&lt;p&gt;Just to prove that I am writing, just not here, I thought I&#39;d post another collection of links to my latest Agile Zone articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://java.dzone.com/articles/yes-you-kanban&#34;&gt;Yes You Kanban!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.dzone.com/articles/guerillas-workflow&#34;&gt;The Guerilla&#39;s Workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.dzone.com/articles/feedback-key&#34;&gt;Feedback is the Key!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.dzone.com/articles/going-guerilla-where-start&#34;&gt;Going Guerilla: Where to Start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the near future you can look forward to a few more episodes of &amp;ldquo;The Agile Guerilla&amp;rdquo; series, as well as a brand new series I&#39;ll be starting entitled &amp;ldquo;The Seven Wastes of Software Development.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Got any topics you want to hear more about? Post up in the comments and I&#39;ll see about covering them at Agile Zone in the coming weeks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>i&#39;m in the zone...agile zone</title>
      <link>https://www.mattstine.com/2010/07/20/im-in-the-zone-agile-zone/</link>
      <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/07/20/im-in-the-zone-agile-zone/</guid>
      <description>&lt;p&gt;My apologies to my colleagues down the street at &lt;a href=&#34;http://www.autozone.com&#34;&gt;AutoZone&lt;/a&gt;, but I just had to do that. :-)&lt;/p&gt;
&lt;p&gt;I recently accepted the role of Agile Zone Leader at &lt;a href=&#34;http://agile.dzone.com&#34;&gt;DZone.com&lt;/a&gt;. For the past few weeks I&#39;ve been publishing a couple of articles a week on various agile development topics. I&#39;m very happy to get the extra exposure and I hope that folks are getting some value out of my posts. On the downside, I have virtually zero time to write anything here, but on the upside I&#39;m definitely writing more regularly. Nothing like positive pressure to deliver!&lt;/p&gt;
&lt;p&gt;Here are some links to my recent articles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/you-are-your-softwares-immune&#34;&gt;You Are Your Software&#39;s Immune System!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/interview-w-alan-shalloway&#34;&gt;Interview: Alan Shalloway on Lean Agile Software Development, Part One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/interview-w-alan-shalloway&#34;&gt;Interview: Alan Shalloway on Lean Agile Software Development, Part Two&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/show-dont-tell-persuade-dont&#34;&gt;Show (Don&#39;t Tell), Persuade (Don&#39;t Preach)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/scrummaster-said-i-had&#34;&gt;But the ScrumMaster said I had to!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/agile-guerilla&#34;&gt;The Agile Guerilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://agile.dzone.com/articles/use-stories-deliver&#34;&gt;Use Stories to Deliver Business Value&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>two new nfjs talks for this fall</title>
      <link>https://www.mattstine.com/2010/07/06/two-new-nfjs-talks-for-this-fall/</link>
      <pubDate>Tue, 06 Jul 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/07/06/two-new-nfjs-talks-for-this-fall/</guid>
      <description>&lt;p&gt;I&#39;m excited to announce that I am working up two brand new talks for this Fall to go along side my regular fare. Both of these talks are already scheduled for shows in Boston, MA and Seattle, WA.&lt;/p&gt;
&lt;p&gt;The first talk is entitled &amp;ldquo;The Seven Wastes of Software Development.&amp;rdquo; We&#39;ll begin by examining one of the key tenets of Lean Software Development, that of eliminating waste. We&#39;ll then walk through the seven wastes identified by Mary and Tom Poppendieck in their books:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Partially Done Work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extra Processes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extra Features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task Switching&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Waiting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Motion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Defects&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&#39;ll examine each of these wastes and look at some of their common manifestations, both in our coding practices and in our development methodologies. We&#39;ll also examine strategies for eliminating each of these wastes from our development efforts.&lt;/p&gt;
&lt;p&gt;The second talk is entitled &amp;ldquo;Yes You Kanban!&amp;rdquo; Kanban is sweeping through the agile software development space. Is it hype? Or is it a useful tool to add to our belt? In this session, we&#39;ll walk through the following topics and I&#39;ll let you be the judge:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What is Kanban?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is Kanban NOT?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comparison to SCRUM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Roots of Kanban&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;David Anderson&#39;s five essential elements/principles of Kanban (Visualize workflow, Limit work-in-progress, Measure &amp;amp; manage flow, Make process policies explicit, Use models to recognize improvement opportunities)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Examples of Kanban systems&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope to see some of you in these talks this Fall and I look forward to our discussions!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nfjs fall 2010 what do you want to learn</title>
      <link>https://www.mattstine.com/2010/06/22/nfjs-fall-2010-what-do-you-want-to-learn/</link>
      <pubDate>Tue, 22 Jun 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/06/22/nfjs-fall-2010-what-do-you-want-to-learn/</guid>
      <description>&lt;p&gt;Hi everyone! I&#39;m currently in the process of developing new talks for my Fall 2010 NFJS tour dates. While I don&#39;t know yet where I&#39;ll be speaking, I can tell you that I&#39;ve registered availability for the following shows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Boston, MA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Seattle, WA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atlanta, GA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minneapolis, MN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chicago, IL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Denver, CO&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if you&#39;re in one of those cities and you&#39;re thinking about attending NFJS when it comes your way (see &lt;a href=&#34;http://www.nofluffjuststuff.com&#34;&gt;here&lt;/a&gt; for the schedule), I&#39;d like to know what you want to hear about assuming I come your way.&lt;/p&gt;
&lt;p&gt;To narrow down the potentials a bit, here are my personal areas of focus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Agility/Lean/Kanban&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Native Mobile and Web Mobile Software Development (iPhone/iPad/Android)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Web Development in General (HTML5/CSS3/JavaScript)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modularity and OSGi&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If there are any topics from these four areas that you&#39;d like to hear more about, please speak up in the comments section. And even if you&#39;re not in one of these cities, most of any talks I develop for the Fall will likely show up on the 2011 tour as well, so please speak up anyway!&lt;/p&gt;
&lt;p&gt;Thanks in advance for your feedback!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dont build software thats too smart</title>
      <link>https://www.mattstine.com/2010/06/03/dont-build-software-thats-too-smart/</link>
      <pubDate>Thu, 03 Jun 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/06/03/dont-build-software-thats-too-smart/</guid>
      <description>&lt;p&gt;I had an extremely successful meeting with one of our clients yesterday. We were discussing how we wanted to go about migrating her laboratory from its current system (one that we built several years ago) to our new lab management platform. At some point during the discussion I made the statement, &amp;ldquo;We tried to make the previous system too smart! We&#39;re not repeating that mistake this time.&amp;rdquo; Of course, she was in complete agreement with that principle. I&#39;ve had similar interactions with our other clients that are making migrations (rather than encountering our system for the first time on this new version), and although I&#39;ve never explicitly stated the principle that way, similar sentiments have abounded.&lt;/p&gt;
&lt;p&gt;What is too smart software? In our case, it was a system that attempted to encapsulate every single rule of &amp;ldquo;business&amp;rdquo; process that occurred within a given laboratory. Many times statements were flung around like &amp;ldquo;will it ALWAYS happen this way,&amp;rdquo; &amp;ldquo;what should we do if this happens?&amp;rdquo; etc., etc., etc. We tried to cover every single possibility, and we did an excellent job of preventing users from ever breaking their own rules. What we didn&#39;t realize (and we&#39;re not unique - this problem is RAMPANT) is that the rules CHANGE. Rules come, rules go. Sometimes the rule remains, but there are a few exceptional cases that must be dealt with. Our system simply couldn&#39;t deal with a world that worked this way - and thus, our system was completely unfit for the real world.&lt;/p&gt;
&lt;p&gt;We set out with a different mission this time. If there&#39;s one overriding characteristic of SRM (Shared Resource Management) 2.0, it&#39;s the explicit assumption that the world will change continually. We don&#39;t attempt to tell you how you must use this system. We capture your data, we invoice for your services, we run your reports - but YOU, the user gets to decide how you&#39;ll interact with it. If your workflow changes, we change with you. Now the devil is in the details. It&#39;s taken roughly 20-30 man years worth of effort to build a system like this, and it hasn&#39;t been easy. But in the end, we&#39;re finding that those years were much better spent ENABLING our users rather than PREVENTING our users from getting things done.&lt;/p&gt;
&lt;p&gt;I&#39;m not sure that I&#39;ve gotten my point across in this brief diatribe, so I&#39;ll attempt to sum it up here. If you&#39;re developing a system, figure out the 2 or 3 things that will make your users&amp;rsquo; lives AWESOME, and do those 2 or 3 things extremely well. Don&#39;t do the rest AT ALL. Don&#39;t build a system that attempts to be smarter than the knowledge expert using it - it&#39;s a means to your user&#39;s end, not an end in itself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>announcing nosql summer memphis</title>
      <link>https://www.mattstine.com/2010/05/28/announcing-nosql-summer-memphis/</link>
      <pubDate>Fri, 28 May 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/05/28/announcing-nosql-summer-memphis/</guid>
      <description>&lt;p&gt;I recently stumbled across the &lt;a href=&#34;http://nosqlsummer.org/&#34;&gt;NOSQL Summer&lt;/a&gt; website via my friend Alex Miller&#39;s &lt;a href=&#34;http://tech.puredanger.com/2010/05/25/nosql-summer-st-louis/&#34;&gt;blog&lt;/a&gt;. The idea is to setup a summer reading club focused around databases and distributed systems. Groups will gather &amp;ldquo;worldwide&amp;rdquo; to discuss various papers and the hopefully submit the substance of their discussions back to the NOSQL Summer website in the form of annotated papers.&lt;/p&gt;
&lt;p&gt;This sounded like a great idea to me, so I decided that we&#39;d co-locate a NOSQL Summer discussion with our monthly Memphis JUG meetings. You can find the details of our NOSQL meetings at &lt;a href=&#34;http://nosqlsummer.org/city/memphis&#34;&gt;&lt;a href=&#34;http://nosqlsummer.org/city/memphis&#34;&gt;http://nosqlsummer.org/city/memphis&lt;/a&gt;&lt;/a&gt;. We&#39;ll start at 5:30 and run until 6:15-6:30. If you&#39;re interested in these discussions, come on out to Southwest TN Community College on June 24th (even if you&#39;re not a Java type!).&lt;/p&gt;
&lt;p&gt;Our first paper will be &lt;a href=&#34;http://nosqlsummer.org/paper/end-of-architectural-era&#34;&gt;The End of an Architectural Era (It&#39;s Time for a Complete Rewrite)&lt;/a&gt;. Please read it before the meeting and come prepared to mindshare.&lt;/p&gt;
&lt;p&gt;If there&#39;s enough interest in these discussions, we could start having a lunch time discussion at a centrally located restaurant halfway between each JUG meeting. We can discuss this at our first meeting in June. I hope to see you there!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>first thoughts on seven languages in seven weeks</title>
      <link>https://www.mattstine.com/2010/05/06/first-thoughts-on-seven-languages-in-seven-weeks/</link>
      <pubDate>Thu, 06 May 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/05/06/first-thoughts-on-seven-languages-in-seven-weeks/</guid>
      <description>&lt;p&gt;I recently started reading the beta copy of Bruce Tate&#39;s &lt;a href=&#34;http://pragprog.com/titles/btlang/seven-languages-in-seven-weeks&#34;&gt;&lt;em&gt;Seven Languages in Seven Weeks&lt;/em&gt;&lt;/a&gt; from the Pragmatic Bookshelf. While I&#39;m certainly NOT on pace to actually complete the book in seven weeks, I have been steadily plodding along. Reading this book takes me back to my days as an undergraduate computer science student at the University of Mississippi. As with most CS programs, we were all required to take a &amp;ldquo;Survey of Programming Languages&amp;rdquo; course toward the end of the curriculum. Tate&#39;s book is very similiar to walking through this course, except:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Tate&#39;s text and suggested exercises are intensely practical, targeted at actually getting something useful done in the language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The language selection is entirely relevant to today&#39;s practitioner. Chances are good that you&#39;ll use a language from this set in your day job sometime in the next decade. Ignoring that, chances are good that you&#39;ll use some language that is a &amp;ldquo;close cousin&amp;rdquo; of a language from this set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your thinking about programming in general will be challenged by each chapter. This is not a leisurely read. You cannot &amp;ldquo;coast&amp;rdquo; through this course.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At present I&#39;m slowly working through the chapter devoted to Io. Io is a prototype-based language, close-cousins with Lua (of recent iPhone game development controversy) and JavaScript (can&#39;t think of a practical use for this guy&amp;hellip;umm&amp;hellip;oh wait!). I&#39;ve very much enjoyed Bruce&#39;s treatment of the language, with his descriptions of the feature being as &amp;ldquo;visual&amp;rdquo; as words can effectively be - who else could liken languages to popular movie characters and get away with it? Before working through Io, Bruce and I tackled Ruby together. Ruby is an old and unfortunately neglected friend of mine. We&#39;ve had our fun together doing a couple of small Rails applications, JUG talks and a (so far) unsuccessful trek into the world of OSGi, but unfortunately we haven&#39;t hit the big time in my day job. Working through this chapter really served to reignite my enthusiasm for the language, especially as it relates to the rich ecosystem of testing tools available in the Ruby and Rails communities.&lt;/p&gt;
&lt;p&gt;In short, only two chapters in I&#39;d thoroughly recommend that you purchase this book. Like &lt;a href=&#34;http://oreilly.com/catalog/9780596100940&#34;&gt;&lt;em&gt;Beyond Java&lt;/em&gt;&lt;/a&gt; before it, Bruce has again challenged us to step outside of our comfort zone. If nothing else, you&#39;ve got seven kickstarts into learning your &amp;ldquo;Language of the Year.&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>osgi on rails</title>
      <link>https://www.mattstine.com/2010/04/29/osgi-on-rails/</link>
      <pubDate>Thu, 29 Apr 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/04/29/osgi-on-rails/</guid>
      <description>&lt;p&gt;I&#39;ve seen quite a few blogs/articles/etc. lately related to the adoption (or lack thereof) of OSGi in the mainstream web application/enterprise application space. A nice summation of these is encapsulated in this excerpt from a comment by Peter Kriens on DZone (you&#39;ll find it in the comments section for &lt;a href=&#34;http://java.dzone.com/articles/osgi-perspectives&#34;&gt;&lt;a href=&#34;http://java.dzone.com/articles/osgi-perspectives&#34;&gt;http://java.dzone.com/articles/osgi-perspectives&lt;/a&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yes, one of the next frontiers is to make OSGi easier to use for the web app developers. The solid foundation is there, so stop whining and help us create the tools, books, and tutorials that will make OSGi palatable in those markets.&lt;/p&gt;
&lt;p&gt;There&#39;s nothing like a call to action to get me stirred up. It&#39;s no secret that I think OSGi is an excellent tool for tackling the complexity of enterprise applications (see my talks on the NFJS tour this year: &lt;a href=&#34;http://www.nofluffjuststuff.com/conference/speaker/matt_stine&#34;&gt;&lt;a href=&#34;http://www.nofluffjuststuff.com/conference/speaker/matt_stine&#34;&gt;http://www.nofluffjuststuff.com/conference/speaker/matt_stine&lt;/a&gt;&lt;/a&gt;). However, I will readily admit that the learning curve for tackling any non-trivial application in OSGi is rather steep. My bar for non-trivial is quite low - try learning OSGi while simultaneously attempting to get a mainstream framework like Hibernate working properly.&lt;/p&gt;
&lt;p&gt;I think that what we need is a tool that will enable a developer new to OSGi to get an OSGi-enabled web application up and running fairly readily. In fact, I think it would be good to absolutely minimize the amount of OSGi know-how required to get a basic web application into production, while at the same time leaving all of OSGi available just under the covers so that it can be easily accessed when I know what I need and how to use it. So here&#39;s my proposal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow in the footsteps of AppFuse, Grails, Rails, Roo, etc. and put together a web application toolkit that will allow one to instantly spin-up a deployable OSGI-enabled web application.&lt;/li&gt;
&lt;li&gt;Since we&#39;re talking about catering to mainstream here, Java the language ought to be the primary language used for development. With that said, we should not put up any barriers to using other languages available on the JVM.&lt;/li&gt;
&lt;li&gt;Bootstrap a DB-agnostic persistence layer leveraging JPA and make it easily accessible across the application bundles.&lt;/li&gt;
&lt;li&gt;Bootstrap a dependency injection framework for OSGi services based on the Blueprint standard.&lt;/li&gt;
&lt;li&gt;Bootstrap a security layer and provide a basic user/role security module with provided login, logout, etc. facilities.&lt;/li&gt;
&lt;li&gt;Pick a set of modern Java web application frameworks (e.g. Spring MVC, Struts 2, etc.) and make them easily pluggable.&lt;/li&gt;
&lt;li&gt;Wrap a nice build system around all of this that leverages a modern build tool (e.g. Gradle or Maven 3), the best of the PAX Tools features (especially Pax Construct, Exam, and Runner), and good facilities for automated testing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, who&#39;s with me? I&#39;m open to any suggestions/comments/rants, etc.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jug leadership lessons learned on slideshare</title>
      <link>https://www.mattstine.com/2010/04/02/jug-leadership-lessons-learned-on-slideshare/</link>
      <pubDate>Fri, 02 Apr 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/04/02/jug-leadership-lessons-learned-on-slideshare/</guid>
      <description>&lt;p&gt;I&#39;ve been playing a bit with &lt;a href=&#34;http://www.slideshare.net&#34;&gt;SlideShare&lt;/a&gt; today and I took the opportunity to upload the slides from my &lt;a href=&#34;http://weblogs.java.net/blog/2009/07/02/how-start-and-grow-jug-community-corner-2009-podcast&#34;&gt;Java.net Community Corner interview with Kevin Farnham at JavaOne 2009&lt;/a&gt;. SlideShare has a nice feature that allows you to sync up the audio from an MP3 file with your slides, and since both were available, I thought I&#39;d give it a try. The interface is extremely easy to use and I&#39;m very happy with the outcome.&lt;/p&gt;
&lt;p&gt;This talk covers the various things I&#39;ve learned about leading a Java User Group over the past few years. I would say that these are definitely applicable to leading any type of user group, so even if you aren&#39;t a Java person, you might find some meat here. Enjoy!&lt;/p&gt;
&lt;p&gt;[slideshare id=3622125&amp;amp;doc=jugleadershiplessonslearned-100402140624-phpapp02]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dead programmers society</title>
      <link>https://www.mattstine.com/2010/02/16/dead-programmers-society/</link>
      <pubDate>Tue, 16 Feb 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/02/16/dead-programmers-society/</guid>
      <description>&lt;p&gt;A local Pastor once gave the &lt;a href=&#34;http://holding2truth.blogspot.com/2009/01/strange-sounding-advice.html&#34;&gt;advice of introducing ourselves&lt;/a&gt; &lt;a href=&#34;http://holding2truth.blogspot.com/2009/02/strange-advice-introducing-our-kids-to.html&#34;&gt;and our kids to dead people&lt;/a&gt;. It is his belief that if his kids grow up idolizing the likes of Eric Liddell, Jim Elliot, and Hudson Taylor, they would be far better off than by looking up to many of our so-called &amp;ldquo;heroes&amp;rdquo; of today. I happen to agree with his advice, but that&#39;s not the subject of tonight&#39;s blog entry.&lt;/p&gt;
&lt;p&gt;I think that this advice is very applicable to us as software developers today. While our industry is still young enough that a great many of our &amp;ldquo;founding fathers&amp;rdquo; are still around, it is surprising to see how often their work and contributions go unnoticed by the vast majority of us. At the January Memphis/Mid-South Java User Group meeting, our program focused on books that all of us as developers should read. Four of us gave our takes on the topic. Joel Neely, one of a few people that I learn from every time I get near them, pulled yet another rabbit out of his hat by focusing on several books, all of which had been published before the majority of us were out of diapers! One book struck me in particular: &lt;em&gt;A Discipline of Programming&lt;/em&gt; by Edsgar W. Dijkstra. In it EWD &amp;ldquo;presents a formal approach to developing (non-deterministic!) algorithms, using what we would now call a DSL for algorithm design. Incidentally, that book was published in 1976.&amp;rdquo; (Thanks Joel for the excellent summary). I&#39;d like to pull out just a couple of quotes from that book:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A most important, but also a most elusive, aspect of any tool is its influence on the habits of those who train themselves in its use. If the tool is a programming language, this influence is - whether we like it or not - an influence on our thinking habits.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Just out of curiosity, does this sound anything at all to you like the frequent admonitions to learn a &amp;ldquo;language of the year (LOTY)?&amp;rdquo; Of course that isn&#39;t the context of EWD&#39;s quote, but the underlying principle remains the same. Almost universally accompanying that admonition is a statement along the lines of &amp;ldquo;even if you never use it in your day job, it will affect THE WAY YOU THINK about programming during your day job.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;hellip;a carefully chosen separation of concerns is essential for the design of in all respects, high quality programs&amp;hellip;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Does &amp;ldquo;loosely coupled, highly cohesive, modular architecture&amp;rdquo; come to mind?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;hellip;the fact that programming languages could be used as a vehicle for instructing existing automatic computers, has for a long time been regarded as their most important property&amp;hellip;we shall try to redress the balance, and we shall do so by regarding the fact that our algorithms could actually be carried out be a computer as a lucky accidental circumstance that need not occupy a central position in our considerations&amp;hellip;I view a programming language primarily as a vehicle for the description of (potentially highly sophisticated) abstract mechanisms.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I hear so much of what is bandied about today as &amp;ldquo;new&amp;rdquo; embodied in this quote. The calls to liberate programming from its &amp;ldquo;C&amp;rdquo; roots by banishing primitives, because hey, primitives are only their to keep &amp;ldquo;Java from being too slow!&amp;rdquo; The calls to favor &amp;ldquo;essence over ceremony&amp;rdquo; in language design by eliminating boilerplate code in favor of sensible defaults that clear away the noise from the algorithmic intent that we&#39;re trying to communicate. The constant reminders that it&#39;s more important for our code to be readable to humans, not to computers, because that&#39;s what compilers are for.&lt;/p&gt;
&lt;p&gt;What&#39;s the point? The point is that most, if not all, of the ideas that are &amp;ldquo;new&amp;rdquo; today are simply restatements of past ideas in a different context. A wise man, one much wiser than I, once said &amp;ldquo;&amp;hellip;there is nothing new under the sun&amp;rdquo; (Ecclesiastes 1:9). Edsgar W. Dijkstra passed from this earth in 2002, but his ideas live on, and they are very much applicable to software developers today. There are may others like him: Donald Knuth, John McCarthy, Alan Turing, David Gries - some dead, some alive, but all giants upon whose shoulders we stand. We would do well to consider their words.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lotytoty for 2010</title>
      <link>https://www.mattstine.com/2010/01/06/lotytoty-for-2010/</link>
      <pubDate>Wed, 06 Jan 2010 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2010/01/06/lotytoty-for-2010/</guid>
      <description>&lt;p&gt;If anyone&#39;s interested, here&#39;s a clue as to what I&#39;m working on in 2010:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2010/05/helloiphone.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>securing grails plugin artifacts with filters</title>
      <link>https://www.mattstine.com/2009/11/10/securing-grails-plugin-artifacts-with-filters/</link>
      <pubDate>Tue, 10 Nov 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/11/10/securing-grails-plugin-artifacts-with-filters/</guid>
      <description>&lt;p&gt;So you&#39;ve just installed the handy dandy Spring Security plugin (&lt;a href=&#34;http://grails.org/plugin/acegi&#34;&gt;http://grails.org/plugin/acegi&lt;/a&gt;), which makes it incredibly easy to secure entire Grails controllers and/or controller actions with annotations, such as the following:&lt;/p&gt;
&lt;p&gt;This is enabled by turning on controller annotations in your SecurityConfig.groovy file:&lt;/p&gt;
&lt;p&gt;So all is now good in our project. We can secure either controllers or actions with annotations, enabling us to declaratively setup security side-by-side with the code that we&#39;re securing in a very straightforward manner. You can continue developing your Grails applications with glee, fully assured that security is no longer an issue. But wait, one day you decide to install one of the many useful Grails plugins that add controller artifacts to your application. Lo and behold, you have no way to secure those controllers! Of course, you could descend into $USER_HOME/.grails/$GRAILS_VERSION/projects/projectName/plugins/pluginX and hack the source code for your individual instance of the plugin. This ought to work, but you&#39;re now rather constrained in that every time you update the plugin you&#39;ll need to remember to go make this manual change. That doesn&#39;t sound very agile at all, does it? OK, so how about forking the plugin? This is a little bit better, but now you have the burden of merging changes from the global plugin repository to yours every time a new release happens. This is better, but still a bit cumbersome. How about becoming a committer and adding it to the global source? Of course not. Not everyone will want to secure their plugins the same way you do, and you&#39;ve just introduced a rather unnecessary dependency on the Spring Security plugin. I say all this in an attempt to paint a grim picture. In reality, we&#39;re actually in very good shape. Grails Filters to the rescue!&lt;/p&gt;
&lt;p&gt;All that you need to do is create a Grails filter that will match requests to the plugin artifact in question and then delegate to Spring Security for authorization. If they are authorized, you simply return true. If not, you can direct them to your login screen. It&#39;s this simple:&lt;/p&gt;
&lt;p&gt;As you can see here, I&#39;ve secured both the Blurb plugin and the Settings plugin in this manner by requiring that the logged in user be in the ROLE_ADMIN role. Now as Glen Smith would say, that&#39;s a snack!&lt;/p&gt;
&lt;p&gt;_&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&#34;http://burtbeckwith.com/blog/&#34;&gt;Burt Beckwith&lt;/a&gt; enlightened me to an approach that will get this done without the use of filters that will also direct you to the requested URL after login rather than the main page. Unfortunately I&#39;ve never been able to track this down before. Just add the following to SecurityConfig.groovy:_&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pomodoro the first iteration</title>
      <link>https://www.mattstine.com/2009/11/04/pomodoro-the-first-iteration/</link>
      <pubDate>Wed, 04 Nov 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/11/04/pomodoro-the-first-iteration/</guid>
      <description>&lt;p&gt;I spent about an hour last night reading through Francesco Cirillo&#39;s e-book &lt;em&gt;The Pomodoro Technique&lt;/em&gt;. Up until this point I knew the basics of the technique, but I really wanted to drill down and get the details. I won&#39;t explain those here - visit &lt;a href=&#34;http://www.pomodorotechnique.com/&#34;&gt;&lt;a href=&#34;http://www.pomodorotechnique.com/&#34;&gt;http://www.pomodorotechnique.com/&lt;/a&gt;&lt;/a&gt; to get the lowdown. What I want to talk about is my experience applying the technique this morning.&lt;/p&gt;
&lt;p&gt;I managed to complete two Pomodoros. Each of the Pomodoros was filled with internal interruptions of various kinds. One of the first things that I observed was something that I already knew from yesterday&#39;s TADD post: I am definitely not used to focusing on one distinct task for any prolonged length of time. My mind was constantly bouncing around from idea to idea, almost as if my R-mode had a &amp;ldquo;memory leak.&amp;rdquo; My first Pomodoro was primarily a reading task - I used it for my daily Bible reading and meditation. This part of my day brings it&#39;s focus challenges anyway, as I&#39;m not doing anything tactile. I find its much easier to focus when I&#39;m typing or writing something. The Pomodoro offered no relief from this, save a plan for dealing with the interruptions as they came up. First, note down that one happened with an apostrophe, and second, write the todo item or idea down on my inventory. This definitely helped to refocus my mind on the work at hand, but I still wish I could find a way to prevent those streamer thoughts from landing in the first place.&lt;/p&gt;
&lt;p&gt;The second thing that I observed was that my workspace is not at all setup to encourage focus. In recent months I&#39;ve stopped using task-focused desktops in OS X, something that Neil Ford recommends in &lt;em&gt;The Productive Programmer&lt;/em&gt;. I was reminded of this later in the day today reading &lt;a href=&#34;http://memeagora.blogspot.com/2009/11/productivity-pron.html&#34;&gt;his latest blog entry&lt;/a&gt;. I think it would be a good idea to use my first Pomodoro of the day to setup task-based desktops for each of the tasks on my TODO list. I could fire up all of the programs necessary and drop them on to a space. Since a lot of my work is focused on web-based applications, I think I&#39;ll probably use Fluid (&lt;a href=&#34;http://fluidapp.com/&#34;&gt;&lt;a href=&#34;http://fluidapp.com/&#34;&gt;http://fluidapp.com/&lt;/a&gt;&lt;/a&gt;) to create site specific browsers for the web applications that I need for each task. Another thing that I need to do is turn off the ringer on my phones and the new message notifications on Entourage. One tool that I did already have in my arsenal is Doodim, which blacks out everything except for the currently focused window on OS X. The only problem with Doodim (&lt;a href=&#34;http://www.lachoseinteractive.net/en/products/doodim/&#34;&gt;&lt;a href=&#34;http://www.lachoseinteractive.net/en/products/doodim/&#34;&gt;http://www.lachoseinteractive.net/en/products/doodim/&lt;/a&gt;&lt;/a&gt;) is that it doesn&#39;t work with external screens, so only my MacBook Pro&#39;s screen gets the benefits. I counteracted this by making sure that the window I was actively using was on the external screen and maximized, but this won&#39;t work for some tasks during which I might have multiple small windows to interact with.&lt;/p&gt;
&lt;p&gt;The final thing that I observed is that I still definitely live in an interruption-based work environment. My third attempt to complete a Pomodoro was repeated three times, and none of these times did I make it without having to stop and actively handle an external interruption. The difference? My office door was open. My first two Pomodoros were completed with the office door closed and my &amp;ldquo;Ssshhh&amp;hellip;Genius at work!&amp;rdquo; sign on the door. This is going to be a tough one to handle. I don&#39;t want to keep my office door closed all day, for more reasons than one. First, I don&#39;t want to seem completely unapproachable. I&#39;m a manager these days, and a huge part of my job is being available for people. For me, some interruptions will always be OK. But how can I sort those out prior to them happening? This is something I&#39;ll be stewing on over the next couple of days. Second, my office turns into an absolute OVEN when the door is closed for too long. We have a really strange HVAC system that completely overreacts to small changes in the temperature. Unfortunately, it always seems to think I need to be slow cooked. ::SIGH::&lt;/p&gt;
&lt;p&gt;So, there you have it. I&#39;ve learned a lot - I observed quite a view things about my work patterns and my environment, and will be working over the next few days to make changes to both to support better focus. If you have any comments or suggestions, please feel free to comment. Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hi im matt stine and i have technology add</title>
      <link>https://www.mattstine.com/2009/11/03/hi-im-matt-stine-and-i-have-technology-add/</link>
      <pubDate>Tue, 03 Nov 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/11/03/hi-im-matt-stine-and-i-have-technology-add/</guid>
      <description>&lt;p&gt;Yes, it&#39;s true. I came to the realization that there is such a thing as TADD&amp;hellip;technology attention deficit disorder. Ironically, I came to this realization while reading a sample chapter from the upcoming book from the Prags, &lt;em&gt;Pomodoro Technique Illustrated: Can You Focus - Really Focus - for 25 Minutes?&lt;/em&gt; You see, it&#39;s Pragmatic Programmer Writing Month (&lt;a href=&#34;http://praglife.typepad.com/pragmatic_life/2009/10/prag-pro-wri-mo.html&#34;&gt;follow the trail that begins here&lt;/a&gt;), and I finally set aside an hour today to begin writing. At present, I just can&#39;t make up my mind what book topic I want to focus on. I have the following in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Polyglot Programming&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Agile Testing Strategies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Groovy/Grails Automated Testing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functional Programming in a JVM World&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or, perhaps, a topic that hasn&#39;t churned up from my R-mode brain yet&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, I have decided that I want to write an article detailing my development of &lt;a href=&#34;http://www.duckduckgoosedesigns.com&#34;&gt;&lt;a href=&#34;http://www.duckduckgoosedesigns.com&#34;&gt;http://www.duckduckgoosedesigns.com&lt;/a&gt;&lt;/a&gt; in Grails, an article that I hope will appear in an upcoming issue of Groovymag. It seemed like a good idea - write on something that I know very well and that I think could be helpful to others. Not only that, but it just might prime the writing pump for a bigger work like, maybe, a book! So, as I started writing, it occurred to me that I needed to let WebDevPub know that the entire source code for the online store was available at GitHub, so I jumped into the article submission site and added a note. This reminded me that I had not yet applied license headers to my source files, so I jumped into IDEA to use the Copyright Plugin to do so. It was at this point that I figured out that the Copyright Plugin does not support Groovy or GSP files, so I decided it would be a good idea to write a Grails script that would automatically do this. In the process, I decided to jump over to TweetDeck and let the world know of my intentions. It was at this point that I realized I had not yet followed @praglife on Twitter, so I fired that off. Realizing I wasn&#39;t quite sure of the @praglife Twitter handle, I jumped over to the blog, and while looking for it noticed the news item about the Pomodoro book. I clicked on it and downloaded the sample chapter on interruptions. While scanning through and reading about internal interruptions, I realized that I was in the middle of one. My simple task - to focus on writing an article, had been interrupted by a stream of internal interruptions that led me to reading about internal interruptions. I have TADD. I&#39;m out of denial, so what&#39;s the next step? ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>thoughts so far on springone2gx</title>
      <link>https://www.mattstine.com/2009/10/21/thoughts-so-far-on-springone2gx/</link>
      <pubDate>Wed, 21 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/10/21/thoughts-so-far-on-springone2gx/</guid>
      <description>&lt;p&gt;It&#39;s now Wednesday night, day 2.5 of SpringOne/2GX in New Orleans, LA. Normally I like to blog about each session that I attend when I make it to SpringOne, but as this has been my first year here as a speaker, I&#39;ve spent practically all of my free time tweaking my presentation and demos. So, I wanted to summarize my reflections thus far before I forget them.&lt;/p&gt;
&lt;p&gt;First of all, my talk went off fantastically. I presented &lt;a href=&#34;http://www.springone2gx.com/conference/new_orleans/2009/10/session?id=15651&#34;&gt;Case Study: SRM 2.0 - A next generation shared resource management system built on SpringSource dm Server&lt;/a&gt;, which summarized our experiences using OSGi and SpringSource dm Server as the foundation for the enterprise application that we&#39;re about to release into production. There was a small but very enthusiastic crowd, and I fielded quite a few questions both during the talk and immediately following. I was very encouraged to see nothing but green in the evaluation bucket at the back of the room, and &lt;a href=&#34;http://twitter.com/sudr/status/5056103019&#34;&gt;this tweet&lt;/a&gt; was the icing on the cake.&lt;/p&gt;
&lt;p&gt;Second, I&#39;ve been extremely impressed with the venue. After attending the last two years in Hollywood, Florida, I can&#39;t help but think that this move was one of the best that was made. The Roosevelt Hotel is very charming, and the banquet staff here is top notch. I&#39;ve attended quite a few conferences, and the food here is definitely some of the best I&#39;ve ever had. Not only that, but there is an entirely different energy level here in New Orleans - just hearing the live jazz piping into my hotel room every night from the French Quarter below is very nice.&lt;/p&gt;
&lt;p&gt;Third, the combination of SpringOne and 2GX, the Groovy and Grails conference, into one event has topped my expectations. Being able to bounce back and forth between two of my favorite technologies has been awesome. Getting the latest scoop on Spring 3.0 and diving into Griffon during the same morning was great. Not only that, but getting to interact with my tweeps from SpringSource and the G3 community during the same week has been a blast. My only regret is that I didn&#39;t have my talk more finalized before the event so that I could spend more time with the hallway conversations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick reviews of the sessions that I&#39;ve attended thus far:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What&#39;s New in Spring 3.0 (Arjen Poutsma) - This was a great overview of the new and notable in Spring 3.0. I was very excited to see just how simple and powerful the REST support that is now built directly into Spring MVC will be. The only letdown was that Arjen didn&#39;t dye his hair this year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intro to Griffon: Grails for RIAs (Danno Ferrin) - This was my first opportunity to hear a full blown talk on Griffon. Danno did a fantastic job walking us through how to use Griffon to develop a simple weather dashboard widget. I absolutely can&#39;t wait to write my first Griffon app. Now that my session is done, I may start tonight!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grails Internals (Jeff Brown) - Jeff Brown is live coding at its best. I love his ZERO slides approach, and I learned quite a bit about the different metaprogramming aspects used to deliver Grails functionality. I&#39;m more than inspired to contribute to plugins at a higher level now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MOPing up Groovy (Venkat Subramaniam) - Whether you&#39;re interested in the topic or not, one must attend AT LEAST one Venkat talk whenever he&#39;s in the same town as you. This talk was mostly focused around the metaprogramming topics that Venkat covered in &lt;em&gt;Programming Groovy&lt;/em&gt;, but seasoned with Venkat&#39;s unique blend of off the cuff humor. From no one else will you hear, &amp;ldquo;We don&#39;t want to duplicate code&amp;hellip;at least not in public.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grails for the Enterprise (Robert Fischer) - I must admit, I didn&#39;t really NEED to go to this talk. I was mainly interested in checking out Robert as a speaker and hearing his strategies for driving Grails adoption. I liked his approach, and I really enjoyed his live coding session at the back end of the talk. He has quite a bit of energy and created a very rich interaction with the crowd.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functional Groovy (Hamlet D&#39;Arcy) - This was by far the best session of the conference for me thus far. Hamlet walked us through the 10 commandments of functional programming using Groovy as the syntax for exploration, sprinkled in a healthy amount of &lt;em&gt;The Little Schemer&lt;/em&gt;, explained that using a non-functional language to learn functional programming was like learning OO in Cobol, and found a way to tie in &lt;em&gt;Zen and the Art of Motorcycle Maintenance&lt;/em&gt;, Plato, Aristotle, elephants, and ducks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What&#39;s new in dm Server 2.0 (Ben Hale) - Ben walked us through the new and notable in dm Server 2.0. A great app server has gotten even better!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there you have it. I&#39;m looking forward to a nice relaxing day tomorrow (now that I don&#39;t have demos and slides to tweak all day) and a quick flight home to rejoin my wife and kids. See you tomorrow Grant and the girls!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>making java groovier with lambdaj</title>
      <link>https://www.mattstine.com/2009/10/09/making-java-groovier-with-lambdaj/</link>
      <pubDate>Fri, 09 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/10/09/making-java-groovier-with-lambdaj/</guid>
      <description>&lt;p&gt;I spent the better part of yesterday tracing my way through the codebase for a large-scale enterprise application that my team is building right now, and I happened upon the following piece of code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//...imports excluded for clarity
public class BusinessActivityBinMetaClassHelper {
//...
   public static List&amp;lt;Long&amp;gt; getSrmMetaClassIdListJava(List&amp;lt;BusinessActivityBinMetaClass&amp;gt; businessActivityBinMetaClassList) {
      List&amp;lt;Long&amp;gt; srmMetaClassIdList = new ArrayList&amp;lt;Long?();

      if(businessActivityBinMetaClassList != null) {
         for(BusinessActivityBinMetaClass businessActivityBinMetaClass : businessActivityBinMetaClassList) {
             if(businessActivityBinMetaClass.getSrmMetaClass() != null &amp;amp;&amp;amp; businessActivityBinMetaClass.getSrmMetaClass().getSrmMetaClassId() != null) {
               srmMetaClassIdList.add
                  (businessActivityBinMetaClass.getSrmMetaClass().getSrmMetaClassId());
            }
         }
      }

      return srmMetaClassIdList;
   }
//...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As I read this code, I thought &amp;ldquo;This just SCREAMS a need for Groovy&#39;s closure iterators.&amp;rdquo; So, last night I quickly hacked out fully-equivalent Groovy version of the code:&lt;/p&gt;
&lt;p&gt;{% codeblock lang:java %}
class GroovyExample {&lt;/p&gt;
&lt;p&gt;static def getSrmMetaClassIdListGroovy(def businessActivityBinMetaClassList) {
businessActivityBinMetaClassList?.collect { it?.srmMetaClass?.srmMetaClassId }.findAll { it != null } ?: new ArrayList&lt;Long&gt;();
}
}
{% endcodeblock %}&lt;/p&gt;
&lt;p&gt;Whew! Much nicer. What did we get out of this? Well&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Groovy&#39;s dynamic typing cleaned up all of the unnecessary type declarations - the only static typing is where we return an empty ArrayList of Longs if the argument to our method is null (a bit of odd behavior, but required to make this code equivalent to the parent Java code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We were saved 4 painful null checks by the use of Groovy&#39;s null safe dereferencing operator (?.) and the simplified ternary operator otherwise affectionately known as the &amp;ldquo;Elvis Operator&amp;rdquo; (?:).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using Groovy&#39;s collect method, we were able to transform the original list into a list containing Long values by passing in a closure that pulls out the property value of interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because we&#39;re using null safe dereferencing, we are actually inserting nulls into our list if any of the dereferencing fails. Therefore, Groovy&#39;s findAll Collection filtering method comes to the rescue. We simply provide it with a closure that returns true for all of the values we want to keep - in this case, &amp;ldquo;it != null.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perhaps most importantly, we&#39;ve shorted our code from 11 lines (including whitespace lines for clarity) to ONE LINE that much more clearly expresses the intent of the code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Great - why don&#39;t we just rewrite the entire application is Groovy? Well, hold on just a minute. At the time we started this application, as much as some of us loved Groovy, we just didn&#39;t have enough Groovy mindshare to go there yet. On top of that, we were already experimenting with several new architectural ideas and technologies, and Groovy would have added yet one more risk to the puzzle. I say all this to acknowledge that sometimes you just can&#39;t move to another language for one reason or another, regardless of how attractive its features may be.&lt;/p&gt;
&lt;p&gt;But let&#39;s take a queue from the &lt;em&gt;Pragmatic Programmer&lt;/em&gt; and explore the LOTY (Language of the Year) concept one more time. One of the reasons that you&#39;re encouraged to learn new languages is to change the way you program in your main language. You may learn Groovy, Scala, Clojure, Ruby, etc., etc., etc. and never use them in your day job - and yet the experience of coding in a new language with new constructs and idioms will necessarily change the way you THINK about programming in every other language.&lt;/p&gt;
&lt;p&gt;So, let&#39;s think about the possibility of coding something that is much more similar to the Groovy version and yet stick with regular Java code. Fortunately, there are several libraries out there that bring much of the flavor and power of Groovy&#39;s closure iterators to Java. I&#39;d like to focus in on one of them, LambdaJ (&lt;a href=&#34;http://code.google.com/p/lambdaj/&#34;&gt;&lt;a href=&#34;http://code.google.com/p/lambdaj/&#34;&gt;http://code.google.com/p/lambdaj/&lt;/a&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;LambdaJ provides constructs that allow us to &amp;ldquo;&amp;hellip;manipulate collections in a pseudo-functional and statically typed way.&amp;rdquo; Let&#39;s take a look at this example implementing using LambdaJ:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//...some imports excluded for clarity
import ch.lambdaj.function.convert.Converter
import static ch.lambdaj.Lambda.*
import static org.hamcrest.Matchers.*

public class BusinessActivityBinMetaClassHelper {
//...
   public static List&amp;lt;Long&amp;gt; getSrmMetaClassIdListJava(List&amp;lt;BusinessActivityBinMetaClass&amp;gt; businessActivityBinMetaClassList) {
      return (businessActivityBinMetaClassList != null) ? filter(notNullValue(),convert(businessActivityBinMetaClassList, new IdExtractor())) : new ArrayList&amp;lt;Long&amp;gt;();
   }

   class IdExtractor implements Converter&amp;lt;BusinessActivityBinMetaClass,Long&amp;gt; {
	Long convert(BusinessActivityBinMetaClass from) {
	   if (from.getSrmMetaClass() != null &amp;amp;&amp;amp; from.getSrmMetaClass().getSrmMetaClassId() != null) {
	      return from.getSrmMetaClass().getSrmMetaClassId();
	   }
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not quite as nice as the Groovy code - we got A LOT out of the null-safe dereference and Elvis operators. However, our overall intent is still a bit clearer. Let&#39;s analyze:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First we need to implement one of LambdaJ&#39;s Converters. A Converter is nothing more than a generic Interface that defines one method: T convert(F from), where F is the type we&#39;re converting from and T is the type we&#39;re converting to. In this case, we want to convert an object of type BusinessActivityBinMetaClass to an object of type Long. Our implementation determines how this conversion takes place, in this case by extracting the id property from its child.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, after statically importing the methods of ch.lambdaj.Lambda, we call the convert method, passing it our List and our newly implemented Converter. This gives us the equivalent of Groovy&#39;s collect method, with the Converter taking the place of the closure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We&#39;re still shoving nulls into our List with this implementation, so we further filter our list using LambdaJ&#39;s &amp;ldquo;filter&amp;rdquo; method, passing it the list returned by &amp;ldquo;filter,&amp;rdquo; and a &lt;a href=&#34;http://code.google.com/p/hamcrest/&#34;&gt;Hamcrest&lt;/a&gt; matcher that returns only notNullValue()&amp;lsquo;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, we use our old friend the ternary operator to return the empty ArrayList of Long values if our method argument is null.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don&#39;t count the Converter implementation, we&#39;ve gotten ourselves down to 2 lines of code (1 if you don&#39;t mind long lines). In this case I implemented IdExtractor as a named inner class - you could do this with an anonymous inner class and it would look a lot more like a closure, but the added noise of all of the null checking made the undesirable for me. Perhaps if your code has less noise (or guarantees that values aren&#39;t null), that would be a better approach.&lt;/p&gt;
&lt;p&gt;Another alternative is to make IdExtractor a top-level class that, if general enough, could be reused throughout the codebase. The benefit of this is that you now have a nice code unit rather than a battery of static methods in a utility class, and unit testing becomes much more clean and elegant.&lt;/p&gt;
&lt;p&gt;So, we&#39;ve still made some progress and made our code a bit more Groovy. I encourage you to explore LambdaJ&#39;s feature set and see how it might make your code a bit more concise with clearer intent. And just to stir up a little controversy, look what would have happened in Java 7 had the null safe dereference and Elvis operator&#39;s made &lt;a href=&#34;http://blogs.sun.com/darcy/entry/project_coin_final_five&#34;&gt;the Project Coin cut&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//...some imports excluded for clarity
import ch.lambdaj.function.convert.Converter
import static ch.lambdaj.Lambda.*
import static org.hamcrest.Matchers.*

public class BusinessActivityBinMetaClassHelper {
//...
   public static List&amp;lt;Long&amp;gt; getSrmMetaClassIdListLambdaJ(List&amp;lt;BusinessActivityBinMetaClass&amp;gt; businessActivityBinMetaClassList) {
      return filter(notNullValue(),convert(businessActivityBinMetaClassList,
         new Converter&amp;lt;BusinessActivityBinMetaClass,Long&amp;gt; {
            Long apply(BusinessActivityBinMetaClass from) { return from?.getSrmMetaClass()?.getSrmMetaClassId()}
         })) ?: new ArrayList&amp;lt;Long&amp;gt;();
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nice, huh? ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>test driven development worked for me</title>
      <link>https://www.mattstine.com/2009/10/03/test-driven-development-worked-for-me/</link>
      <pubDate>Sat, 03 Oct 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/10/03/test-driven-development-worked-for-me/</guid>
      <description>&lt;p&gt;Our team got to spend a few days with Jared Richardson this week, talking tech leadership, agile, and automated testing. At some point during the opening day&#39;s discussion, I related the story of how I initially got into Test Driven Development (TDD) and how it seriously ramped up my productivity and decreased my defect count.&lt;/p&gt;
&lt;p&gt;In early 2003, we were slowly dragging through development of the first version of our Shared Resource Management system. At the time our development model looked a little something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Code until you run into an unimplemented dependency;&lt;/li&gt;
&lt;li&gt;Repeat until one of the dependencies is checked in;&lt;/li&gt;
&lt;li&gt;Big Bang Integration!&lt;/li&gt;
&lt;li&gt;Debug, debug, debug&amp;hellip;&lt;/li&gt;
&lt;li&gt;Repeat until something pseudo-demoable is ready.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you might imagine, this wasn&#39;t a very productive way to work, but unfortunately it was all most of us knew. At the time I thought we really needed to improve on our testing so that we could eliminate a lot of the defects that at the time I didn&#39;t realize were being caused by our development model. I asked my boss if I could start a QA effort and not too much later found the XP/Agile Universe conference that was held in August 2003. It was my hope that we could learn about how to properly test/QA our software there as there seemed to be a lot of talks about this &amp;ldquo;TDD&amp;rdquo; thing. I got approval to attend, and while down there I was immersed in this new culture of Extreme Programming (XP) and Agile.&lt;/p&gt;
&lt;p&gt;At one point I ventured into a room that was setup like what many of us would call a SCRUM/Team room today, where a group of folks were all coding away on a system and making its &amp;ldquo;Fit&amp;rdquo; tests pass. I quickly paired up with a gentleman and we went to work. At some point Brian Marick came over and asked what we were working on. I fumbled through a description of the requirement and he then asked, &amp;ldquo;Well, where&#39;s your test?&amp;rdquo; I said that we didn&#39;t have one, and he then said something that at the time was very profound to me, &amp;ldquo;Well, you can&#39;t write any code until you have a failing test!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I spent most of my time waiting in the airport to return to Memphis reading Uncle Bob&#39;s &amp;ldquo;Agile Software Development: Principles, Patterns, and Practices.&amp;rdquo; Needless to say, I was fired up.&lt;/p&gt;
&lt;p&gt;When I returned to work in the following weeks, I essentially tried two different tactics in parallel to share what I learned with my team.&lt;/p&gt;
&lt;p&gt;First, I practiced what Jared calls &amp;ldquo;2x4 Development,&amp;rdquo; or, beating your team in the shins with a 2x4 until they start doing TDD, pair programming, continuous integration, etc. I even delivered my own version of the agile manifesto to the entire department, and the most profound comments I got out of that were &amp;ldquo;I can&#39;t ever imagine us paying two developers to sit at the same computer and work on the same code,&amp;rdquo; and &amp;ldquo;Well, who&#39;s going to test the test code?!?!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Needless to say, this didn&#39;t work very well. My second tactic was much more guerrilla in nature. I told the guy that I was working with that I didn&#39;t care what he did with the rest of his time, as long as he checked in his interfaces before he started to code. Now I had something to mock! I then proceeded to TDD all of my code. I advertised my productivity in terms of test cases passing with a little counter on my whiteboard. Development was fun again, as I could get instant feedback on how my code was working and I knew that it was interacting properly with its dependencies. Sure enough, when those big bang integrations happened, my code rarely seemed to be the source of the defects, and I quickly found myself getting pulled into other parts of the code to help develop since I had already gotten my typical assignment finished!&lt;/p&gt;
&lt;p&gt;We delivered the section of the system that I developed using TDD much faster than any part that I had worked on up to that point (no hard numbers, but I have a pretty good memory of that time), and in addition, I wrote the CLEANEST code I had ever written up to that point.&lt;/p&gt;
&lt;p&gt;So, while Jared wouldn&#39;t recommend you try TDD if the rest of your team isn&#39;t on board - you&#39;re never going to get someone who doesn&#39;t care about tests to fix one that they broke - this guerrilla tactic worked well for me and got me some recognition as a guy who could write good clean code fast! If I could go back to that point, I think I would have tried &lt;a href=&#34;http://www.jaredrichardson.net/blog/2005/11/03/&#34;&gt;Defect Driven Testing&lt;/a&gt; first or in addition to my GTDD.&lt;/p&gt;
&lt;p&gt;So, how are you getting your team test infected?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>isabella featured on totally tots</title>
      <link>https://www.mattstine.com/2009/06/25/isabella-featured-on-totally-tots/</link>
      <pubDate>Thu, 25 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/25/isabella-featured-on-totally-tots/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://totallytots.blogspot.com/2009/06/meetisabella.html&#34;&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/06/meet_bella.jpg&#34; alt=&#34;meet_bella&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Isabella, my second oldest daughter, just made the cutoff &lt;a href=&#34;http://totallytots.blogspot.com/2009/06/meetisabella.html&#34;&gt;to be featured&lt;/a&gt; on one of the very popular &amp;ldquo;Mommy Blogs&amp;rdquo; out there, Totally Tots. Way to go Bella!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>javaone brain dump resources from memphis jug meeting</title>
      <link>https://www.mattstine.com/2009/06/19/javaone-brain-dump-resources-from-memphis-jug-meeting/</link>
      <pubDate>Fri, 19 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/19/javaone-brain-dump-resources-from-memphis-jug-meeting/</guid>
      <description>&lt;p&gt;I promised that I would post the links I mentioned in my talk last night at the Memphis JUG&amp;hellip;here they are:&lt;/p&gt;
&lt;p&gt;General Session Replays: &lt;a href=&#34;http://java.sun.com/javaone/2009/general_sessions.jsp&#34;&gt;&lt;a href=&#34;http://java.sun.com/javaone/2009/general_sessions.jsp&#34;&gt;http://java.sun.com/javaone/2009/general_sessions.jsp&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;BlogTalkRadio: &lt;a href=&#34;http://www.blogtalkradio.com/JavaOne&#34;&gt;&lt;a href=&#34;http://www.blogtalkradio.com/JavaOne&#34;&gt;http://www.blogtalkradio.com/JavaOne&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaOne Minute: &lt;a href=&#34;http://channelsun.sun.com/video/channel-you/javaone+minute/23867338001&#34;&gt;&lt;a href=&#34;http://channelsun.sun.com/video/channel-you/javaone+minute/23867338001&#34;&gt;http://channelsun.sun.com/video/channel-you/javaone+minute/23867338001&lt;/a&gt;
&lt;/a&gt;
Technical Sessions 2008-2009: &lt;a href=&#34;http://developers.sun.com/learning/javaoneonline/&#34;&gt;&lt;a href=&#34;http://developers.sun.com/learning/javaoneonline/&#34;&gt;http://developers.sun.com/learning/javaoneonline/&lt;/a&gt;&lt;/a&gt; (Must be SDN Member - FREE!)&lt;/p&gt;
&lt;p&gt;The Da Vinci Machine Project: &lt;a href=&#34;http://openjdk.java.net/projects/mlvm/&#34;&gt;&lt;a href=&#34;http://openjdk.java.net/projects/mlvm/&#34;&gt;http://openjdk.java.net/projects/mlvm/&lt;/a&gt;
&lt;/a&gt;
Groovy: &lt;a href=&#34;http://groovy.codehaus.org&#34;&gt;&lt;a href=&#34;http://groovy.codehaus.org&#34;&gt;http://groovy.codehaus.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java.net Community Corner: &lt;a href=&#34;http://wiki.java.net/bin/view/Javaone/CommunityCorner&#34;&gt;&lt;a href=&#34;http://wiki.java.net/bin/view/Javaone/CommunityCorner&#34;&gt;http://wiki.java.net/bin/view/Javaone/CommunityCorner&lt;/a&gt;
&lt;/a&gt;
JUGS Community: &lt;a href=&#34;http://community.java.net/jugs/&#34;&gt;&lt;a href=&#34;http://community.java.net/jugs/&#34;&gt;http://community.java.net/jugs/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scala: &lt;a href=&#34;http://scala-lang.org&#34;&gt;&lt;a href=&#34;http://scala-lang.org&#34;&gt;http://scala-lang.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SpringSource: &lt;a href=&#34;http://www.springsource.com&#34;&gt;&lt;a href=&#34;http://www.springsource.com&#34;&gt;http://www.springsource.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JUG-USA: &lt;a href=&#34;https://jug-usa.dev.java.net/&#34;&gt;&lt;a href=&#34;https://jug-usa.dev.java.net/&#34;&gt;https://jug-usa.dev.java.net/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenSolaris: &lt;a href=&#34;http://opensolaris.org&#34;&gt;&lt;a href=&#34;http://opensolaris.org&#34;&gt;http://opensolaris.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Neal Ford: &lt;a href=&#34;http://nealford.com&#34;&gt;&lt;a href=&#34;http://nealford.com&#34;&gt;http://nealford.com&lt;/a&gt;&lt;/a&gt; (Can download his slides here)&lt;/p&gt;
&lt;p&gt;Findbugs: &lt;a href=&#34;http://findbugs.sourceforge.net&#34;&gt;&lt;a href=&#34;http://findbugs.sourceforge.net&#34;&gt;http://findbugs.sourceforge.net&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Grails: &lt;a href=&#34;http://grails.org&#34;&gt;&lt;a href=&#34;http://grails.org&#34;&gt;http://grails.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Grails Podcast: &lt;a href=&#34;http://www.grailspodcast.com&#34;&gt;&lt;a href=&#34;http://www.grailspodcast.com&#34;&gt;http://www.grailspodcast.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JavaFX: &lt;a href=&#34;http://javafx.com&#34;&gt;&lt;a href=&#34;http://javafx.com&#34;&gt;http://javafx.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Griffon: &lt;a href=&#34;http://griffon.codehaus.org&#34;&gt;&lt;a href=&#34;http://griffon.codehaus.org&#34;&gt;http://griffon.codehaus.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Java Store: &lt;a href=&#34;http://store.java.com&#34;&gt;&lt;a href=&#34;http://store.java.com&#34;&gt;http://store.java.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jython: &lt;a href=&#34;http://jython.org&#34;&gt;&lt;a href=&#34;http://jython.org&#34;&gt;http://jython.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clojure: &lt;a href=&#34;http://clojure.org&#34;&gt;&lt;a href=&#34;http://clojure.org&#34;&gt;http://clojure.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;JRuby: &lt;a href=&#34;http://jruby.codehaus.org&#34;&gt;&lt;a href=&#34;http://jruby.codehaus.org&#34;&gt;http://jruby.codehaus.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sun Cloud: &lt;a href=&#34;http://cloud.sun.com&#34;&gt;&lt;a href=&#34;http://cloud.sun.com&#34;&gt;http://cloud.sun.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Project Kenai: &lt;a href=&#34;http://kenai.com&#34;&gt;&lt;a href=&#34;http://kenai.com&#34;&gt;http://kenai.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Zembly: &lt;a href=&#34;http://zembly.com&#34;&gt;&lt;a href=&#34;http://zembly.com&#34;&gt;http://zembly.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NetBeans: &lt;a href=&#34;http://netbeans.org&#34;&gt;&lt;a href=&#34;http://netbeans.org&#34;&gt;http://netbeans.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>book review career 20 take control of your life</title>
      <link>https://www.mattstine.com/2009/06/17/book-review-career-20-take-control-of-your-life/</link>
      <pubDate>Wed, 17 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/17/book-review-career-20-take-control-of-your-life/</guid>
      <description>&lt;p&gt;I&#39;ve finally published my review of the EXCELLENT book by Jared Richardson and Matthew Bass at DZone. Check it out here: &lt;a href=&#34;http://books.dzone.com/reviews/career-20-take-control-your&#34;&gt;&lt;a href=&#34;http://books.dzone.com/reviews/career-20-take-control-your&#34;&gt;http://books.dzone.com/reviews/career-20-take-control-your&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>javaone 2009 return of the puzzlers schlock and awe</title>
      <link>https://www.mattstine.com/2009/06/09/javaone-2009-return-of-the-puzzlers-schlock-and-awe/</link>
      <pubDate>Tue, 09 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/09/javaone-2009-return-of-the-puzzlers-schlock-and-awe/</guid>
      <description>&lt;p&gt;For several years now, Neal Gafter (Microsoft) and Joshua Block (Google), have made a habit of presenting various incarnations of this technical session, focused on what they call &amp;ldquo;Java Puzzlers.&amp;rdquo; Java Puzzlers are nothing more than short Java programs with curious behavior. It is a somewhat interactive session, with each puzzler&#39;s code listing followed by a four possible choices (A,B,C,D) to answer the question: &amp;ldquo;What does it print?&amp;rdquo; Neal and Joshua &amp;ldquo;require&amp;rdquo; that every attendee vote for their answer. After the vote, they reveal the correct answer and how to fix the problem. At the end of each problem presentation is the most important part, which is the Java programming principle that is illuminated by the puzzler. These are important tools to carry with you as you go forth a develop your Java code.&lt;/p&gt;
&lt;p&gt;The following is a listing of the problem titles that were presented:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Life&#39;s Persistent Questions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instruments of Torture&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterator Titillator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Searching for the One&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cogito Ergo Sum&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Thread Friendly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When Words Collide&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;m going to spend my time focused on the last puzzler, as it was the one for which I was ABSOLUTELY CERTAIN that I knew the correct answer. Here&#39;s the code listing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class PrintWords {
  public static void main(String[] args) {
    System.out.println(
      Words.FIRST + &amp;quot; &amp;quot; + Words.SECOND + &amp;quot; &amp;quot; + Words.THIRD);
  }
}

public class Words { // Compile PrintWords against this version
  public static final String FIRST  = &amp;quot;the&amp;quot;;
  public static final String SECOND = null;
  public static final String THIRD  = &amp;quot;set&amp;quot;;
}

public class Words { // Run against this version
  public static final String FIRST  = &amp;quot;physics&amp;quot;;
  public static final String SECOND = &amp;quot;chemistry&amp;quot;;
  public static final String THIRD  = &amp;quot;biology&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So here&#39;s the problem. We have two versions of class &amp;ldquo;Words.&amp;rdquo; We compile class &amp;ldquo;PrintWords&amp;rdquo; against the first version and we then run the class against the second version. What does it print out? I used my trusty &amp;ldquo;seasoned Java programmer&amp;rdquo; knowledge to assert that the program would print &amp;ldquo;the null set.&amp;rdquo; Why? Well, any seasoned Java programmer realizes that static final variables (or &amp;ldquo;constant variables&amp;rdquo; - what a curious concept) are inlined by the compiler. So it&#39;s quite obvious that &amp;ldquo;the&amp;rdquo; would be inlined wherever FIRST appears, null would be inlined wherever SECOND appears, and &amp;ldquo;set&amp;rdquo; would be inlined wherever THIRD appears.&lt;/p&gt;
&lt;p&gt;Imagine my frustration when Josh and Neil announced that the program would in fact print &amp;ldquo;the chemistry set.&amp;rdquo; As it turns out, null cannot be inlined! It is not a constant variable. So when we run our Java program, the JVM smartly picks up the non-null value of SECOND that is is able to find in the new version of Words.&lt;/p&gt;
&lt;p&gt;Simply because this one got me, I wanted to highlight it for my readers. The &amp;ldquo;moral&amp;rdquo; of this story is that only primitives and strings can be constant, and that null is not a constant. One should use a constant field ONLY if its value will NEVER change. For final fields whose value may change, they suggest the use of an ident() method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Returns its argument
private static String ident(String s) {
  return s;
}

// None of these fields are constant variables
public class Words {
  public static final String FIRST  = ident(&amp;quot;the&amp;quot;);
  public static final String SECOND = ident(null);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The compile will not inline the call to ident.&lt;/p&gt;
&lt;p&gt;Want more? Pick up a copy of Neal and Josh&#39;s book, &lt;em&gt;Java Puzzlers: Traps, Pitfalls, and Corner Cases!&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jug usa meeting with james gosling at javaone</title>
      <link>https://www.mattstine.com/2009/06/05/jug-usa-meeting-with-james-gosling-at-javaone/</link>
      <pubDate>Fri, 05 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/05/jug-usa-meeting-with-james-gosling-at-javaone/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/06/dscn0912.jpg?w=220&#34; alt=&#34;James Gosling&#34;&gt; On Wednesday morning, JUG-USA was fortunate enough to get about 45 minutes with the &amp;ldquo;Father of Java&amp;rdquo; himself, James Gosling. Each year at JavaOne, Sun distributes registration discount codes to interested JUG&#39;s. The JUG with the most registrations using their code gets this meeting. JUG-USA&#39;s founding allowed us to use a bit of strength in numbers to wrestle this crown from the bigger European JUG&#39;s for the first time that I know of.&lt;/p&gt;
&lt;p&gt;The session was setup as an informal Q&amp;amp;A. I took furious notes on several of the questions that were most interesting to me, and I&#39;ll do my best to collate them into something intelligible here. &lt;em&gt;&lt;strong&gt;Note that where I use quotes it&#39;s mostly to set off his answers&amp;hellip;please don&#39;t take them as direct, but as paraphrases.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first couple of questions surrounded web buzz. James sees Web 2.0 as &amp;ldquo;hype for folks who want to sell their books.&amp;rdquo; When asked about the semantic web, he says his feelings are mostly positive, but maybe its an answer searching for a question. He feels that some parts of it will never perform.&lt;/p&gt;
&lt;p&gt;When asked about Scala, I was pleased to hear him say, &amp;ldquo;I like Scala a lot. They&#39;re doing some pretty nice stuff.&amp;rdquo; He talked about how functional languages lend themselves to proving properties of programs, which can then lead to automatic decomposition onto multiprocessor systems. He wishes that the Scala guys would focus more on this aspect. He also said that he fears that Scala is almost going down the Perl route of making things &amp;ldquo;too concise&amp;rdquo; and that it&#39;s still awfully hard for many programmers to &amp;ldquo;get&amp;rdquo; the functional stuff.&lt;/p&gt;
&lt;p&gt;The next question was a rather predictable one - &amp;ldquo;James, now that you have the benefit of 14 years of experience with the Java language, is there anything you would have done differently?&amp;rdquo; Funny thing was the first thing out of his mouth was that the current AWT event model would have been one of the first things to go. Generics and closures were things he quickly mentioned that he wanted to have done, but he also said that there was quite a bit of arguing within the Java team about polishing for years vs. shipping the language. James said he felt like there was a certain window of opportunity out there that they needed to ship the language within to be successful (and it looks like they hit it). Continuing on down the list, James mentioned Eiffel-style precondtions and postconditions and type inferencing. He explained that the entire type system was designed to make C programmers comfortable, and at the time that was clearly the right decision. He state that at this point, the C/C++ comfort factor counts for nothing, and remarked that the casting syntax in Java is just &amp;ldquo;dumb.&amp;rdquo; A follow-up question surrounded whether or not primitives should be a part of the language. James called this a hard problem, asserting that a &amp;ldquo;uniform type model can lead to bumpy behavior or bad performance.&amp;rdquo; He said that the Scala specification gets around this with a dual object hierarchy (I need to look this up to see what he means.). He continued to talk about the definition of equality vs. identity, explaining that primitives can&#39;t have identity; in fact, they may never exist except as a figment of the compilers imagination, optimized away (my notes are fuzzy on this&amp;hellip;when I get the recording I&#39;ll clean this up).&lt;/p&gt;
&lt;p&gt;The next question surrounded a statement that one attendee of the recent Google I/O conference heard, that threads are &amp;ldquo;deprecated&amp;rdquo; as a concurrency model. James immediately retorted that concurrency has very many ideas around it, and that it has been an active Ph.D. thesis generator for 30+ years. He mentioned competing models such as Actors in Scala and Erlang, and Communicating Sequential Processes (CSP) process algebra from Occam. He asserted that with CSP most people typically don&#39;t &amp;ldquo;think that way very well. People with Math degrees think it&#39;s cool, but everybody else is kind of like&amp;hellip;huh?&amp;rdquo; He stated that no data sharing between threads makes a lot of problems go away, but that often times casting problems that way can be intractable. A big quotable: &amp;ldquo;All of the different threading paradigms feel to me like whack-a-mole.&amp;rdquo; He closed the concurrency question by mentioning Guy Steele&#39;s work on Fortress, where they are doing automatic decomposition from functional constructs into multiple threads of execution, making all of this issue transparent to the programmer.&lt;/p&gt;
&lt;p&gt;Since this is getting pretty long, I&#39;ll mention that James says he knows that Larry Ellison, Oracle CEO (and Sun &amp;ldquo;suitor&amp;rdquo;) has downloaded JavaFX and personally written apps with it, saying it is &amp;ldquo;pretty darn tasty!&amp;rdquo; (Again, don&#39;t take this as quoted&amp;hellip;it&#39;s definitely paraphrased).&lt;/p&gt;
&lt;p&gt;Other quotables: &amp;ldquo;Android - it&#39;s hard to know what to think about it. It seems like a corner hobby project, chaos looking for a place to happen.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The exception system was DESIGNED to be a complete PITA.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;All-in-all, a great time was had by all. Thanks James for your time, it was definitely fascinating hearing your thoughts on so may different areas of the Java landscape.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/06/jug-usa-gosling-grouppic-900.jpg&#34; alt=&#34;JUG-USA with James Gosling&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>more connecting at javaone 2009</title>
      <link>https://www.mattstine.com/2009/06/04/more-connecting-at-javaone-2009/</link>
      <pubDate>Thu, 04 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/04/more-connecting-at-javaone-2009/</guid>
      <description>&lt;p&gt;I happened to catch &lt;a href=&#34;http://glaforge.free.fr/weblog/&#34;&gt;Guillaume LaForge&#39;s&lt;/a&gt; tweet this morning about a &amp;ldquo;Groovy lunch&amp;rdquo; at JavaOne today. After our JUG-USA meeting with &lt;a href=&#34;http://blogs.sun.com/jag/&#34;&gt;James Gosling&lt;/a&gt;(blog entry on this one to come), I made my way over to the &amp;ldquo;cafeteria&amp;rdquo; and found Guillaume, &lt;a href=&#34;http://jameswilliams.be/blog/entry/index&#34;&gt;James Williams (of the Griffon team)&lt;/a&gt;, and &lt;a href=&#34;http://weblogs.java.net/blog/johnsmart&#34;&gt;John Smart&lt;/a&gt; in exactly the location that Guillaume specified. We were shortly joined by Grails in Action (a.k.a. San Gria) co-author &lt;a href=&#34;http://blogs.bytecode.com.au/glen/&#34;&gt;Glen Smith&lt;/a&gt;. Topics ranged from things we can do better with Groovy/Grails testing, the differences between the Groovy and other dynamic/scripting language communities, Groovy&#39;s victory in the ScriptBowl, and none other than the differences in public transportation between the southeastern US and the Bay Area. I had a great time guys and will see you at the BOF.&lt;/p&gt;
&lt;p&gt;I also finally got the chance to meet &lt;a href=&#34;http://dickwallsblog.blogspot.com/&#34;&gt;Dick Wall&lt;/a&gt; of the &lt;a href=&#34;http://javaposse.com&#34;&gt;Java Posse&lt;/a&gt;. Dick is just as great in person as he has sounded for the past couple of years on the podcast. Unfortunately our chat was ever so brief, focused around the language features Dick would like to see in future versions of Scala. We were quickly ushered over to the Java.net &amp;ldquo;presentation area&amp;rdquo; to participate in &lt;a href=&#34;http://weblogs.java.net/blog/joshy&#34;&gt;Josh Marinacci&#39;s&lt;/a&gt; JavaFX Q&amp;amp;A. Was also good meeting him and seeing the cool new UI controls in FX.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>javaone 2009 script bowl</title>
      <link>https://www.mattstine.com/2009/06/03/javaone-2009-script-bowl/</link>
      <pubDate>Wed, 03 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/03/javaone-2009-script-bowl/</guid>
      <description>&lt;p&gt;The JavaOne 2009 Script Bowl was quite a delight to watch. The players were Jython (Frank Wierzbecki), Groovy (Guillaume LaForge), Clojure (Rich Hickey), Scala (Dick Wall), and JRuby (Thomas Enebo). The event was divided into two rounds:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Demonstrating Language Features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Demonstrating Community Contributions&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each of the players focused on different angles during the language feature round. The Jython focus was squarely on the readability of the language. Frank&#39;s key quote was Python looks an awful lot like &amp;ldquo;executable pseudocode.&amp;rdquo; The Groovy focus was a subset of Guillaume&#39;s &amp;ldquo;What&#39;s new in Groovy 1.6&amp;rdquo; talk, and highlighted the new compile-time metaprogramming/AST transformations. Rich Hickey directly attacked concurrency using Clojure, demonstrating a multi-threaded &amp;ldquo;Life&amp;rdquo; demo that highlighted the power of software transactional memory.&lt;/p&gt;
&lt;p&gt;I really enjoyed Dick&#39;s angle for Scala - demonstrating that most of the Java small language changes contained in Project Coin are already present in the Scala language and very useable! Thomas Enebo went straight for the WOW factor by showing how easily a Ruby DSL can be wrapped around existing Java libraries with JRuby to create a very compelling 3D game.&lt;/p&gt;
&lt;p&gt;Next came the community round. This was actually the most impressive part of the whole session. Frank kicked off the Jython community focus by highlighting an &lt;a href=&#34;http://openendedgroup.com/field/wiki/OverviewBanners2&#34;&gt;interactive &amp;ldquo;art IDE&amp;rdquo; called Field&lt;/a&gt; that drives &lt;a href=&#34;http://processing.org/&#34;&gt;the Processing language&lt;/a&gt;. The chose Jython as the scripting language for the environment. Very neat.&lt;/p&gt;
&lt;p&gt;The Groovy demo was something to behold. Guillaume started off by demonstrating SwingPad, an exploratory IDE for building Swing applications with Groovy. But the real treat was a very impressive Twitter+NASA Worldwind mashup built very concisely using Griffon. I really need to give Griffon a try.&lt;/p&gt;
&lt;p&gt;Rich Hickey demonstrated the power of Clojure to build a data-driven, functional, template based website. It took an existing HTML template (with 0 code) and transformed it using &amp;ldquo;css-like&amp;rdquo; selectors provided by a &lt;a href=&#34;http://github.com/cgrand/enlive/tree/master&#34;&gt;enlive&lt;/a&gt;. Seemed a lot like what you can do with XSLT, but much cleaner.&lt;/p&gt;
&lt;p&gt;Dick demonstrated scouchdb, a Scala library for interacting with CouchDB.&lt;/p&gt;
&lt;p&gt;Thomas&amp;rsquo; focus was on just how big the Ruby community is, from developers, to conferences, to books, to IDE&#39;s, to libraries.&lt;/p&gt;
&lt;p&gt;At the end of the session, the winner was decided by crowd noise, with Groovy winning the day and Scala coming in second. My take home from this session is that really all of these languages bring something very interesting and powerful to the table, and I hope all of them continue to succeed. Great job everyone!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jug leadership lessons learned javaone javanet community corner podcast</title>
      <link>https://www.mattstine.com/2009/06/03/jug-leadership-lessons-learned-javaone-javanet-community-corner-podcast/</link>
      <pubDate>Wed, 03 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/03/jug-leadership-lessons-learned-javaone-javanet-community-corner-podcast/</guid>
      <description>&lt;p&gt;Here&#39;s the link to my slides from my podcast Wednesday morning from the Java.net Community Corner: &lt;a href=&#34;http://www.mattstine.com/wp-content/JUGLeadershipLessonsLearned.pdf&#34;&gt;Download PDF&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>java technology on google app engine communityone 2009 lightning talk</title>
      <link>https://www.mattstine.com/2009/06/02/java-technology-on-google-app-engine-communityone-2009-lightning-talk/</link>
      <pubDate>Tue, 02 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/02/java-technology-on-google-app-engine-communityone-2009-lightning-talk/</guid>
      <description>&lt;p&gt;My second lightning talk at Community One West 2009 revolved around the still relatively recent announcement &lt;a href=&#34;http://code.google.com/appengine/docs/java/overview.html&#34;&gt;that Java is now supported on Google&#39;s App Engine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What exactly is &lt;a href=&#34;http://code.google.com/appengine&#34;&gt;Google App Engine&lt;/a&gt;? It&#39;s none other than a way that you can run your Java technology-based applications on Google&#39;s massive infrastructure.&lt;/p&gt;
&lt;p&gt;As far as the &amp;ldquo;Geekxecutive Summary,&amp;rdquo; Google has provided:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/runtime.html&#34;&gt;A Java 6 Virtual Machine&lt;/a&gt; with a &lt;a href=&#34;http://code.google.com/appengine/docs/java/jrewhitelist.html&#34;&gt;Class Whitelist&lt;/a&gt;. Not all classes in the standard JDK library are available. A notable missing member is the java.awt.* library, so if you&#39;re using that for image processing, find an alternative (see one later) before porting to the App Engine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Java Servlet Standard by way of the &lt;a href=&#34;http://www.mortbay.org/jetty/&#34;&gt;Jetty container&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/runtime.html#The_Sandbox&#34;&gt;A secured sandbox environment&lt;/a&gt;, meaning 1) no spawned threads; 2) no arbitrary socket connections (you can use HTTP/HTTPS, see below); 3) No writing to the local filesystem - makes sense because you don&#39;t know where you are on any given request.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several services are provided to you by Google as a Java developer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/datastore/&#34;&gt;The Datastore&lt;/a&gt; - a schemaless object datastore, with a query engine and atomic transactions. This is accessible via Java Data Objects (JDO) 2.3, Java Persistence API (JPA) 1.0, or Google&#39;s own low-level API&#39;s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;a href=&#34;http://code.google.com/appengine/docs/java/memcache/&#34;&gt;Memcache&lt;/a&gt; service for caching whatever objects you like, accessible via JCache JSR 107.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/urlfetch/&#34;&gt;A URL fetch service&lt;/a&gt; for accessing data on other systems, accessible via java.net.URLConnection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/mail/&#34;&gt;A Mail (JavaMail) service&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/images/&#34;&gt;An Image processing service&lt;/a&gt;, a likely candidate for replacing AWT for image processing. Be careful, it binds you to Google&#39;s services. You may want to write a wrapper for it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/users/&#34;&gt;Google Accounts for authentication&lt;/a&gt;. Should you leverage this, anyone with a Google account can authenticate into your app.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The nice thing about Google&#39;s services is that where possible they always provided a way in through standards-based Java API&#39;s.&lt;/p&gt;
&lt;p&gt;Now, on to tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/tools/ant.html&#34;&gt;An Apache Ant component&lt;/a&gt; for your automated build process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/tools/eclipse.html&#34;&gt;A very nice plugin&lt;/a&gt; for the Eclipse IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/gettingstarted/installing.html&#34;&gt;The App Engine SDK&lt;/a&gt; - Java API&#39;s into all of Google&#39;s services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/tools/devserver.html&#34;&gt;A Development Server&lt;/a&gt; so that you can run a simulated Google environment on your local machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://code.google.com/appengine/docs/java/tools/uploadinganapp.html&#34;&gt;AppCfg&lt;/a&gt; for command-line interaction with the App Engine platform.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probably the most significant piece to this puzzle is the fact that Google is not simply supporting Java the language, but Java the platform. It&#39;s a standard JVM, so other languages running on the JVM will happily run on Google App Engine as well. At this writing, I knew of the following languages that are known to run:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Groovy (and Grails as of 1.1.1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JRuby&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scala&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clojure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Beanshell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript (Rhino)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jython&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s the screencast from my talk. Enjoy!&lt;/p&gt;
&lt;p&gt;[youtube=http://www.youtube.com/watch?v=hotbwYStwH8&amp;amp;hl;=en&amp;amp;fs;=1]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>reactions from javaone 2009 opening keynote</title>
      <link>https://www.mattstine.com/2009/06/02/reactions-from-javaone-2009-opening-keynote/</link>
      <pubDate>Tue, 02 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/02/reactions-from-javaone-2009-opening-keynote/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/sunahouston2/JavaOne2009#5344645971163695266&#34;&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/06/j1-2009-keynote-ellison-mcnealy-stage880.jpg?w=223&#34; alt=&#34;Photo by Aaron Houston&#34;&gt;&lt;/a&gt;The morning session opened with a HUGE elephant under the rug - &amp;ldquo;Where is Oracle?&amp;rdquo; There&#39;s no booth in the Pavilion - super strange.&lt;/p&gt;
&lt;p&gt;Things kicked off very slowly. Jonathan Schwartz, Sun CEO, for all of his ponytail excellence, wasn&#39;t exactly inspiring a great deal of excitement in the crowd. In fact, the loudest applause from the audience was initially for the tech support guy who fixed the projection for one of the demos.&lt;/p&gt;
&lt;p&gt;Thankfully things eventually got moving. Verizon and Sun announced a very exciting partnership whereby Verizon will expose their network elements to Java developers. Things like presence, location, friends and family lists, mobile-to-mobile lists - all of these will now be accessible to the developer. These specs will come out on July 27. This announcement is very exciting as it means that Verizon phones will now be a very powerful platform for Java mobile development.&lt;/p&gt;
&lt;p&gt;The JavaFX demos were really cool. They demoed one of the new LG XCanvas series of TV&#39;s, which actually run JavaFX on the TV itself. Processors and video codecs actually live within the TV, and the TV is connected to the network. Live, on-demand, interactive content is now available directly on the set, and it&#39;s very smooth. It seems that JavaFX continues to be the center of innovation within Sun. This continued with a demo of the new JavaFX visual authoring tool. This was very impressive. JavaFX apps are now possible with absolutely no coding, which makes them extremely accessible to content designers. Visual assets can be dragged and dropped onto the stage, animation can be built by recording drag motions, no compile-build-deploy cycle. Another great features was visual wiring of component properties to UI controls. Very smooth. And apps can be deployed directly to the Java App Store via the tool.&lt;/p&gt;
&lt;p&gt;Funny, this was the big oops of the keynote. Nandini Ramani leaked the &amp;ldquo;liveness&amp;rdquo; of the app store before the official announcement. Nandini - &amp;ldquo;And you can deploy directly to the App Store.&amp;rdquo; Jonathan - &amp;ldquo;We haven&#39;t launched the App Store yet.&amp;rdquo; OOPS.&lt;/p&gt;
&lt;p&gt;But the App Store was immediately announced next. &lt;a href=&#34;http://store.java.com&#34;&gt;http://store.java.com&lt;/a&gt; is now in private beta, and I quickly registered and got an invite. I was playing with the App Store in the following session and downloaded two applications. Extremely like the iPhone App Store for Java. You can now distribute your Java applications directly to billions of consumers with Java-enabled devices. At this point it only supports free applications, as they have left it up to the community to provide feedback on how money should be collected. Nice move. Very impressive. This could be a game changer for the Java platform if it&#39;s used correctly.&lt;/p&gt;
&lt;p&gt;FINALLY the elephant came out, but it took Scott McNealy coming on stage to get it done. It was very interesting how Jonathan Schwartz unceremoniously left the stage. Scott thanked him twice for his stewardship of the company - it was a very obvious yet implicit changing of the guard. Funny that they should decide to introduce Larry Ellison, CEO Oracle, via a great amount of cheesy images (Java flying on the sail to Larry&#39;s yacht, etc.) At the end, while no promises were made, Larry said that we should look to the past to see what the future will hold and expect more of the same. &amp;ldquo;I don&#39;t expect any significant changes.&amp;rdquo; I hope that holds true. The audience very properly gave Scott a standing ovation as he left the stage, a nice gesture to a guy that has continually kept Sun on the cutting edge of technology.&lt;/p&gt;
&lt;p&gt;All in all, it was a bittersweet keynote, but I&#39;m cautiously optimistic about the future of the platform. Our landscape is continually changing, and the future is uncertain. If everyone&#39;s being transparent, however, good things are still to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>connecting with people at javaone</title>
      <link>https://www.mattstine.com/2009/06/01/connecting-with-people-at-javaone/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/01/connecting-with-people-at-javaone/</guid>
      <description>&lt;p&gt;So far one of the greatest things about JavaOne for me has been the opportunity to connect face-to-face with so many people that I&#39;ve only communicated with digitally. I&#39;ve also been able to catch up with folks that I&#39;ve run into through other conferences, the JUG, and work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Finally met Aaron Houston and Mark DeHart from &lt;a href=&#34;http://java.sun.com/community/usergroups/index.jsp&#34;&gt;Sun JUG Programs&lt;/a&gt;. These guys have supported the Memphis JUG from the very beginning and have kept us supplied with tons of cool swag, as well as a Sun SPOT that continues to be a hit. Great guys.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Briefly chatted with &lt;a href=&#34;http://weblogs.java.net/blog/caroljmcdonald/&#34;&gt;Carol McDonald &lt;/a&gt;from Sun. She was our very first JUG speaker and also had an extremely stressful encounter with our then new projector.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Got to catch up with &lt;a href=&#34;http://blog.springsource.com/author/keithd/&#34;&gt;Keith Donald&lt;/a&gt; of SpringSource on what he&#39;s been up to with Spring and what we&#39;ve been up to with our SRM project. Keith joined us for a week long consulting engagement earlier this year and fit in like another member of the team. He and Oleg Zhurakousky covered the JUG meeting that week as well and we had our largest attendance ever.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally met &lt;a href=&#34;http://weblogs.java.net/blog/van_riper/&#34;&gt;Van Riper&lt;/a&gt;, the man behind JUG-USA.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Had a great dinner conversation with Abdel Remani, student JUG leader from California State University, Chico.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Got to catch up with &lt;a href=&#34;http://www.linkedin.com/in/davidgbooth&#34;&gt;Dave Booth&lt;/a&gt;, formerly the JUG program guy from JetBrains, now with GravityGears.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Briefly chatted with &lt;a href=&#34;http://www.linkedin.com/pub/wayne-fay/4/326/193&#34;&gt;Wayne Fay&lt;/a&gt;, one of our former JUG members now working in San Francisco.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all it has been wonderful getting to connect with all of these folks, put faces to names, and share updates. Come to JavaOne. You get to meet neat folks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>deploying grails to morph appspace communityone 2009 lightning talk</title>
      <link>https://www.mattstine.com/2009/06/01/deploying-grails-to-morph-appspace-communityone-2009-lightning-talk/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/01/deploying-grails-to-morph-appspace-communityone-2009-lightning-talk/</guid>
      <description>&lt;p&gt;I gave two lightning talks at &lt;a href=&#34;http://developers.sun.com/events/communityone/2009/west/index.jsp&#34;&gt;CommunityOne&lt;/a&gt; today, the first of which described deploying &lt;a href=&#34;http://grails.org&#34;&gt;Grails&lt;/a&gt; applications to &lt;a href=&#34;http://mor.ph/products_appspace&#34;&gt;Morph AppSpace&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the uninitiated, Grails is a Ruby on Rails inspired full stack web development framework which brings &amp;ldquo;convention over configuration&amp;rdquo; and &amp;ldquo;DRY&amp;rdquo; into the Java web development arena. Unlike Rails, it is not an effort from scratch, but rather stands on the shoulders of proven giants in the Java world like the Spring framework and Hibernate. It does this using Groovy, the popular dynamic scripting language for the JVM, as a sort of &amp;ldquo;DSL for web development.&amp;rdquo; Find it at &lt;a href=&#34;http://grails.org&#34;&gt;&lt;a href=&#34;http://grails.org&#34;&gt;http://grails.org&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Morph AppSpace on the other hand is a fully-configured and managed environment for hosting web applications, and currently supports Java, Grails, Rails, and PHP applications. It is a &amp;ldquo;platform as a service&amp;rdquo; (PaaS) provider that abstracts away the details of Amazon EC2 and S3 technologies. Systems architecture, backups, monitoring, failover, scalability - all of this is handled by Morph. You simply develop and deploy your application - Morph does the rest. Find it at &lt;a href=&#34;http://mor.ph/products_appspace&#34;&gt;&lt;a href=&#34;http://mor.ph/products_appspace&#34;&gt;http://mor.ph/products_appspace&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So to get going, visit &lt;a href=&#34;http://mor.ph&#34;&gt;&lt;a href=&#34;http://mor.ph&#34;&gt;http://mor.ph&lt;/a&gt;&lt;/a&gt; and sign up for a free developer account. Create yourself a Java application subscription, and pick your choice of database (MySQL or PostgreSQL). Create the database, and then download two very important files into the root directory of your Grails project: deployment.properties, which contains the metadata describing your application to the Morph AppSpace platform, and morph_deployer.jar, which contains the client API to the platform.&lt;/p&gt;
&lt;p&gt;Next you&#39;ll need to install the &lt;a href=&#34;http://grails.org/plugin/morph-deploy&#34;&gt;Grails morph-deploy plugin&lt;/a&gt;. If you&#39;re using Grails 1.1, you&#39;ll need to checkout &lt;a href=&#34;https://svn.codehaus.org/grails-plugins/grails-morph-deploy/trunk/&#34;&gt;the trunk version from SVN&lt;/a&gt;, as the version in the plugin repository is not 1.1 ready. Install this plugin locally by running &amp;ldquo;grails install-plugin $PATH_TO_PLUGIN.&amp;rdquo; Next, you&#39;ll need to edit DataSource.groovy to contain the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;production {
        dataSource {
            driverClassName = &#39;com.mysql.jdbc.Driver&#39;
            dbCreate = &amp;quot;update&amp;quot;
            jndiName = &amp;quot;java:comp/env/jdbc/morph-ds&amp;quot;
            dialect = &#39;org.hibernate.dialect.MySQLDialect&#39;
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, run &amp;ldquo;grails war&amp;rdquo; to build the war file, and &amp;ldquo;grails deploy&amp;rdquo; to upload your application to the platform. Once the upload is complete, visit the management interface and check the logs to see that you&#39;ve successfully deployed. Once it&#39;s finished, click on the link to your application. Happy Grails on the cloud!&lt;/p&gt;
&lt;p&gt;Here&#39;s the screencast from my talk. Enjoy!&lt;/p&gt;
&lt;p&gt;[youtube=http://www.youtube.com/watch?v=JYPJ26-1YTM&amp;amp;hl;=en&amp;amp;fs;=1&amp;amp;border;=1]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>on the ground in san francisco</title>
      <link>https://www.mattstine.com/2009/06/01/on-the-ground-in-san-francisco/</link>
      <pubDate>Mon, 01 Jun 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/06/01/on-the-ground-in-san-francisco/</guid>
      <description>&lt;p&gt;&amp;hellip;for my second trip to JavaOne. This is going to be an extremely busy week.&lt;/p&gt;
&lt;p&gt;Just as a quick update to those who thought I have fallen off of the face of the earth, I&#39;ve been very busy these past few weeks finishing up a lot of loose ends. First off, May is a busy month for our family. With Mother&#39;s Day, Wendy&#39;s 30th Birthday, and Grant&#39;s 1st Birthday, we&#39;ve been doing quite a lot as a family. Second, I&#39;ve been scrambling to finish off Wendy&#39;s stationery store site, and I&#39;m pleased to announce that &lt;a href=&#34;http://www.duckduckgoosedesigns.com&#34;&gt;&lt;a href=&#34;http://www.duckduckgoosedesigns.com&#34;&gt;http://www.duckduckgoosedesigns.com&lt;/a&gt;&lt;/a&gt; went into production on Memorial Day!&lt;/p&gt;
&lt;p&gt;Last of all, I&#39;ve been putting the finishing touches on my two lightning talks for Community One and my Java.net Community Corner podcast. In fact, I recorded the last demo video for my Google App Engine talk as I sat here in the Intercontinental Hotel.&lt;/p&gt;
&lt;p&gt;At any rate, I&#39;ve got a packed schedule ahead, full of technical sessions, BOF&#39;s, meetups, parties, etc. It&#39;s the ultimate geek vacation. Stay tuned as I blog my way through. You can also pickup my Twitter feed for up-to-the-minute news. ;-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>career 20 toastmasters</title>
      <link>https://www.mattstine.com/2009/05/11/career-20-toastmasters/</link>
      <pubDate>Mon, 11 May 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/05/11/career-20-toastmasters/</guid>
      <description>&lt;p&gt;I&#39;m currently making my second trip through &lt;a href=&#34;http://agileartisans.com/main&#34;&gt;Jared Richardson&#39;s&lt;/a&gt; excellent book &lt;a href=&#34;http://www.lulu.com/content/5925115&#34;&gt;Career 2.0: Take Control of Your Life&lt;/a&gt;. In the &amp;ldquo;Public Speaking&amp;rdquo; chapter, one of the recommended avenues for public speaking practice is &lt;a href=&#34;http://www.toastmasters.org&#34;&gt;Toastmasters&lt;/a&gt;. I first heard of Toastmasters&amp;hellip;you guessed it, on my first trip through the book. Shortly after returning home from &lt;a href=&#34;http://www.nofluffjuststuff.com/conference/st_louis/2009/03/index.html&#34;&gt;NFJS St. Louis&lt;/a&gt;, I decided to see if I could find a local club. Lo and behold, a Toastmasters club already meets on the St. Jude Children&#39;s Research Hospital campus! I had no excuse but to check it out at this point.&lt;/p&gt;
&lt;p&gt;For the uninitiated, Toastmasters is an organization focused on helping individuals hone their communication and leadership skills in a safe environment. This is accomplished primarily through three different avenues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Serving in one of the meeting leadership roles, such as Toastmaster (the meeting facilitator);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Giving a prepared speech/talk from the list of speech projects in the Toastmasters &amp;ldquo;coursework&amp;rdquo;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Speaking extemporaneously on one of several &amp;ldquo;table topics,&amp;rdquo; which are speaking prompts provided during the meeting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Participation in any of these avenues is immediately followed up with feedback from one or more people playing various &amp;ldquo;evaluator&amp;rdquo; roles. I couldn&#39;t help but see the parallels to agile software development!&lt;/p&gt;
&lt;p&gt;I&#39;ve now attended three meetings, and at the last meeting I decided to join up. The St. Jude club is an extremely friendly group, and several of its members are very accomplished public speakers. You can definitely tell that the Toastmasters experience has helped them enhance their communications skills. I&#39;m looking forward to polishing my own.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>grails paypal plugin update</title>
      <link>https://www.mattstine.com/2009/05/11/grails-paypal-plugin-update/</link>
      <pubDate>Mon, 11 May 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/05/11/grails-paypal-plugin-update/</guid>
      <description>&lt;p&gt;Since I last posted on &lt;a href=&#34;http://www.mattstine.com/2009/05/02/ive-forked-the-grails-paypal-plugin/&#34;&gt;my fork of the Grails PayPal Plugin&lt;/a&gt;, I&#39;ve been invited to be a committer on the &lt;a href=&#34;http://xircles.codehaus.org/projects/grails-plugins&#34;&gt;Grails Plugins project at the Codehaus&lt;/a&gt;. I&#39;ll be incorporating my changes into the SVN repository there and updating the documentation on the main Grails Plugins website. Look for these updates coming soon!!!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ive forked the grails paypal plugin</title>
      <link>https://www.mattstine.com/2009/05/02/ive-forked-the-grails-paypal-plugin/</link>
      <pubDate>Sat, 02 May 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/05/02/ive-forked-the-grails-paypal-plugin/</guid>
      <description>&lt;p&gt;I&#39;m currently completing the finishing touches on a new e-commerce site for my wife&#39;s stationary business. We decided a long time ago to use &lt;a href=&#34;http://www.paypal.com&#34;&gt;PayPal&lt;/a&gt; for all of the payment processing since we&#39;ve had a great experience using it for our eBay selling. About a year ago Graeme Rocher polished off the last release of a &lt;a href=&#34;http://grails.org/plugin/paypal&#34;&gt;PayPal plugin&lt;/a&gt; that is available in &lt;a href=&#34;http://grails.org/plugin/home&#34;&gt;the Grails Plugin repository&lt;/a&gt;. It really is a very nice plugin, yet I had a couple of problems with it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is only capable of handling payments for one item transactions via &amp;ldquo;Buy Now&amp;rdquo; buttons. I want to upload an entire shopping cart full of multiple items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It currently won&#39;t handle shipping addresses. The site I&#39;m building allows the user to maintain a list of shipping addresses, and I&#39;d want to send the address information they choose along to PayPal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Minor issue: needed to upgrade the plugin to Grails 1.1.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, I decided this evening to fork the plugin. I want to leverage all of the great work that has been done thus far (especially with the IPN processing part - superb stuff), but I have to add in these two functions and do the version upgrade. Interestingly enough I couldn&#39;t get the tests to run out of the box after the upgrade. No good developer likes to modify code without a stable running test suite, right? So what I ended up doing was creating a new Grails 1.1 plugin project and copying the original artifacts over. Once this was done all of the tests ran perfectly.&lt;/p&gt;
&lt;p&gt;So, at this point I&#39;ve added function #1. You can now redirect to the &amp;ldquo;uploadCart&amp;rdquo; action. It assumes that you have already constructed a Payment object (now containing PaymentItems) and saved it, and then passed the transactionId along. I did this so that folks with multiple different ways of handling shopping carts could have some degree of flexibility - the onus is on you to map your cart to your Payment object correctly. The original functions implemented by Graeme are backward compatible, assuming only one PaymentItem in the Payment. I&#39;ve run all of the original tests and also did some manual functional testing by running the plugin app against my own PayPal Sandbox account. So far so good. Look for more updates as this evolves. Once I get something I&#39;m totally happy with I&#39;ll see about getting it pushed back into the main plugin repo.&lt;/p&gt;
&lt;p&gt;Want to take a closer look? Visit &lt;a href=&#34;http://github.com/mstine/grails-paypal-plugin/tree/master&#34;&gt;&lt;a href=&#34;http://github.com/mstine/grails-paypal-plugin/tree/master&#34;&gt;http://github.com/mstine/grails-paypal-plugin/tree/master&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>functional programming blog aggregator in the works</title>
      <link>https://www.mattstine.com/2009/04/30/functional-programming-blog-aggregator-in-the-works/</link>
      <pubDate>Thu, 30 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/30/functional-programming-blog-aggregator-in-the-works/</guid>
      <description>&lt;p&gt;So I&#39;m in the midst of planning my next toy project, specifically with an aim to build something for the cloud, be it &lt;a href=&#34;http://code.google.com/appengine&#34;&gt;Google App Engine&lt;/a&gt;, &lt;a href=&#34;http://mor.ph&#34;&gt;Mor.ph&lt;/a&gt;, &lt;a href=&#34;http://aws.amazon.com/ec2/&#34;&gt;EC2&lt;/a&gt;, etc. (that part is still up for grabs). What I&#39;d like to do is an opt-in blog aggregation site focused around functional programming. It would be very similar to what &lt;a href=&#34;http://blogs.bytecode.com.au/glen/&#34;&gt;Glen Smith&lt;/a&gt; has done with &lt;a href=&#34;http://groovyblogs.org&#34;&gt;groovyblogs.org&lt;/a&gt;. Groovyblogs is currently my number one referral site and is generating about 20% of the traffic for this blog. I think it is a great way to find out what blogs are out there in a given space, and there doesn&#39;t seem to be an equivalent for the functional space. Since my LOTY interest is focused in the functional space, particularly around Scala and Clojure, and my TOTY interest is the cloud technologies out there, it seems like the perfect marriage.&lt;/p&gt;
&lt;p&gt;So here&#39;s my question. Would you be interested in using such a site? As a reader, blogger, or both? Please sound off. Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>joels builderbuilder in groovy</title>
      <link>https://www.mattstine.com/2009/04/27/joels-builderbuilder-in-groovy/</link>
      <pubDate>Mon, 27 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/27/joels-builderbuilder-in-groovy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://joelneely.wordpress.com/&#34;&gt;Joel Neely&lt;/a&gt; started &lt;a href=&#34;http://joelneely.wordpress.com/2009/04/25/builderbuilder-the-agenda/&#34;&gt;a series&lt;/a&gt; &lt;a href=&#34;http://joelneely.wordpress.com/2009/04/27/builderbuilder-the-task/&#34;&gt;of posts&lt;/a&gt; over the weekend detailing a proposed exploration of what Functional Programming means &amp;ldquo;to me as a practicing OO software developer?&amp;rdquo; The task at hand is to look at the generation of Data Transfer Objects which include a static inner class that functions as a builder. Since I&#39;m exploring both Clojure and Scala right now, Joel has asked me to play along.&lt;/p&gt;
&lt;p&gt;After reading the task definition today, I couldn&#39;t resist taking a crack at the problem in Groovy, especially since tackling a Builder DSL is not something I&#39;ve gone after before.&lt;/p&gt;
&lt;p&gt;So, here&#39;s how I&#39;ll use my DTOBuilder to produce the output Joel described:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;def bldr = new DtoBuilder()

println bldr.build {
	packageName &#39;edu.bogusu.registration&#39;
	name &#39;Student&#39;
	field(name:&#39;id&#39;, type:&#39;String&#39;)
	field(name:&#39;firstName&#39;, type:&#39;String&#39;)
	field(name:&#39;lastName&#39;, type:&#39;String&#39;)
	field(name:&#39;hoursEarned&#39;, type:&#39;int&#39;)
	field(name:&#39;gpa&#39;, type:&#39;float&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty concise, eh? &lt;a href=&#34;http://github.com/mstine/BuilderBuilder/blob/1008235f88177910eb94af165ade3aedae2955a3/src/DtoBuilder.groovy&#34;&gt;Check out the implementation of it at GitHub&lt;/a&gt;. I&#39;ll be posting all of my code related to this series at this location (and hopefully Joel will join in as well).&lt;/p&gt;
&lt;p&gt;One thing you&#39;ll notice is that I&#39;m still operating primarily in OO style. My next task is to refactor this code, still written in Groovy, but using as much functional-style as I can squeeze out of the language. Until next time&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>grails prototype scriptaculous persistent grid sorting goodness</title>
      <link>https://www.mattstine.com/2009/04/25/grails-prototype-scriptaculous-persistent-grid-sorting-goodness/</link>
      <pubDate>Sat, 25 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/25/grails-prototype-scriptaculous-persistent-grid-sorting-goodness/</guid>
      <description>&lt;p&gt;Ever wanted to do drag-n-drop sorting of a grid of images on a page and persist it? Here&#39;s my solution using Grails, Prototype, and Script.aculo.us.&lt;/p&gt;
&lt;p&gt;Basically what prompted this was the need for my wife to be able to sort the various product images that she had on a screen at any given time in any way that she pleased, and it had to be easy to work with. What follows is by no means a complete solution to this problem, but it represents where I am in the development process and may be useful to you, my hapless reader.&lt;/p&gt;
&lt;p&gt;Here&#39;s some GSP code which basically lays out a grid of product images, 3 wide by &lt;em&gt;n&lt;/em&gt; deep:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;productThumbContainer&amp;quot;&amp;gt;
  &amp;lt;g:set var=&amp;quot;rowIndex&amp;quot; value=&amp;quot;${0}&amp;quot;/&amp;gt;
&amp;lt;g:each in=&amp;quot;${products}&amp;quot; var=&amp;quot;product&amp;quot; status=&amp;quot;index&amp;quot;&amp;gt;
  &amp;lt;g:if test=&amp;quot;${index % 3 == 0}&amp;quot;&amp;gt;
    &amp;lt;div id=&amp;quot;productRow${rowIndex}&amp;quot; class=&amp;quot;span-20 last product-row&amp;quot;&amp;gt;
  &amp;lt;/g:if&amp;gt;
  &amp;lt;div id=&amp;quot;product_${product.id}&amp;quot; class=&amp;quot;span-6 product &amp;lt;g:if test=&amp;quot;${(index % 3 == 2) || ((products.size() - index) == 1)}&amp;quot;&amp;gt;last&amp;lt;/g:if&amp;gt;&amp;lt;g:else&amp;gt;append-1&amp;lt;/g:else&amp;gt;&amp;quot;&amp;gt;
    &amp;lt;img src=&amp;quot;${resource(dir: grailsApplication.config.store.productImages.webPath, file: product?.thumbnailImage?.name)}&amp;quot; width=&amp;quot;230&amp;quot; class=&amp;quot;productImage&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;&amp;lt;g:link controller=&amp;quot;product&amp;quot; action=&amp;quot;show&amp;quot; id=&amp;quot;${product.id}&amp;quot;&amp;gt;${product.name}&amp;lt;/g:link&amp;gt;&amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;g:if test=&amp;quot;${(index % 3 == 2) || ((products.size() - index) == 1)}&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;g:set var=&amp;quot;rowIndex&amp;quot; value=&amp;quot;${rowIndex + 1}&amp;quot;/&amp;gt;
  &amp;lt;/g:if&amp;gt;
&amp;lt;/g:each&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now here&#39;s where the magic happens:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.observe(&#39;dom:loaded&#39;, function() {
      var productRows = $$(&#39;.product-row&#39;);

      var options = {
        constraint: false,
        overlap: &#39;horizontal&#39;,
        containment: productRows,
        dropOnEmpty: true,
        tag: &#39;div&#39;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;date = &amp;quot;&amp;rdquo;
};&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      productRows.each(function(item) {
        Sortable.create(item, options);
      });

      $(&#39;persistOrderingButton&#39;).observe(&#39;click&#39;, function(event) {
          var sortString = &#39;&#39;;
          productRows.each(function(row) {
              sortString += &#39;&amp;amp;&#39;;
              sortString += Sortable.serialize(row);
          });
          &amp;lt;g:remoteFunction action=&amp;quot;sortProducts&amp;quot; params=&amp;quot;sortString&amp;quot; update=&amp;quot;ajaxMessage&amp;quot; onSuccess=&amp;quot;\$(&#39;ajaxMessage&#39;).show()&amp;quot;/&amp;gt;
      });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&#39;ve got here is, failure to communicate&amp;hellip;oops, wrong synapse there&amp;hellip;what we&#39;ve got here is a Prototype selector that grabs everything with the class &amp;ldquo;.product-row.&amp;rdquo; It then takes these and creates a Scriptaculous Sortable for each of them, providing the object-literal &amp;ldquo;options.&amp;rdquo; Notice the &amp;ldquo;containment&amp;rdquo; option which allows you to drag products back and forth between the various rows.&lt;/p&gt;
&lt;p&gt;Delving deeper into the magic is the callback function &amp;ldquo;updateRows.&amp;rdquo; This guy is my favorite Javascript creation in quite some time:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function updateRows(list) {
      var children = list.childElements();

      if (children.size() &amp;lt; 3) {

        //If I&#39;m the last row, who cares!
        if (list.next() != null) {
          var prevRow = list.previous();

          if (prevRow != null) {
            var lastChild = prevRow.childElements()[prevRow.childElements().size() - 1].remove();
            list.insert({top:lastChild});
            updateRows(prevRow);
          } else {
            var lastRow = list.up().childElements()[list.up().childElements().size() - 1];
            var lastChild = lastRow.childElements()[lastRow.childElements().size() - 1].remove();
            list.insert({top:lastChild});
            updateRows(lastRow);
          }
        }
      } else if (children.size() == 3) {
        //Do nothing...gets me out of the recursion I hope!
      } else {
        var nextRow = list.next();
        var lastChild = children[children.size() - 1].remove();

        if (nextRow != null) {
          nextRow.insert({top:lastChild});
          updateRows(nextRow);
        } else {
          var topRow = list.up().childElements()[0];
          topRow.insert({top:lastChild});
          updateRows(topRow);
        }
      }

      var i = 0;
      Sortable.sequence(list).each(function(item) {
        var productId = &#39;product_&#39; + item;
        if (i &amp;lt; 2) {
          $(productId).removeClassName(&#39;last&#39;);
          $(productId).removeClassName(&#39;append-1&#39;);
          $(productId).addClassName(&#39;append-1&#39;);
        } else {
          $(productId).removeClassName(&#39;last&#39;);
          $(productId).removeClassName(&#39;append-1&#39;);
          $(productId).addClassName(&#39;last&#39;);
        }
        i++;
      });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function is organized around the fact that the only valid state for a grid of n-rows will be n-1 rows of 3 products, followed by one row of 1 &amp;lt;= numProducts &amp;lt;= 3. In most cases, if you drag a product from one row to another, you are violating that rule by creating a row with 2 products and a row with 4 products. This function solves the problem by recursively shifting the products down until reaching a stable state again.&lt;/p&gt;
&lt;p&gt;There&#39;s a bit of noise there at the bottom of the function. I&#39;m using Blueprint CSS to do the layout for this application and I need to shift the various Blueprint classes around once everything is settled.&lt;/p&gt;
&lt;p&gt;Finally, here&#39;s the persistence of the data when we click save:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def sortProducts = {
    TreeMap rowMap = new TreeMap()

    params.each {key, value -&amp;gt;
      def matcher = key =~ /productRow(.*)\[\]/
      if (matcher.matches()) {
        def rowId = matcher[0][1]
        rowMap[rowId] = value
      }
    }

    def productIds = []
    rowMap.values().each { row -&amp;gt;
      row.each {
        productIds &amp;lt;&amp;lt; it.toLong()
      }
    }

    shoppingService.saveSortOrder(productIds)

    render(&amp;quot;Product sort order saved!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the logic from shoppingService.saveSortOrder():&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def saveSortOrder(def productIds) {
    def productsToSort = Product.findAllByIdInList(productIds)

    def productMap = [:]
    def sortIndexList = []

    productsToSort.each {
      productMap[it.id] = it
      sortIndexList &amp;lt;&amp;lt; it.sortIndex
    }

    sortIndexList.sort()
    sortIndexList = sortIndexList.reverse()

    productIds.each {
      productMap[it].sortIndex = sortIndexList.pop()
    }

    productsToSort.each {
      it.save()
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might wonder why this is so complex. What I haven&#39;t fully described is the way products are organized into a hierarchy of various categories. When you&#39;re sorting a screen, you&#39;re only sorting a subset of the products that are in that particular category. However, the sort order is maintained across the entire product set in the database. So, this logic basically just shifts around the existing sort indicies, placing them in their new relative order.&lt;/p&gt;
&lt;p&gt;Anyway, I don&#39;t know how generally applicable this code is, but I had fun writing it and I hope you can get some use out of it. Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>groovy post to a url</title>
      <link>https://www.mattstine.com/2009/04/25/groovy-post-to-a-url/</link>
      <pubDate>Sat, 25 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/25/groovy-post-to-a-url/</guid>
      <description>&lt;p&gt;If you&#39;ve ever worked with the brilliant &lt;a href=&#34;http://recaptcha.net/&#34;&gt;Recaptcha&lt;/a&gt; service, you&#39;ll know that their REST API requires an HTTP POST rather than a GET. As I had only used GET requests thus far, I googled around and found a pretty easy solution:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private def evaluateCaptcha(def remoteIp, def challenge, def response) {
    def config = recaptchaService.getRecaptchaConfig()

    def urlString = &amp;quot;http://api-verify.recaptcha.net/verify&amp;quot;
    def queryString = &amp;quot;privatekey=${config.recaptcha.privateKey}&amp;amp;remoteip=${remoteIp}&amp;amp;challenge=${challenge}&amp;amp;response=${URLEncoder.encode(response)}&amp;quot;

    def url = new URL(urlString)
    def connection = url.openConnection()
    connection.setRequestMethod(&amp;quot;POST&amp;quot;)
    connection.doOutput = true

    def writer = new OutputStreamWriter(connection.outputStream)
    writer.write(queryString)
    writer.flush()
    writer.close()
    connection.connect()

    def recaptchaResponse = connection.content.text
    log.debug(recaptchaResponse)

    recaptchaResponse.startsWith(&amp;quot;true&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have to credit &lt;a href=&#34;http://www.fiascode.com/programming/putting-google-finance-to-rest-with-groovy/&#34;&gt;Justin Spradlin&lt;/a&gt; for the code that ultimately got me here. Consider this a +1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hello clojure</title>
      <link>https://www.mattstine.com/2009/04/24/hello-clojure/</link>
      <pubDate>Fri, 24 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/24/hello-clojure/</guid>
      <description>&lt;pre&gt;&lt;code&gt;; Hello World!
(defn hello [name]
  (println &amp;quot;Hello, &amp;quot; name))

(hello &amp;quot;World!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>latest wordle</title>
      <link>https://www.mattstine.com/2009/04/24/latest-wordle/</link>
      <pubDate>Fri, 24 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/24/latest-wordle/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://twitter.com/puredanger&#34;&gt;Alex Miller&#39;s Twitter background&lt;/a&gt; inspired me to generate a Wordle from my feed. How fitting that &amp;ldquo;Code&amp;rdquo; is more prominent than anything.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.wordle.net/gallery/wrdl/780295/Matt_Stine%27s_Blog_Feed&#34;&gt;&lt;img src=&#34;http://www.wordle.net/thumb/wrdl/780295/Matt_Stine%27s_Blog_Feed&#34; alt=&#34;Wordle: Matt Stine&#39;s Blog Feed&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>lotypart deux</title>
      <link>https://www.mattstine.com/2009/04/06/lotypart-deux/</link>
      <pubDate>Mon, 06 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/06/lotypart-deux/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/04/scala_vs_clojure.jpg&#34; alt=&#34;scala_vs_clojure&#34;&gt;&lt;a href=&#34;http://mattstine.files.wordpress.com/2009/04/scala_vs_clojure.jpg2009/04/02/loty-time-again-scala-or-clojure&#34;&gt;A few days ago I pontificated&lt;/a&gt; on my need to choose a new &amp;ldquo;Language of the Year.&amp;rdquo; Right now I&#39;m attempting to choose between &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; and &lt;a href=&#34;http://clojure.org/&#34;&gt;Clojure&lt;/a&gt;. If nothing else, I&#39;ve learned from this exercise that asking the community for feedback is a GOOD thing. Your comments have been very helpful.&lt;/p&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;As far as the polls go, Scala is in the lead by a margin of 4 to 2.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two of the Scala votes have been simple +1&#39;s, and two have provided a supporting argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both Clojure voters have provided a supporting argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, to make this a bit more of a fair fight, I&#39;m only going to consider the &amp;ldquo;supported votes&amp;rdquo; at this point. This leads to the obvious result of a tie!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, what to do?&lt;/p&gt;
&lt;p&gt;The argument for using Scala is that it is a functional/OO hybrid, so it will be easier to slide into. Interestingly enough, the argument against using Scala is that it is a functional/OO hybrid, so it will be easier to slide back into OO/imperative habits! Clojure, being more of a purely functional language, will be harder to get into initially, but will force me to think functionally. Hmmm&amp;hellip;&lt;/p&gt;
&lt;p&gt;So here&#39;s my idea. Let&#39;s do this the agile way. What I&#39;d like to do is complete a timeboxed spike (in terms of actual time spent learning the language, not calendar time - I&#39;m doing this in my spare time, and I&#39;ve got my wife, four kids, and three other side projects competing for my attention!) of roughly two weeks in each language. The first week of the spike would be spent getting comfortable with the syntax, reading articles/documentation/blogs/etc., writing &amp;ldquo;Hello, World!&amp;rdquo; etc. The second week of the spike would be spent solving the same problem in each language, preferably a problem sitting in the functional sweet spot.&lt;/p&gt;
&lt;p&gt;How does this sound to everyone? And to follow up, does anyone have a suggested problem I might tackle? Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>loty time again scala or clojure</title>
      <link>https://www.mattstine.com/2009/04/02/loty-time-again-scala-or-clojure/</link>
      <pubDate>Thu, 02 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/02/loty-time-again-scala-or-clojure/</guid>
      <description>&lt;p&gt;In 2007 &lt;a href=&#34;http://www.mattstine.com/2007/07/10/my-professional-development-goals-for-2007-2008/&#34;&gt;I established several professional development goals&lt;/a&gt; (&lt;a href=&#34;http://www.mattstine.com/2008/01/02/mid-year-review-my-professional-development-goals-for-2007-2008/&#34;&gt;and later reported my progress on these&lt;/a&gt;), one of which was to learn Groovy and Grails. This goal stemmed from the continually referenced idea from &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; to &amp;ldquo;learn a new language every year.&amp;rdquo; This idea has become so ubiquitous that it even has it&#39;s own four-letter acronym, LOTY (Language of the Year).&lt;/p&gt;
&lt;p&gt;Since establishing and reporting on these goals, I&#39;ve had several things get in the way of fully realizing all of them. However, I can safely say that in the last two years I have mastered enough Groovy and Grails that they no longer fit in the LOTY category. At this point they&#39;re really not showing my anything that is causing any paradigm shifts for me. They&#39;re comfortable. When I learn a new feature, it just seems to make sense, and nothing surprises me anymore. Languages like these aren&#39;t good LOTY candidates because one of the purposes of learning a LOTY is to challenge and change your ideas about programming. Groovy doesn&#39;t do this for me anymore. It&#39;s time to move on (not to say that I&#39;m dropping Groovy and Grails as a tool - I&#39;m using them more now than ever - they&#39;re just not a learning tool for me anymore).&lt;/p&gt;
&lt;p&gt;So, at this point I want to delve into a language that attempts to tackle the concurrent/multicore programming challenge. I&#39;d like to stay on the JVM because I appreciate the benefits that it brings as a platform, so for now Erlang is out. The two leading candidates in the JVM/concurrent/multicore arena seem to be &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; and &lt;a href=&#34;http://clojure.org/&#34;&gt;Clojure&lt;/a&gt;. An added benefit of both of these languages is that they support the functional paradigm, something I haven&#39;t really played with since my computer science education days and a very interesting language named Haskell.&lt;/p&gt;
&lt;p&gt;Scala is a multiparadigm language, supporting both object-oriented and functional constructs. It is statically typed, yet offers very nice type inference. Clojure, on the other hand, is a functional Lisp derivative with almost no OO constructs that is dynamically typed. Both are designed to enable concurrent programming. Which one do I choose? I open the floor for comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>awesome april fools joke</title>
      <link>https://www.mattstine.com/2009/04/01/awesome-april-fools-joke/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/01/awesome-april-fools-joke/</guid>
      <description>&lt;p&gt;I didn&#39;t have one this year, but Expedia did. Check it out!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.expedia.com/daily/mars/flights-to-mars/?mcicid=Mars_us&#34;&gt;&lt;img src=&#34;http://media.expedia.com/media/content/expus/graphics/other/dawnstar/et.jpg&#34; alt=&#34;Flights to Mars - Expedia Blog Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the developer iteration</title>
      <link>https://www.mattstine.com/2009/04/01/the-developer-iteration/</link>
      <pubDate>Wed, 01 Apr 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/04/01/the-developer-iteration/</guid>
      <description>&lt;p&gt;I recently gave a 90 minute talk at work covering quite a bit of ground related to Agile Software Development. If I had to sum up agile development in one word, it would be FEEDBACK. Venkat Subramaniam and Andy Hunt give one of the best definitions of agile I&#39;ve ever seen in their book, &lt;em&gt;Practices of an Agile Developer&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Agile development uses feedback to make constant adjustments in a highly collaborative environment.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here&#39;s my graphical representation of this quote:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/04/aws_fb_1012.jpg?w=300&#34; alt=&#34;Agile Feedback Loop&#34;&gt;&lt;/p&gt;
&lt;p&gt;I decomposed this into an &amp;ldquo;ecosystem&amp;rdquo; of multiple feedback loops:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/04/aws_fb_2013.jpg?w=300&#34; alt=&#34;Developer to Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/04/aws_fb_3025.jpg?w=300&#34; alt=&#34;Developer to Developer&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://mattstine.files.wordpress.com/2009/04/aws_fb_4033.jpg?w=300&#34; alt=&#34;Team to Client&#34;&gt;&lt;/p&gt;
&lt;p&gt;What I&#39;d like to focus on in this post is what I consider to be the heart of the &amp;ldquo;Developer to Code&amp;rdquo; feedback loop: &lt;strong&gt;The Developer Iteration&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You see, iterations aren&#39;t just for teams. Indeed they are also for developers. So many times I have witnessed individuals struggling to participate fully in an agile project because when they return to their desks, for all intents and purposes, they are pretending to be a waterfall. They spend days analyzing a feature, code for days without sharing any code, test the happy path toward the end of the iteration, and attempt a big bang integration on the last day. I&#39;ll be the first to admit that I myself tried to code this way and had a couple of realizations after a short time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Something felt completely unnatural about it, especially in the context of what we were trying to do as a team&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I was awfully miserable, especially at the end of the iteration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what does the developer iteration look like? It is essentially a microcosm of events that occur during a regular team iteration:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Look at your feature or task, and plan out what you have to do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Break the work into small chunks, where each chunk leaves the system in a stable state, yet that much closer to the feature or task being complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Develop each chunk (preferably using Test-Driven Development), unit and integration testing your work along the way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check-in your code EVERY TIME you again arrive at a stable state.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;ll give my definition of stability: A system with NO broken tests. How do we maintain stability? Here are several &amp;ldquo;smaller&amp;rdquo; steps that should immediately proceed your check-in step:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the tests on your development machine, fixing all broken ones until you reach 100% passing with the code you have.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out the latest code from your version control system, thereby integrating your team&#39;s changes with your own.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the tests AGAIN, fixing all broken ones until you reach 100% passing with the integrated code. At this point, your system is stable locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check-in the code! Now the entire team has a stable, fully-integrated system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, what&#39;s the point of all this? Look at how much feedback you&#39;re giving yourself along the way! Each time you stop and run the tests, you&#39;re getting feedback about the stability of your code. Not only that, but your constant striving for 100% stability greatly enhances your ability to refactor your code to keep it clean. You&#39;re able to constantly refine the code, creating smaller methods, more cohesive classes, and an overall simpler and better design combined with the confidence that your system is functionally equivalent to what you started with prior to refactoring.&lt;/p&gt;
&lt;p&gt;Yet another benefit is an enhanced ability to timebox yourself. Working this way enhances your ability to plan to be &amp;ldquo;done&amp;rdquo; by the end of the day, as you&#39;re never very far from your next stable state. Go home with a stable system, and find a stable system when you get back in the morning. Doesn&#39;t that feel great? Even if you can&#39;t reach a stable state by the time you head home, there&#39;s always the throwaway option. Just revert your changes and go home with stable code. Try again with a fresh mind the next morning. Again, if you&#39;re working the developer iteration, you haven&#39;t written that much code since your last stable state anyway. :-)&lt;/p&gt;
&lt;p&gt;Try it out. I&#39;m not a salesman. I&#39;m a satisfied customer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>deploying grails with groovy</title>
      <link>https://www.mattstine.com/2009/03/29/deploying-grails-with-groovy/</link>
      <pubDate>Sun, 29 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/03/29/deploying-grails-with-groovy/</guid>
      <description>&lt;p&gt;Interesting title, eh? Maybe this one will make it through Glen&#39;s filter at &lt;a href=&#34;http://groovyblogs.org&#34;&gt;GroovyBlogs.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On to the meat. I&#39;ve been steadily working on a couple of Grails applications, one being the website for the &lt;a href=&#34;http://www.memphisjug.org&#34;&gt;Memphis JUG&lt;/a&gt;, and another being the e-commerce site for my wife&#39;s soon to be launched designer stationery business. Just like your average Grails developer, I&#39;ve been happily coding away at 127.0.0.1 using the good old development Jetty+MySQL stack. Well, in the last week or so it&#39;s come time to actually deploy both of these applications into production. I started out last weekend with the Memphis JUG site. My first approach was to build the WAR file locally and then &amp;ldquo;scp&amp;rdquo; it up to the server.&lt;/p&gt;
&lt;p&gt;YMMV, but the upload speed on my DSL connection is horrible! After doing this three or four times in one night, waiting 15-20 minutes for the WAR to upload each time (Grails WAR&#39;s are rather thick when carrying all of the dependencies along), I decided to myself, &amp;ldquo;There must be a better way to do this.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Fast forward a week and here I sit working on the first &amp;ldquo;pre-production&amp;rdquo; release of my wife&#39;s store site. With quite a bit of time on my hands during these &amp;ldquo;dark and early&amp;rdquo; hours (a story for a later entry), I decided it was time for the experiment.&lt;/p&gt;
&lt;p&gt;Each of these projects is hosted at GitHub, so the process that I mapped out in my mind looked like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check out the latest code from GitHub&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &amp;ldquo;grails war&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop the Tomcat service (my hosting provider sets up Tomcat to run as a service)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete the remnants of the previous deployment from Tomcat&#39;s deployment directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the new WAR file to Tomcat&#39;s deployment directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the Tomcat service&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the way, I forgot to mention that before doing all of this I moved the production data source definition from being locally defined to being a JNDI lookup within Tomcat. This posed its own challenge, which I&#39;ll blog about a bit later.&lt;/p&gt;
&lt;p&gt;Anyway, back to the deployment. I though this would be an excellent opportunity to take &lt;a href=&#34;http://groovy.codehaus.org/Using+Ant+from+Groovy&#34;&gt;Groovy&#39;s Antbuilder&lt;/a&gt; out for a spin. Here&#39;s an example of what I put together:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env groovy

def ant = new AntBuilder()

//Update the codebase from GitHub
ant.exec(executable:&#39;git&#39;, dir: &amp;quot;${PROJECT_DIR}&amp;quot;) {
        arg(value:&#39;pull&#39;)
}

//Generate the WAR file using Ant
ant.ant(dir:&#39;&amp;quot;${PROJECT_DIR}&amp;quot;&#39;, target: &#39;war&#39;)

//Stop Tomcat
ant.exec(executable:&#39;service&#39;) {
        arg(line:&#39;tomcat6 stop&#39;)
}

//Delete the old webapp contents from Tomcat&#39;s deploy directory
ant.delete(includeemptydirs:&#39;true&#39;, verbose:&#39;true&#39;) {
        fileset(dir:&amp;quot;${CONTEXT_ROOT_DIR}&amp;quot;, includes:&#39;**/*&#39;)
}

//Copy the new WAR file to Tomcat&#39;s deploy directory
ant.copy(file:&amp;quot;${WAR_FILE}&amp;quot;, tofile:&amp;quot;${CONTEXT_ROOT_DIR}/ROOT.war&amp;quot;)

//Start Tomcat
ant.exec(executable:&#39;service&#39;) {
        arg(line:&#39;tomcat6 start&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, I have a few undefined Groovy constants in there. Let&#39;s just say I didn&#39;t want to expose ALL of the details of my server.&lt;/p&gt;
&lt;p&gt;At any rate, it&#39;s pretty simple. One word of warning - if you&#39;re using Ehcache, make sure to add it to your ivy.xml dependencies, or the Ant build won&#39;t bring it in like running &amp;ldquo;grails war&amp;rdquo; will. I hope someone finds this simple script useful. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>need a textile engine look no further than plextile</title>
      <link>https://www.mattstine.com/2009/03/26/need-a-textile-engine-look-no-further-than-plextile/</link>
      <pubDate>Thu, 26 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/03/26/need-a-textile-engine-look-no-further-than-plextile/</guid>
      <description>&lt;p&gt;In finishing up the first release of JUG Nexus, the open source engine (&lt;a href=&#34;http://github.com/mstine/jug-nexus/tree/master&#34;&gt;&lt;a href=&#34;http://github.com/mstine/jug-nexus/tree/master&#34;&gt;http://github.com/mstine/jug-nexus/tree/master&lt;/a&gt;&lt;/a&gt;) behind the new Memphis JUG website, I needed to put a good &lt;a href=&#34;http://www.textism.com/tools/textile/&#34;&gt;Textile&lt;/a&gt; engine in place. I really don&#39;t care for writing actual HTML in a content management system, and JUG Nexus being a lightweight CMS, I wanted a lightweight markup syntax for entering the details of upcoming JUG meetings. Textile is exactly that, and is also used for entering content into the very useful &lt;a href=&#34;http://jugevents.org&#34;&gt;JUGEvents&lt;/a&gt; system produced by &lt;a href=&#34;http://www.jugpadova.it/&#34;&gt;JUG Padova&lt;/a&gt; for the Java User Group community at large. I tried out several different engines, and none of them seemed to be very robust when it came to edge cases in the markup. For example, if I want to produce a hyperlink to a website, the textile format is the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;Linked Text&amp;quot;:http://www.site.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This syntax will result in the following HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;http://www.site.com&amp;quot;&amp;gt;Linked Text&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately, if you have a bang (!) in your &amp;ldquo;Linked Text,&amp;rdquo; most of the Textile engines that I used would not recognize it as an HTML link. Plextile does!&lt;/p&gt;
&lt;p&gt;The only drawback, however minimal, to using Plextile is that it does not come with a pre-packaged JAR file. You have to take the compiled code and JAR it yourself. Now, for free, I&#39;ll include how I integrated Plextile with Grails. Grails has a very nice codec feature that provides a facility to register encoders and decoders of textual data as methods on any object. Grails searches for classes following the convention &lt;code&gt;XCodec&lt;/code&gt; and dynamically registers &lt;code&gt;encodeAsX&lt;/code&gt; and &lt;code&gt;decodeX&lt;/code&gt; methods on &lt;code&gt;java.lang.Object&lt;/code&gt; so that any data can be encoded and decoded. Enter the &lt;code&gt;TextileCodec&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import com.plink.plextile.TextParser

class TextileCodec {

   static encode = {str -&amp;gt;
      new TextParser().parseTextile(str, true)
   }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Believe it or not, that&#39;s it! Here&#39;s the GSP template for rendering a JUG meeting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;post&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;${event.title}&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;g:formatDate format=&amp;quot;EEEE, MMMM dd, yyyy&amp;quot; date=&amp;quot;${event.startTime}&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;g:formatDate format=&amp;quot;h:mm&amp;quot; date=&amp;quot;${event.startTime}&amp;quot;/&amp;gt;-&amp;lt;g:formatDate format=&amp;quot;h:mm a&amp;quot; date=&amp;quot;${event.endTime}&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;g:if test=&amp;quot;${!event.archived}&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://jugevents.org/jugevents/event/${event.jugEventsId}&amp;quot;&amp;gt;Click HERE to register!&amp;lt;/a&amp;gt;&amp;lt;/g:if&amp;gt;&amp;lt;/h2&amp;gt;
  &amp;lt;div class=&amp;quot;entry&amp;quot;&amp;gt;
    &amp;lt;h2 class=&amp;quot;title&amp;quot;&amp;gt;Speaker/Topic:&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;${event.description.encodeAsTextile()}&amp;lt;/p&amp;gt;
    &amp;lt;h2 class=&amp;quot;title&amp;quot;&amp;gt;Location/Directions:&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;${event.location}&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;${event.directions.encodeAsTextile()}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the manifesto for software craftsmanship</title>
      <link>https://www.mattstine.com/2009/03/15/the-manifesto-for-software-craftsmanship/</link>
      <pubDate>Sun, 15 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/03/15/the-manifesto-for-software-craftsmanship/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://5386.openphoto.net&#34;&gt;&lt;img src=&#34;http://openphoto.net/cgi-bin/image?image_id=5386&#34; alt=&#34;&#34;&gt;&lt;/a&gt;So as I&#39;m sitting here thumbing through my &lt;a href=&#34;http://www.infoq.com&#34;&gt;InfoQ&lt;/a&gt; feed on &lt;a href=&#34;http://www.google.com/reader&#34;&gt;Google Reader&lt;/a&gt;, I come across the following posting: &lt;a href=&#34;http://www.infoq.com/news/2009/03/software_craftsmanship&#34;&gt;Software Craftsmanship Manifesto: A Call to Arms&lt;/a&gt;. It seems that a group of &amp;ldquo;programming patriots&amp;rdquo; has struck again (see the &lt;a href=&#34;http://agilemanifesto.org&#34;&gt;Manifesto for Agile Software Development&lt;/a&gt; - circa 2001), complete with a &amp;ldquo;founding document&amp;rdquo; look and feel. Clicking through &lt;a href=&#34;http://manifesto.softwarecraftsmanship.org/&#34;&gt;the source link&lt;/a&gt;, one finds the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As aspiring Software Craftsmen we are raising the bar of professional software development by practicing it and helping others learn the craft. Through this work we have come to value:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Not only working software, but also well-crafted software&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Not only responding to change, but also steadily adding value&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Not only individuals and interactions, but also a community of professionals&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Not only customer collaboration,but also productive partnerships&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;That is, in pursuit of the items on the left we have found the items on the right to be indispensable.&lt;/p&gt;
&lt;p&gt;© 2009, the undersigned. this statement may be freely copied in any form, but only in its entirety through this notice.&lt;/p&gt;
&lt;p&gt;You can&#39;t even imagine my excitement in reading this. This statement of values is something that I have been trying to get across without having the needed words for quite some time.&lt;/p&gt;
&lt;p&gt;The motivation, says the InfoQ article, is right on target:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The members of the manifesto group answered two key questions: “How will it help solve the problems of crap code?” and “What will motivate &amp;ldquo;The developer just churning out code&amp;rdquo; to become a craftsman?” - the distinction is between the developer who is just getting it done vs the one getting it done right.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have felt for a long time that the elements of craftsmanship are something sorely missing from our field. We, as programmers, are often so consumed with getting the job done that we do often neglect getting it done right. In our haste to move on to the next exciting project and/or technology, we neglect the tenets of simple design, test-driven development, merciless refactoring, clean code, etc. We&#39;re often quite satisfied with the &amp;ldquo;hacky solution here&amp;rdquo; and the &amp;ldquo;quick and dirty solution there.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Quite frankly, I&#39;ve had enough of that. I&#39;m not satisfied when the contractor building my house cuts corners. I&#39;m quite irritable when my mechanic does a less than thorough job with my car. Why should I expect my clients to settle for software built like that?&lt;/p&gt;
&lt;p&gt;So, to make this a practical rant, I thought I&#39;d share a couple of the things that we&#39;re doing in our team to move us in the right direction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First of all, we started a weekly &amp;ldquo;brown bag lunch/workshop,&amp;rdquo; inspired by Andy Hunt and Venkat Subramaniam&#39;s discussion in &lt;a href=&#34;http://pragprog.com/titles/pad/practices-of-an-agile-developer&#34;&gt;Practices of an Agile Developer&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, we selected books to read as a team that will point us in the right direction. Our first two titles were &lt;a href=&#34;http://pragprog.com/titles/tpp/the-pragmatic-programmer&#34;&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/a&gt; (see, there&#39;s craftsmanship right away!) and &lt;a href=&#34;http://www.pearsonhighered.com/educator/academic/product/1,3110,0132350882,00.html&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt; (sense a pattern yet?).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Third, we make a point of our weekly discussions to look at ways we can integrate the principles and practices that we&#39;re learning into our daily work. An example: We&#39;re working to integrate peer code review into our development process. The principles, patterns, and practices that we&#39;re picking up from Clean Code will be informing us as we review code and look for possible improvements.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, with that said, tonight I became a signatory of the manifesto. &lt;a href=&#34;http://manifesto.softwarecraftsmanship.org/sign/new&#34;&gt;Why don&#39;t you join me and fight the fight against crappy code!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>grailsdojo ajax file upload</title>
      <link>https://www.mattstine.com/2009/03/13/grailsdojo-ajax-file-upload/</link>
      <pubDate>Fri, 13 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/03/13/grailsdojo-ajax-file-upload/</guid>
      <description>&lt;p&gt;I&#39;m currently working on a &lt;a href=&#34;http://grails.org/&#34;&gt;Grails&lt;/a&gt; application with a requirement for uploading product images, which are subsequently resized into thumbnails of various sizes for different shopping screens. Since it took a bit of doing to get this done, I thought I&#39;d post my solution here in case anyone could benefit from it.&lt;/p&gt;
&lt;p&gt;First, to set the stage, I&#39;ve upgraded the application all the way to the newly released &lt;a href=&#34;http://www.springsource.org/node/1107&#34;&gt;Grails 1.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To start off, I naively attempted to use the built-in Prototype library to do the upload with a simple &lt;code&gt;&amp;lt;g:submitRemote/&amp;gt;&lt;/code&gt; tag. You might have guessed that this didn&#39;t work at all. Continuing to learn the hard way (without reading the manual I might add), I submitted this as a bug to the Grails project. Graeme ever so politely informed me that this was known and expected behavior, as Prototype doesn&#39;t support such a thing. However, it was Graeme that also tipped me off to try Dojo.&lt;/p&gt;
&lt;p&gt;So, continuing down this path, I proceeded to install the Grails Dojo plugin. Once this is done, a &lt;code&gt;&amp;lt;g:javascript library=&amp;quot;dojo&amp;quot;/&amp;amp;gt&lt;/code&gt; is supposedly all that is required to convert your Ajax calls from Prototype to Dojo. This turned out to not be the case for me, with Javascript errors popping up all over the place, not the least of which was that dojo.js seemed to be installed in an unexpected location via the plugin. The hacker in me simply copied this to the expected location and moved along. However, as I attempted to work with Dojo&#39;s file upload support, I discovered that the version of Dojo shipped with the plugin seemed at first glance to be way behind. Frustrated by this, I went ahead and stripped the Dojo plugin out and installed &lt;a href=&#34;http://download.dojotoolkit.org/release-1.2.3/dojo.js&#34;&gt;the latest version available (at this writing 1.2.3)&lt;/a&gt;, and set about to develop my solution.&lt;/p&gt;
&lt;p&gt;Here goes:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Add the necessary Dojo dependencies to your GSP:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;${createLinkTo(dir: &#39;js/dojo&#39;, file: &#39;dojo.js&#39;)}&amp;quot;
   djConfig=&amp;quot;parseOnLoad:true, isDebug:true&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;g:javascript&amp;gt;
   dojo.require(&amp;quot;dojo.io.iframe&amp;quot;);
&amp;lt;/g:javascript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2. Write a function using dojo.io.iframe to send the form:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function submitForm() {
   dojo.io.iframe.send({
      form: &#39;uploadProductImageForm&#39;,
      load: function (data) {
         dojo.byId(&#39;productImage&#39;).innerHTML = data;
      }
   });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. Create the file upload form:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;g:form name=&amp;quot;uploadProductImageForm&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;uploadProductImage&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
   &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;id&amp;quot; value=&amp;quot;${productInstance?.id}&amp;quot;/&amp;gt;
   &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;newProductImage&amp;quot;/&amp;gt;
   &amp;lt;span class=&amp;quot;button&amp;quot;&amp;gt;&amp;lt;input class=&amp;quot;add&amp;quot; type=&amp;quot;button&amp;quot; name=&amp;quot;uploadImage&amp;quot; value=&amp;quot;Upload Image&amp;quot; onclick=&amp;quot;submitForm()&amp;quot;/&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/g:form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4. Create the controller method:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def uploadProductImage = {
   def f = request.getFile(&#39;newProductImage&#39;)
   if (!f.empty) {

   def imagePath = grailsApplication.config.store.productImages.location

   //Create unique name for this image set based on current timestamp
   def name = &amp;quot;image&amp;quot; + new Date().getTime()

   //Store the file
   def file = new File(&amp;quot;${imagePath}/${originalFilename}&amp;quot;)
   f.transferTo(file)

   //Do some image processing (resizing, etc.)
   ...

   //Dojo requires returning the result nested in an HTML document containing a body and textarea tag. Do this with
   //Groovy&#39;s built-in MarkupBuilder

   def writer = new StringWriter()
   def xml = new MarkupBuilder(writer)

   xml.html {
     body {
       textarea {
         img(src: resource(dir: grailsApplication.config.store.productImages.webPath, file: product.mediumImage.name), width: &#39;250&#39;)
       }
     }
   }

   render writer.toString()
   }
   else {
      flash.message = &#39;file cannot be empty&#39;
      redirect(action: show)
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there you have it. Let me know what you think of this solution. It definitely works for me. You will notice that I didn&#39;t include an upload progress bar - I&#39;ll be doing this in a future iteration of the project. Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>im speaking at the march memphis jug meeting</title>
      <link>https://www.mattstine.com/2009/03/13/im-speaking-at-the-march-memphis-jug-meeting/</link>
      <pubDate>Fri, 13 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/03/13/im-speaking-at-the-march-memphis-jug-meeting/</guid>
      <description>&lt;p&gt;I learned a great deal about JMS from Mark Richards at last weekend&#39;s NFJS Gateway Software Symposium, and I thought I&#39;d share it with the Memphis Java community. Take a look at &lt;a href=&#34;http://www.memphisjug.org&#34;&gt;&lt;a href=&#34;http://www.memphisjug.org&#34;&gt;http://www.memphisjug.org&lt;/a&gt;&lt;/a&gt; for details!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>my ipod is on rice</title>
      <link>https://www.mattstine.com/2009/03/13/my-ipod-is-on-rice/</link>
      <pubDate>Fri, 13 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/03/13/my-ipod-is-on-rice/</guid>
      <description>&lt;p&gt;Let me set the stage for you. I&#39;m driving home happily listening to Ted Neward discuss the merits of Scala on the Javaworld podcast. As I pull into the driveway I see my wife waving frantically in the window. As geek brain struggles to process this, home brain kicks into gear. She needs me in the house now! I jump out of the car and slam the door shut, leaving all of the belongings I typically carry in the house.&lt;/p&gt;
&lt;p&gt;I enter the house to find that a wasp has some how gotten in and is terrorizing the family. What ensues is roughly 15 minutes of wasp hunting. Wasp dead - end of story. Or so I thought.&lt;/p&gt;
&lt;p&gt;As I&#39;m driving my iPod (attached to the iTrip FM transmitter/charger) typically sits in my lap (for some reason I get the least FM interference that way). What I didn&#39;t notice in my hasty departure from the vehicle is that my iPod nano flew out of the vehicle and was hanging by the iTrip cable. Unaware of this, I slammed the door on the cable and walked away.&lt;/p&gt;
&lt;p&gt;This in and of itself wasn&#39;t a huge problem. Leaving it that way for approximately 24 hours - most of which included rather steady rainfall - was.&lt;/p&gt;
&lt;p&gt;So, a quick Google search finds that the consensus approach seems to be sticking the iPod in a cup of dry rice to soak up the moisture. So there you have it - my iPod is on rice. I hope it works. Stay tuned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>its been a long time</title>
      <link>https://www.mattstine.com/2009/03/12/its-been-a-long-time/</link>
      <pubDate>Thu, 12 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2009/03/12/its-been-a-long-time/</guid>
      <description>&lt;p&gt;&amp;hellip;since I actively spent any time blogging. What you don&#39;t know is that it has been a long time since I&#39;ve done any writing whatsoever. The last two posts on this blog revolved around the birth of my first son, Grant Dawson, on May 16, 2009. This was one of several events that took place almost a year ago that sent me directly into a whirlwind of activity that found me barely keeping my head above water.&lt;/p&gt;
&lt;p&gt;It was also about this time that I found myself newly promoted into front-line management. The team that I entered first in 2000 as a Bioinformatics Intern during my last summer as an undergraduate, and then as a Software Engineer/Web Developer I following graduation in 2001, was now mine to lead. After doing this job now for nearly a year, I can safely say that my career as a developer has both prepared me for this role and left me completely bankrupt when faced with the responsibilities that are now mine. More on this to come.&lt;/p&gt;
&lt;p&gt;Another event that transpired in May was the sale of our first home. It had been on the market since March, and we &amp;ldquo;paused&amp;rdquo; the showings as Grant&#39;s arrival became imminent. It was near the end of May that we received both our first and our last post-Grant showing phone call. I remarked to Wendy - &amp;ldquo;these folks are going to buy the house.&amp;rdquo; And buy it they did. Unfortunately for us, we had no idea whatsoever where we were going to move. What ensued was a chaotic whirlwind of house hunting which ended with us making an offer on a house that wasn&#39;t even on the market. And that&#39;s the house I&#39;m sitting in while I write this first entry of 2009. Ask me to tell you the story sometime - it&#39;s a good one.&lt;/p&gt;
&lt;p&gt;So, why I&#39;m I here? Why not just leave the blogging task. After all, isn&#39;t blogging passe at this point?&lt;/p&gt;
&lt;p&gt;I credit my return to the blogosphere to an incredible book by Jared Richardson and Matthew Bass - &lt;a href=&#34;http://www.lulu.com/content/5925115&#34;&gt;Career 2.0: Take Control of Your Life&lt;/a&gt;. The basic premise of this book is to &amp;ldquo;Actively manage your career.&amp;rdquo; One of the ways by which the authors share how to do this is writing - sharing what you know with the community at-large. Of course what they shared was no surprise to me. I already knew all too well the career benefits associated with blogging. What I needed was a proverbial &amp;ldquo;kick in the pants.&amp;rdquo; And that&#39;s what Career 2.0 did for me. If you&#39;re in the software industry - take that back, I don&#39;t care what industry you&#39;re in (these principles are transcendent) - do yourself a favor and read this book. It will change something about your life, guaranteed.&lt;/p&gt;
&lt;p&gt;So, with that, let&#39;s start the conversation again. I&#39;m looking forward to where it might lead. Cheers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>little man</title>
      <link>https://www.mattstine.com/2008/08/14/little-man/</link>
      <pubDate>Thu, 14 Aug 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/08/14/little-man/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://4.bp.blogspot.com/_Vo63LRwAZbk/SKT-AuXbffI/AAAAAAAAAfQ/559p4D5Sv5E/s1600-h/P8110208.JPG&#34;&gt;&lt;img src=&#34;http://4.bp.blogspot.com/_Vo63LRwAZbk/SKT-AuXbffI/AAAAAAAAAfQ/559p4D5Sv5E/s400/P8110208.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;
Here&#39;s little man Grant himself smiling for the camera!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://picasa.google.com/blogger/&#34;&gt;&lt;img src=&#34;http://photos1.blogger.com/pbp.gif&#34; alt=&#34;Posted by Picasa&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>introducing grant dawson stine</title>
      <link>https://www.mattstine.com/2008/05/18/introducing-grant-dawson-stine/</link>
      <pubDate>Sun, 18 May 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/05/18/introducing-grant-dawson-stine/</guid>
      <description>&lt;p&gt;So I haven&#39;t blogged in quite awhile. I&#39;ve been rather busy - here&#39;s one VERY important reason why. Grant was born Friday, May 16, 2008, weighing in at 9 pounds 4 ounces and 22 inches long. Mom and baby are doing wonderfully, but as you can see, Dad is in a bit of shock!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://4.bp.blogspot.com/_Vo63LRwAZbk/SDCAMcjQJGI/AAAAAAAAAfA/5LZWAyRyOfs/s1600-h/P5160099.jpg&#34;&gt;&lt;img src=&#34;http://4.bp.blogspot.com/_Vo63LRwAZbk/SDCAMcjQJGI/AAAAAAAAAfA/5LZWAyRyOfs/s400/P5160099.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://1.bp.blogspot.com/_Vo63LRwAZbk/SDCAMsjQJHI/AAAAAAAAAfI/5frhZqimCJM/s1600-h/P5160126.jpg&#34;&gt;&lt;img src=&#34;http://1.bp.blogspot.com/_Vo63LRwAZbk/SDCAMsjQJHI/AAAAAAAAAfI/5frhZqimCJM/s400/P5160126.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>on our way to the gateway software symposium</title>
      <link>https://www.mattstine.com/2008/02/08/on-our-way-to-the-gateway-software-symposium/</link>
      <pubDate>Fri, 08 Feb 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/02/08/on-our-way-to-the-gateway-software-symposium/</guid>
      <description>&lt;p&gt;We&#39;re taking most of our team to the St. Louis, Missouri, edition of the &lt;a href=&#34;http://www.nofluffjuststuff.com&#34;&gt;No Fluff Just Stuff&lt;/a&gt; 2008 tour. This will be my first actual NFJS event. I attended the &lt;a href=&#34;http://www.thespringexperience.com&#34;&gt;Spring Experience&lt;/a&gt; in 2007, which was put on by the NFJS guys, so I expect this event in St. Louis to be great. Since we&#39;re based in Memphis, St. Louis is only about a 4 1/2 hour drive. We&#39;re all going to pile in a van and road trip. It should be a great time.&lt;/p&gt;
&lt;p&gt;I&#39;m going to have a hard time choosing sessions: Neal Ford, Scott Davis, David Geary, Jeff Brown, and Bryan Sletten all have sessions that I&#39;d like to attend, several of which are in conflict. I hope they do post-conference video delivery of these sessions just like they&#39;re doing for the Spring Experience.&lt;/p&gt;
&lt;p&gt;If anyone&#39;s going to be there, let&#39;s do dinner one night and you can meet some of the St. Jude team.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>grails 10 released</title>
      <link>https://www.mattstine.com/2008/02/05/grails-10-released/</link>
      <pubDate>Tue, 05 Feb 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/02/05/grails-10-released/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://grails.org/Home&#34;&gt;Grails&lt;/a&gt;, by far my favorite of the JVM dynamic language frameworks, was released this morning, with a snazzy, new, &amp;ldquo;Web 2.0 style&amp;rdquo; website to boot. Congratulations Graeme and company on all of your hard work!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>set conditional breakpoints in idea</title>
      <link>https://www.mattstine.com/2008/02/05/set-conditional-breakpoints-in-idea/</link>
      <pubDate>Tue, 05 Feb 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/02/05/set-conditional-breakpoints-in-idea/</guid>
      <description>&lt;p&gt;So yesterday I was attempting to debug an issue in a batch processing module within one of our applications. In short, an assertion was failing deep within Hibernate as it attempted to flush the session. Using a combination of various log statements, I had isolated the problem down to a particular record that the batch process was attempting to update. (BTW: I know you shouldn&#39;t be using Hibernate for batch processing - however, we&#39;re talking about batches of at most 1000 records here, not millions!) What I really wanted to do was set a breakpoint and examine the state of the objects at runtime; however, I dreaded the thought of clicking through the breakpoint time and time again until I got to the particular record that was causing the problem. &amp;ldquo;Surely,&amp;rdquo; I thought, &amp;ldquo;there must be a way to tell the debugger to only break under certain conditions.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;So, here&#39;s the code I wanted to examine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public Publication parsePublication(String inputLine)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   throws ParseException {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       Publication publication = new Publication();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       String[] fields = inputLine.split(&amp;quot;\t&amp;quot;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       publication.setPublicationType(fields[0]);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       ...&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       return publication;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Essentially, I wanted to break after &lt;code&gt;inputLine.split(&amp;quot;\t&amp;quot;);&lt;/code&gt; if and only if &lt;code&gt;fields[35]&lt;/code&gt; existed and was equal to &amp;ldquo;PM:16732581.&amp;rdquo; After examining IDEA&#39;s Breakpoint dialog, I noticed a section in the bottom right-hand corner that I&#39;d never played with before:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://2.bp.blogspot.com/_Vo63LRwAZbk/R6idFtXVh2I/AAAAAAAAAcw/DpuaZ5TQUCs/s1600-h/breakpoint_dialog.jpg&#34;&gt;&lt;img src=&#34;http://2.bp.blogspot.com/_Vo63LRwAZbk/R6idFtXVh2I/AAAAAAAAAcw/DpuaZ5TQUCs/s320/breakpoint_dialog.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As it turns out, this is exactly what I needed. If you click on the ellipsis next to the drop menu, you get a context-sensitive editor equipped with code completion:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://3.bp.blogspot.com/_Vo63LRwAZbk/R6idb9XVh3I/AAAAAAAAAc4/MENimxICxyk/s1600-h/condition_dialog2.jpg&#34;&gt;&lt;img src=&#34;http://3.bp.blogspot.com/_Vo63LRwAZbk/R6idb9XVh3I/AAAAAAAAAc4/MENimxICxyk/s400/condition_dialog2.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enter the desired conditions and voila! A conditional breakpoint. It worked like a charm the very first time, and I only had to inspect the breakpoint when the problematic record came up.&lt;/p&gt;
&lt;p&gt;Another nice feature of the conditional breakpoint is that if some sort of exception (such as a NullPointerException) occurs while attempting to evaluate the conditional expression, IDEA pops up a dialog informing you what happened and asking if you want to stop at the breakpoint or continue. Nice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>a javascript code prettifier</title>
      <link>https://www.mattstine.com/2008/02/04/a-javascript-code-prettifier/</link>
      <pubDate>Mon, 04 Feb 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/02/04/a-javascript-code-prettifier/</guid>
      <description>&lt;p&gt;I came across a &lt;a href=&#34;http://code.google.com/p/google-code-prettify/&#34;&gt;link&lt;/a&gt; today that would allow you to post &amp;ldquo;pretty&amp;rdquo; code in any HTML page. I&#39;ve had plenty of problems (as have others) posting well-formatted source code to my Blogger-based blog. I&#39;ve wanted to correct this problem for some time, and this project appears to be a decent solution. Here&#39;s an example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function chooseWinner() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   $(&#39;p3&#39;).removeClassName(&#39;winner&#39;);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   participantBo.chooseWinnerForEvent(eventId, function(data) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      people = $A(data);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      updateDivs();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      intervalId = setInterval(doShift, 500);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   });&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that isn&#39;t too bad is it? There seems to be a bit of a delay as the Javascript is loaded, but I think that&#39;s more a symptom of my connection than it is a problem with the script.&lt;/p&gt;
&lt;p&gt;Here&#39;s how you can take advantage of this solution (quoted from &lt;a href=&#34;http://google-code-prettify.googlecode.com/svn/trunk/README.html&#34;&gt;&lt;a href=&#34;http://google-code-prettify.googlecode.com/svn/trunk/README.html&#34;&gt;http://google-code-prettify.googlecode.com/svn/trunk/README.html&lt;/a&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://google-code-prettify.googlecode.com/files/prettify-small.zip&#34;&gt;Download&lt;/a&gt; a distribution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Include the script and stylesheets in your document&lt;br&gt;
(you will need to make sure the css and js file are on your server, and&lt;br&gt;
adjust the paths in the script and link tag)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;link href=&amp;quot;prettify.css&amp;quot; type=&amp;quot;text/css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; /&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;prettify.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;onload=&amp;quot;prettyPrint()&amp;quot;&lt;/code&gt; to your&lt;br&gt;
document&#39;s body tag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify the stylesheet to get the coloring you prefer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Put code snippets in&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
   &lt;pre class=&#34;prettyprint&#34;&gt;...&lt;/pre&gt;  
&lt;p&gt;or &lt;code class=&#34;prettyprint&#34;&gt;&amp;hellip;&lt;/code&gt;&lt;br&gt;
and it will automatically be pretty printed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the spring experience 2007 videos on the way</title>
      <link>https://www.mattstine.com/2008/02/04/the-spring-experience-2007-videos-on-the-way/</link>
      <pubDate>Mon, 04 Feb 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/02/04/the-spring-experience-2007-videos-on-the-way/</guid>
      <description>&lt;p&gt;I got an awesome email today&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are happy to announce that the video/audio streaming from TSE 2007 will be available online the week of February 11th for you.  You will have the opportunity to see/hear the TSE 2007 presentations you were not able to make at TSE 2007 due to all of the great sessions available per time period.  We have captured the entire session length including any demos/live coding.  Please look for the email from us next Monday, February 11th with the details about viewing the session content online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;m extremely excited about this. For two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I didn&#39;t get to finish my reviews of the sessions that I attended. Now that it has been several weeks since the conference, I don&#39;t feel like my memory of them is good enough to do a fair review. Now I can do a refresh and write!&lt;/li&gt;
&lt;li&gt;There were several sessions that I wanted to attend that I couldn&#39;t - now I get to attend&amp;hellip;and write!
Look forward to some more reviews from The Spring Experience 2007 in the coming weeks!&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>practical jruby on rails web 20 projects</title>
      <link>https://www.mattstine.com/2008/01/25/practical-jruby-on-rails-web-20-projects/</link>
      <pubDate>Fri, 25 Jan 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/01/25/practical-jruby-on-rails-web-20-projects/</guid>
      <description>&lt;p&gt;Are Java&#39;s days numbered as a web development technology? With buzzwords like Ruby, Rails, and Web 2.0 zipping around the web development community, one may begin to wonder. Could Java&#39;s lifespan be extended by finding synergy between Java and Ruby? On the scene comes JRuby, the definitive implementation of Ruby for the JVM. In his new book from Apress, Ola Bini guides the reader through the development of four Web 2.0 projects using JRuby on Rails. I think that Bini does a masterful job of always using the right tool for the right job. &lt;a href=&#34;http://java.dzone.com/reviews/practical-jruby-rails-web-20-p&#34;&gt;Read my review for complete details.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mid year review my professional development goals for 2007 2008</title>
      <link>https://www.mattstine.com/2008/01/02/mid-year-review-my-professional-development-goals-for-2007-2008/</link>
      <pubDate>Wed, 02 Jan 2008 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2008/01/02/mid-year-review-my-professional-development-goals-for-2007-2008/</guid>
      <description>&lt;p&gt;Back in July I posted my professional development goals for the year (My performance review is annually in July, so it&#39;s a good time to set goals.), and it seemed like a good idea to take a look at my progress while doing the &amp;ldquo;New Year&#39;s Resolution&amp;rdquo; thing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn Groovy and Grails&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Andy and Dave suggest learning a new language every year, so this seemed like a good goal for me. I can&#39;t say that I&#39;ve truly learned Groovy and Grails in depth, but I did learn them enough &lt;a href=&#34;http://www.memphisjug.org/october25%2C2007&#34;&gt;to do a presentation on them&lt;/a&gt; (as well as Ruby, JRuby, and Rails) at our Java User Group meeting  in October, so I&#39;ve effectively touched on two languages and two frameworks for those languages. I&#39;ve since gotten interested in Scala as well. At any rate, I&#39;d like to go deeper w/ Groovy and Grails as I have time, which is scarce!&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Release HallKeeper v1.0 as part of #1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This project seems destined to fail. I haven&#39;t worked on it in any meaningful way since the summer. I&#39;ve thought about it in the past week, and I&#39;d actually like to try doing it in straight Java POJOs with Spring and Hibernate since I&#39;m more well-versed in that area. At any rate, it really is my lack of spare time that keeps this one on the perpetual back burner.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Read and LEARN the following books:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;* The Definitive Guide to Grails - Rocher
* The Pragmatic Programmer - Hunt, Thomas
* Computer Algorithms: Introduction to Design &amp;amp; Analysis - Baase, Van Gelder
* Concepts of Programming Languages: Sebesta
* Groovy in Action - Konig  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve pretty much finished #1, got started on #2, and haven&#39;t really touched the last three. Again, the needs of the moment have necessitated I focus on other areas, particularly other books. Recent projects have pointed me to three additional books I&#39;d really like to cover this year, so I may not get to my original list. Here are the titles:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Working Effectively with Legacy Code - Feathers  

* POJOs in Action - Richardson
* Domain Driven Design - Evans  
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Review two books for the JavaLobby/DZone book review team&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is one I&#39;ve hit the nail on. I just completed my second book review, which will be published some time in the next few weeks. My first review, &lt;a href=&#34;http://matt-stine.blogspot.com/2007/10/ajax-construction-kit-building-plug-and.html&#34;&gt;Ajax Construction Kit: Building Plug-and-Play Ajax Applications&lt;/a&gt;, was published in October 2007. These have been rather time consuming and have kept me from other projects, so I don&#39;t plan to take any more reviews this year.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Pass the Sun Certified Programmer for the Java 2 Platform, Standard Edition 5.0 Exam&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Haven&#39;t touched this one yet. Preparing for this will be one of my foci in the coming weeks.&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Write one Java/software development blog article per week&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I haven&#39;t done so hot on this one. OK, let&#39;s be really honest. I haven&#39;t come close. However, my recent flurry of entries on The Spring Experience 2007 have gotten me into a bit of a groove. I&#39;m going to try to keep up the momentum and finish this year strong.&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Attend JavaOne 2008 or similar conference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;ve actually traveled twice since my original post. My first trip was to the &lt;a href=&#34;http://nerlscd.biotech.cornell.edu/&#34;&gt;Northeast Life Sciences Core Directors Meeting&lt;/a&gt; last November at Cornell University in Ithaca, NY. The purpose of this trip was to present and generate interest around our open source shared resource management system for core facilities, &lt;a href=&#34;http://stjude-srm.sourceforge.net/&#34;&gt;STJUDE-SRM&lt;/a&gt;. The trip was a great success. My second trip really fulfills this goal, as I attended &lt;a href=&#34;http://www.thespringexperience.com/conference/hollywood/2007/12/index.html&#34;&gt;The Spring Experience 2007&lt;/a&gt; in Hollywood, FL. This proved to be one of the best technical conferences I&#39;ve ever attended, and also one of the most fun!&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Start a Memphis/Mid-South Area Java User Group&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don&#39;t think this goal could have gone any better than it has. In late July I started a &lt;a href=&#34;http://groups.google.com/group/memphis-mid-south-jug&#34;&gt;Google Group&lt;/a&gt; and a small Google Page Creator website to attempt to drum up interest in a Java User Group for the Memphis, TN and surrounding Mid-South area. On July 23, 2007, along comes Diane Tabulog, a technical recruiter with local company &lt;a href=&#34;http://www.vaco.com/Technology/tech_about.htm&#34;&gt;Vaco Technology&lt;/a&gt;, who convinces her company to throw its support behind our JUG. All of a sudden we have an offer for a meeting location, food budget, giveaways, etc. Later, Clayton Naeve, our CIO at St. Jude, agreed to let us use our awesome conference room at our division&#39;s new offices at 160 Shadyac Avenue to meet, as Vaco&#39;s facilities were a bit small. On August 15, &lt;a href=&#34;http://weblogs.java.net/blog/caroljmcdonald&#34;&gt;Carol McDonald&lt;/a&gt;, a Java Technology Evangelist from Sun Microsystems, offered to speak at our JUG, and we signed her up for the first meeting. Little by little, all of the necessary pieces started to fall into place, including additional free giveaways from Sun, O&#39;Reilly, Atlassian, and JetBrains. &lt;a href=&#34;http://www.memphisjug.org/september20%2C2007&#34;&gt;The first meeting&lt;/a&gt; was a great success, and since then we&#39;ve had two more successful meetings. Our next meeting is Thursday, January 17, 2008. Find out more at &lt;a href=&#34;http://www.memphisjug.org&#34;&gt;&lt;a href=&#34;http://www.memphisjug.org&#34;&gt;http://www.memphisjug.org&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>web application data access patterns keith donald</title>
      <link>https://www.mattstine.com/2007/12/21/web-application-data-access-patterns-keith-donald/</link>
      <pubDate>Fri, 21 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/21/web-application-data-access-patterns-keith-donald/</guid>
      <description>&lt;p&gt;Well, after a short hiatus of getting back to &amp;ldquo;real&amp;rdquo; work, I&#39;m going to attempt to squeeze in another Spring Experience 2007 entry. This particular session was my first of Friday morning. I&#39;ve always enjoyed Keith Donald as a speaker, having first heard him at &lt;a href=&#34;http://www.theserverside.com/tt/articles/content/JIApresentations/Donald.pdf&#34;&gt;TheServerSide.com&#39;s Java In Action conference in 2005&lt;/a&gt;, and again during his &lt;a href=&#34;http://mattatjavaone2007.blogspot.com/2007/05/java-university-developing-enterprise.html&#34;&gt;Java University session at JavaOne 2007&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keith began with a discussion of why we need patterns. In his opinion, patterns simply provide a way of thinking about a particular approach to a problem. One could liken them to blueprints. They typically have a name, a description of the problem being solved, a description of the solution approach, and finally a selection of implementation guidelines and considerations. Pretty nice summation.&lt;/p&gt;
&lt;p&gt;The particular patterns that Keith planned to discuss surrounded the different data access patterns typically found in web applications.&lt;/p&gt;
&lt;p&gt;Keith began by discussing the &amp;ldquo;Unit of Work&amp;rdquo; pattern, which he defined as a unit of interaction with a shared resource that executes independently of other units. These interactions exhibit &lt;a href=&#34;http://en.wikipedia.org/wiki/ACID&#34;&gt;ACID properties&lt;/a&gt;, and a database transaction provides a typical  example. In the context of an ORM such as Hibernate, a Unit of Work tracks changes to the object graph during a transaction and then synchronizes those changes with the database when the transaction is complete. Keith followed this discussion with an implementation example from his &amp;ldquo;Reward Network&amp;rdquo; sample application.&lt;/p&gt;
&lt;p&gt;Keith followed this discussion with two of what I&#39;ll call &amp;ldquo;subpatterns&amp;rdquo; of the Unit of Work pattern: Pessimistic and Optimistic Locking. With pessimistic locking, you prevent other units from accessing your data during a given unit of work, and then release the &amp;ldquo;lock&amp;rdquo; as soon as possible. This locking is performed to prevent a &lt;a href=&#34;http://en.wikipedia.org/wiki/Race_condition&#34;&gt;race condition&lt;/a&gt;, resulting in an inconsistent state in your model. Keith briefly illustrated implementation of pessimistic locking with Hibernate.&lt;/p&gt;
&lt;p&gt;It&#39;s always interesting when someone asks a slightly off-topic question which ends up in a take home gem of information. At this point, someone asked if the implementations that Keith was showing showcased Spring&#39;s Hibernate support. To this Keith surprised me by answering (and I paraphrase), &amp;ldquo;Hibernate&#39;s native API&#39;s are much more mature and powerful now, so we recommend you use those rather than Spring&#39;s Hibernate API wrapper. Why add another dependency?&amp;rdquo; He then proceeded to recommend Rossen Stoyanchev&#39;s Saturday morning session on &amp;ldquo;Working with Hibernate in a Spring 2.5 Environment&amp;rdquo; (blog entry to come later!). One of the better quotes of the conference came during this aside as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Whenever you can eliminate a dependency, you should.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keith Donald&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, back to the presentation. Keith then moved into a discussion of Optimistic Locking. Here, within a business transaction that executes across a series of system transactions, you use optimistic locking to prevent corruption of shared data. An examples is where several users can edit account information concurrently, but the frequency of concurrent access is fairly low. Data integrity is still at risk, so you use optimistic locking to handle those infrequent cases. Keith them demonstrated the use of &lt;a href=&#34;http://www.hibernate.org/hib_docs/reference/en/html/transactions.html#transactions-optimistic&#34;&gt;Hibernate versioning to implement optimistic locking&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keith next moved into a discussion of the controversial &amp;ldquo;Open Session in View&amp;rdquo; pattern. This is a specialized technical pattern where by the Hibernate session is kept open for the duration of a given web request. It is generally used as a &amp;ldquo;quick fix&amp;rdquo; to prevent lazy loading exceptions in the view tier. This is generally considered a bad thing, as you end up with a great deal of &amp;ldquo;N+1 Select&amp;rdquo; situations while rendering the view, resulting in way too much SQL executed against the database. Typically, the need to use this pattern reveals a flaw in the design of your model or queries. For example, since you generally know how far in the object graph you&#39;ll need to go for a specific view, you should load those relationships eagerly for that use case. You may also consider whether or not a given object association is appropriate to begin with.&lt;/p&gt;
&lt;p&gt;The final major pattern that Keith discussed was the &amp;ldquo;Conversational Persistence Context&amp;rdquo; pattern that is present in the upcoming Spring Web Flow 2.0 release. It is essentially a more flexible variation of the Open Session in View pattern, where by you can have an open session spanning multiple requests during a long-running user interaction context, or &amp;ldquo;conversation.&amp;rdquo; To be perfectly honest, I still don&#39;t quite &amp;ldquo;get&amp;rdquo; this pattern beyond that, probably because I don&#39;t know much about Web Flow or it&#39;s cousins (e.g. Seam, Web Beans JSR-299).&lt;/p&gt;
&lt;p&gt;Keith closed with a very brief description of Master Detail, where you show an overview of objects in a collection and then allow drilling down into object details, and Paging, where you allow users to easily browse through a list of items of interest. I raised a point of contention with Keith at this point. His example implementation showed delegation of the paging concern to the DAO layer, rather than implementing that concern in the View layer. When I asked him where he thought it belonged, he thought it was obvious that it belonged in the DAO layer. I then let on that we had this debate in our team and decided the the concern belonged in the View layer. Why should I run the same query multiple times just to page through the data? Why not load the entire data set and then let the View tier decide how to page through it? Keith gracefully acknowledged my point.&lt;/p&gt;
&lt;p&gt;All in all, this was a great session, if for no other reason than it reminded me of some best practices in this area and let me in on the little secret about using native Hibernate API&#39;s rather than Spring&#39;s Hibernate template. Nice job, Keith.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>goodbye spring experience 2007</title>
      <link>https://www.mattstine.com/2007/12/15/goodbye-spring-experience-2007/</link>
      <pubDate>Sat, 15 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/15/goodbye-spring-experience-2007/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/TheSpringExperience2007/photo#5144397897054158610&#34;&gt;&lt;img src=&#34;http://lh3.google.com/matt.stine/R2SSoZUt_xI/AAAAAAAAAYQ/Ijb1Py3pDN4/s288/DSCN0746.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;Well it had to end eventually. As you can see, I&#39;m hopelessly behind on my blog entries, having only made it through my first day of sessions. I&#39;ve still got several more I intend to cover (I probably won&#39;t do the last two as I started blanking out - I think my brain was pretty much melted by this afternoon). Look for those entries in the coming days. Many thanks go out to &lt;a href=&#34;http://www.nofluffjuststuff.com/&#34;&gt;No Fluff Just Stuff &lt;/a&gt;and &lt;a href=&#34;http://www.springsource.com/&#34;&gt;SpringSource&lt;/a&gt; for putting on an awesome conference!&lt;/p&gt;
&lt;p&gt;There were several things I really liked about this conference that I believe set it apart from most of the conferences that I have attended.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The technical content was top-notch - Spring topics from the developers themselves. There were also quite a few architecture/design sessions that were also superb.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The session length, at 90 minutes, provided ample time to cover each topic pretty well in-depth. The session scope cooperated with this, as most of the speakers didn&#39;t try to do too broad of subjects for the time allotted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It was a smaller conference, at a little over 500 developers. This meant you weren&#39;t trying to weave through crowds to get in queues for packed out sessions like at JavaOne. Much less stressful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The atmosphere was just plain fun. Everyone was laid back. I mean, how many conferences give you a bobblehead doll on the first night! I now issue a call out to Sun that we must have a James Gosling bobblehead doll issued to every attendee at JavaOne 2008!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The food was top notch - every meal was provided, buffet-style (no boxes!!!). I ate way too much.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The location was great. You can&#39;t beat a front-on view of the Atlantic Ocean from the conference center balcony during session breaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SWAG! Let&#39;s see what all I collected: a computer bag, a binder with all of the slides, two t-shirts, a hat, sunglasses, a beach towel, a Frisbee, a NFJS Anthology, a bobblehead doll, a Spring Source toolkit (two screwdrivers and a measuring tape - you&#39;d have to see it)&amp;hellip;what&#39;s more, Jay Zimmerman distributed the left-over swag after the conference closed. I picked up two more computer bags full of swag and two conference binders to give away at the January and February Memphis JUG meetings!
Once again, thanks for a great conference. It was easily the best all-around that I&#39;ve attended.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/TheSpringExperience2007/photo#5144397905644093234&#34;&gt;&lt;img src=&#34;http://lh5.google.com/matt.stine/R2SSo5Ut_zI/AAAAAAAAAYg/BUmwMhV_HoQ/s288/DSCN0752.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the state of the art in dependency injection rod johnson</title>
      <link>https://www.mattstine.com/2007/12/15/the-state-of-the-art-in-dependency-injection-rod-johnson/</link>
      <pubDate>Sat, 15 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/15/the-state-of-the-art-in-dependency-injection-rod-johnson/</guid>
      <description>&lt;p&gt;This was a truly fascinating talk. If you ever wanted to learn the entire history and landscape of dependency injection (DI), this was your opportunity. I really didn&#39;t realize how deep of a topic DI really is.&lt;/p&gt;
&lt;p&gt;According to Rod, DI had its beginnings in 2002, in the Interface 21 Framework that was born from his seminal work, &lt;a href=&#34;http://www.amazon.com/Expert-One-One-Design-Development/dp/1861007841&#34;&gt;Expert One-on-One J2EE Design and Development&lt;/a&gt;. In the beginning, DI was done solely through setter injection (SI), with external metadata (usually in XML). 2003 gave us Spring 0.9, which had the same DI model, but added FactoryBeans for indirection and proxy-based AOP (enabling among other things, declarative transaction management). With Spring, DI was always just one enabler of a complete enterprise solution. Contrast that with &lt;a href=&#34;http://www.picocontainer.org/&#34;&gt;PicoContainer&lt;/a&gt;, also arriving on the scene in 2003, which was an ultra-lightweight DI-only container. PicoContainer brought us several innovations, including constructor injection, automatic resolution by type, and an attempt to dispense with external configuration.&lt;/p&gt;
&lt;p&gt;Rod then discussed the Pros and Cons of Constructor Injection (CI). On the Pro side, we see that CI is great for immutable objects, can be used with existing code, enforces that the necessary dependencies are provided at object construction, and allows developers to dispense with methods like afterPropertiesSet(). On the Con side, there are no default arguments in Java, which forces us to ALWAYS provide all of the necessary dependencies, constructor overriding can be somewhat messy, and constructor argument names are not usually available through reflection, which forces us to depend on argument order for dependency resolution.&lt;/p&gt;
&lt;p&gt;Spring 1.0, which arrived in late 2003, incorporated some of PicoContainer&#39;s innovation: CI, &amp;ldquo;Autowiring&amp;rdquo; by type and by name, as well as the ability to mix CI and SI. Here Rod reflected on Spring&#39;s pragmatic philosophy, whereby they are more than willing to incorporate the good ideas that others had first.&lt;/p&gt;
&lt;p&gt;Spring 1.1 brought us method injection, a unique Spring feature, which solved the problem of long-lived managed objects which depend on short-lived objects. It also brought us Factory Methods. You now had the ability to create objects through invoking static factory methods or instance methods on other beans.&lt;/p&gt;
&lt;p&gt;With the finalization of the &lt;a href=&#34;http://java.sun.com/products/ejb/docs.html&#34;&gt;EJB 3.0 standard&lt;/a&gt; in May 2006, several new ideas became available in the world of DI: annotation-based DI, annotations for callback methods (e.g. @PostConstruct), scanning for annotations without any external configuration needed for a deployment unit, and field injection (FI). These EJB standard brought with it a new philosophy - that annotations are a superior model and that externalization should be a second-class citizen. The Pros of this standard? One big one - no configuration is necessary for simple cases. The Cons? Rod listed several: resources could only be injected from JNDI, no CI, limited control over object lifecycle, unsuitability for fine-grained object graphs, effectively usable ONLY with annotations, as the XML configuration option is so verbose, and it isn&#39;t just DI - it brings along with it enforcement of many obsolete EJB concepts (such as bean instance pooling).&lt;/p&gt;
&lt;p&gt;Spring 2.0 arrived in late 2005 with its own share of innovations: integration with &lt;a href=&#34;http://www.eclipse.org/aspectj/&#34;&gt;AspectJ&lt;/a&gt;, the ability to inject anything with an AspectJ aspect via @Configurable, namespaces to provide an XML-based DSL for external configuration, the @Required annotation, and pluggable scopes to manage the object lifecycle. About that same time, JBoss Seam introduced many strange ideas (that I didn&#39;t quite grasp from Rod&#39;s explanation): bijection, outjection, and subversion of control.&lt;/p&gt;
&lt;p&gt;Some additional players on the field include Spring Java Config, which is a DSL for configuration in Java, &lt;a href=&#34;http://code.google.com/p/google-guice/&#34;&gt;Google Guice 1.0&lt;/a&gt;, and the &lt;a href=&#34;http://jcp.org/en/jsr/detail?id=299&#34;&gt;JSR-299 Web Beans spec&lt;/a&gt;, which Rod described as &amp;ldquo;blogware&amp;rdquo; in that there is currently no available implementation.&lt;/p&gt;
&lt;p&gt;Finally we got to Spring 2.5, released last month. Rod didn&#39;t have his slides printed or available on the web (argh!), so about this time my hand was really hurting from taking furious notes, and I simply gave up. Fortunately, most of what Rod covered was redundant from some of the other sessions, so I&#39;ll have or will blog about it later. About the only thing I really don&#39;t have good notes on is Spring Java Config, which he discussed pretty extensively. If you want to learn more about it, check out &lt;a href=&#34;http://www.springframework.org/javaconfig&#34;&gt;&lt;a href=&#34;http://www.springframework.org/javaconfig&#34;&gt;http://www.springframework.org/javaconfig&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ajax integration guide for 2008 jeremy grelle</title>
      <link>https://www.mattstine.com/2007/12/14/ajax-integration-guide-for-2008-jeremy-grelle/</link>
      <pubDate>Fri, 14 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/14/ajax-integration-guide-for-2008-jeremy-grelle/</guid>
      <description>&lt;p&gt;This talk looked really exciting going in. Jeremy is a member of the Spring Web Products team and the lead of Spring Faces, as well as a member of the JSF 2.0 Expert Group. He describes himself as the resident Ajax freak at SpringSource. Jeremy began by discussing the current Ajax landscape, highlighting what he believes are the important features a successful framework must deliver, and then identifying the frameworks he considers to be the cream of the crop. No surprises here on the list: Prototype/Scriptaculous, jQuery, YUI, Ext, and Dojo. He then gave a brief high-level overview of each framework - I really didn&#39;t learn anything new here, as I&#39;ve been following these frameworks for quite awhile. He mentioned the commonality that all of these frameworks are about more than asynchronous client-server communication - they&#39;re about improving your client-side code and user experience. See Dion&#39;s May 2007 comment that Ajax &amp;ldquo;was never about the acronym - it&#39;s about building killer websites.&amp;rdquo; What is good about all of these frameworks is that you can use all of them in an unobtrusive manner and progressively enhance your UI. This gives you the ability to only Ajaxify what you need and also get graceful degradation.&lt;/p&gt;
&lt;p&gt;In the second portion of his talk, Jeremy talked about connecting to Spring. I was really hoping that the &amp;ldquo;goods&amp;rdquo; would be delivered here. He started by mentioning DWR, which I think is a really nice framework. It merited 2 slides and no demo (even though there was a slide mentioning a demo). I don&#39;t think Jeremy really cares for it or GWT, as he sort of lumped them together and didn&#39;t mention them again. I do appreciate his point that neither really allows you to harvest any existing controlling infrastructure that we may have built using Spring MVC or another framework.&lt;/p&gt;
&lt;p&gt;Jeremy then moved into what he considers the better way to do it, which is the progressive enhancement I mentioned above. He took the existing Spring Booking MVC + Web Flow example application and ajaxified portions of it. He did this using an interesting combination of Apache Tiles, some Javascript &amp;ldquo;pseudo-AOP&amp;rdquo; he lifted from the SpringFaces project, and a bit of Dojo. It seemed to work really well, but it wasn&#39;t immediately clear how this type of technology was going to be made available to us as developers. He said something along the lines of &amp;ldquo;you don&#39;t have to be using JSF to use this Javascript, so we probably need to change the name to something else.&amp;rdquo; I hope they figure out soon so I can get my hands on it. :-)&lt;/p&gt;
&lt;p&gt;He closed by briefly discussing REST&#39;s place in the future of Spring Web. The ideal scenario, according to Jeremy, is that we will be able to request different representations of the same resource. For example, we could request HTML for full page display or partial DOM updates, and JSON for intelligent widgets like the Dojo table.&lt;/p&gt;
&lt;p&gt;It looks like a lot of exciting things will happen in 2008. I hope I don&#39;t have to wait too long.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>whats new in spring 25 juergen hoeller</title>
      <link>https://www.mattstine.com/2007/12/14/whats-new-in-spring-25-juergen-hoeller/</link>
      <pubDate>Fri, 14 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/14/whats-new-in-spring-25-juergen-hoeller/</guid>
      <description>&lt;p&gt;This was my second talk of TSE 2007. I have to admit I chose it by process of elimination - none of the second session talks particularly jumped out and grabbed me like Chris Richardson&#39;s talk.&lt;/p&gt;
&lt;p&gt;Juergen is the project lead for the Spring Framework, so he was the obvious choice to give this talk. Juergen split it up into three sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Platforms&lt;/li&gt;
&lt;li&gt;Annotation Configuration&lt;/li&gt;
&lt;li&gt;AspectJ Support
To break down part one as quickly as possible, Spring supports virtually EVERYTHING. You get JDK 1.4 all the way to Java 6, including all of the new API&#39;s in Java 6. It fully supports Java EE 5 while remaining backward compatible all the way to J2EE 1.3.  You can now deploy a Spring ApplicationContext as a RAR file, and you also get full JCA 1.5 support (if you want to know what that means, don&#39;t ask me :-)). Quite notable was the fact that they have worked with IBM to support WebSphere&#39;s proprietary transaction manager. Also interesting was Spring&#39;s continuing strong support for OSGi as an alternative enterprise runtime.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The annotation configuration part of the talk was quite fascinating. I&#39;m something of an annotations junkie - I have to be careful about that. At any rate, it was so good that I was interested enough to attend Juergen and Mark Fisher&#39;s later talk that was completely dedicated to the subject. I&#39;ll leave the details for my entry on that talk.&lt;/p&gt;
&lt;p&gt;The final portion, on AspectJ support, was equally fascinating. The first new feature was the ability to advise specific beans by name rather than by type using AspectJ. This was made even sweeter by the fact that you can use pattern matching in your  definition.  Very exciting was the ability to do AspectJ load-time weaving, meaning you can use the power of AspectJ at runtime without involving the AspectJ compiler. Unfortunately, this isn&#39;t available across all appservers. I didn&#39;t get a chance to ask and comfirm, but it seems that JBoss (our primary appserver) does not support this. GlassFish, Weblogic, OC4J, and Tomcat were all mentioned as being able to handle it.&lt;/p&gt;
&lt;p&gt;The most interesting part of this talk for me was the ability to annotate a class as @Configurable, and then do dependency injection on it even thought it isn&#39;t managed by Spring. You could do this in Spring 2.0, but you had to use the AspectJ compiler. Now, with load-time weaving, you can do this at runtime! I really could have used this recently when I wanted to inject a single dependency into a class that was really overkill to manage as a Spring bean. Since I&#39;m using Spring 2.5 in this project, I can go back and try this feature. Exciting!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>enterprise java and the changing of the guard</title>
      <link>https://www.mattstine.com/2007/12/13/enterprise-java-and-the-changing-of-the-guard/</link>
      <pubDate>Thu, 13 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/13/enterprise-java-and-the-changing-of-the-guard/</guid>
      <description>&lt;p&gt;Greetings from &lt;a href=&#34;http://www.thespringexperience.com&#34;&gt;The Spring Experience 2007&lt;/a&gt; in Hollywood, FL. So far this has been a great conference - I&#39;m currently waiting for my third session of the day to start. As much as I enjoy all of the hype and eye candy at JavaOne, I really get a lot more out of these smaller conferences as you&#39;re not running around stressed out trying to weave through thousands of geeks as you move from session to session (or more accurately, from session to queue!).&lt;/p&gt;
&lt;p&gt;I wanted to post a few insights that I gained from Rod Johnson&#39;s keynote last night (the title of this entry). The basis for Rod&#39;s presentation was a Gartner report entitled &amp;ldquo;&lt;a href=&#34;http://www.gartner.com/DisplayDocument?ref=g_search&amp;amp;id=525420&amp;amp;subref=simplesearch&#34;&gt;Trends in Platform Middleware: Disruption Is in Sight&lt;/a&gt;.&amp;rdquo; To summarize, there are many converging forces in the enterprise Java space that are causing or will probably cause a great deal of disruption in the way we develop enterprise Java applications. These forces include our collective experience with application servers, the rediscovery of object-oriented or POJO-based programming, open source innovation, non-Java challengers (.NET, RoR), the rise of SOA, and Rich Internet Applications. Rod sees a big movement from the &amp;ldquo;old guard,&amp;rdquo; which he described as the &amp;ldquo;J2EE Stovepipe Architecture&amp;rdquo; which was based primarily around the idea of distributed objects, to a world in which many of the highest volume Java applications don&#39;t even use a Java EE application server. An interesting point was the stagnation in job requirements for the big name application servers coupled with the BZ Research statistic that 64% of Java application developers are using Tomcat for production deployment. Yet another force for disruption is the emergence of OSGi, which allows developers to modularize applications and provides facilities for versioned components, fine-grained redeployment, and library conflict resolution - all features that Java EE currently does not and perhaps cannot address. Open source provides yet more disruption, as developers have become participants in rather than spectators of the development of Java enterprise solutions. Innovation is now primarily coming from the open source world. All of this culminated in the rather telegraphed conclusion that Rod (and also the Gartner report apparently) believes that Spring is uniquely positioned to provide the best value for ongoing Enterprise Java development in the face of the current trends. Of course, what would you expect him to say? :-) [&lt;br&gt;
](&lt;a href=&#34;http://www.gartner.com/DisplayDocument?ref=g_search&amp;amp;id=525420&amp;amp;subref=simplesearch&#34;&gt;http://www.gartner.com/DisplayDocument?ref=g_search&amp;amp;id=525420&amp;amp;subref=simplesearch&lt;/a&gt;)&lt;br&gt;
I do tend to agree with him. The pace at which Spring is innovating and addressing the Java enterprise pain points far outpaces the pace of the JCP. It just takes too long to design specs by committee. One of the more wise things that Spring does is to learn from and in most cases accommodate the changing landscape of Java EE and integrate the best features directly into the framework. I for one am glad to be developing applications with Spring, as it makes it very easy to do the things I want to do and write quality code that isn&#39;t directly dependent on an infrastructure framework. Generally, it stays out of my way.&lt;/p&gt;
&lt;p&gt;More to come on the sessions I&#39;ve attended thus far.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>improving application design with a rich domain model chris richardson</title>
      <link>https://www.mattstine.com/2007/12/13/improving-application-design-with-a-rich-domain-model-chris-richardson/</link>
      <pubDate>Thu, 13 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/13/improving-application-design-with-a-rich-domain-model-chris-richardson/</guid>
      <description>&lt;p&gt;This was my very first session of the conference. I&#39;ve really been looking forward to it. I became pretty excited about object-oriented programming when I first really learned it in my computer simulation course at Ole Miss. In that course we built discrete event simulation programs using collaborating Java threads. Each thread implemented an object from the domain model representing a particular simulation problem. Once I got into the &amp;ldquo;working world,&amp;rdquo; I found that the architecture described by Rod Johnson as the &amp;ldquo;J2EE stove pipe&amp;rdquo; had made my OO skills essentially unusable in the projects on which I was required to work on a day-to-day basis. My recent experiences developing in a more POJO-based style, particularly with JPA/Hibernate, have allowed me to get closer to my preferred OO-style, but the business logic still lived in the service-tier. My domain model was still essentially &amp;ldquo;anemic&amp;rdquo; to borrow from Martin Fowler.&lt;/p&gt;
&lt;p&gt;When I read the description for this session I was elated! Finally I could see that someone was building real enterprise applications using object-oriented techniques! I&#39;ve never quite been able to articulate what I felt was wrong with the way we&#39;re building applications in my group. I was fortunate enough to have breakfast with Chris Richardson prior to the session, and he said that addressing my inability to articulate those problems was one of the goals of his talk. Awesome! On to the session&amp;hellip;&lt;/p&gt;
&lt;p&gt;Chris began with a tour through his object-based programming experience, beginning in LISP, followed by C++ and then Java. Around 1999 he got into EJB programming, and described his experience as &amp;ldquo;Applications were still built from objects, but those objects were very different&amp;hellip;&amp;rdquo; Basically the EJB paradigm caused us to abandon object-oriented programming in favor of procedural programming. Why? Well, for all of the pros surrounding EJB, it made writing object-oriented code difficult, and in some cases, impossible. The EJB/procedural style works very well for simple business logic, but it doesn&#39;t scale well as business logic becomes more complex. The result is a few monolithic transactional classes containing hundreds to thousands of lines of code embedded in very long methods. Hence, the legacy of EJB (and I quote):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java is an object-oriented language, AND&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object-oriented design is a better way to tackle complexity, YET&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many complex enterprise Java applications are written in a procedural style&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chris then moved on to discuss the rich domain model pattern, which is really nothing new at all. It&#39;s just good OO design. Most of your classes (or entities) correspond to real world concepts, and the business logic is spread amongst them. Classes are true objects: they contain state and behavior. The goal is to push as much business logic as possible down into the domain objects, which is exactly where it belongs. What do you get? Better maintainability, better testability, better reusability, and a better shared understanding of your domain. Not only that, but your code is quantifiably simpler! Who doesn&#39;t want that? The main drawback to this is that you have to have good OO design skills to make it happen - which is exactly what the EJB programming model has made scarce.&lt;/p&gt;
&lt;p&gt;Chris followed this up by discussing the building blocks of domain models, concepts he derived from Eric Evans&amp;rsquo; book Domain Driven Design. In a nutshell, they are Entities, Value Objects, Aggregates, Services, Factories, and Repositories - the reader can get the book to find out what these are. Interesting notes for me include the fact that Repositories are nearly equivalent to DAO&#39;s, especially the way I typically implement them. The concept of a Service is far different from what I&#39;m used to. I &amp;ldquo;grew up&amp;rdquo; writing services according to the EJB Session Bean/Facade model, where essentially all of your business logic resides in service methods. Chris defined a service as a class implementing only logic that cannot be put in a single entity. They are actually quite thin!&lt;/p&gt;
&lt;p&gt;Next came the discussion of frameworks and their role. In short, frameworks act as an enabler to rich domain models when used properly. Your domain model should be implemented purely as Plain Old Java Objects (POJO&#39;s) in that they don&#39;t implement any infrastructure interfaces or call infrastructure API&#39;s. The jury is still out on annotations - Chris argues that they still violate the POJO concept, I&#39;m not so sure. You then wire your model together using dependency injection, handle crosscutting concerns (transaction management, security, logging, etc.) with Aspect-Oriented Programming (AOP), and use object/relational mapping (ORM) for persistence. What you often run into as obstacles are that many of these frameworks, particularly web and ORM frameworks, force you to introduce &amp;ldquo;smells&amp;rdquo; into your code for the framework to use them. Examples include requirements for public default constructors and JavaBean-style setters.&lt;/p&gt;
&lt;p&gt;Chris closed with an awesome discussion of common code smells and the refactorings used to eliminate them. I was most interested in Feature Envy, which is where you have methods that are far too interested in data belonging to other classes. This is very common in session facades, and the healing factor is to push that logic down into the appropriate domain classes. Another interesting smell was Primitive Obsession, where code uses built-in types (such as String and Integer) instead of application classes to represent state. The refactoring in this case is to introduce Value Objects, which are immutable, validated objects representing domain concepts (e.g. a shipping address).&lt;/p&gt;
&lt;p&gt;Chris closed with the charge to begin refactoring our procedural designs into a rich domain model on MONDAY! Oh, how I can&#39;t wait to begin. Good job Chris!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pair programming with the official rod johnson bobblehead</title>
      <link>https://www.mattstine.com/2007/12/13/pair-programming-with-the-official-rod-johnson-bobblehead/</link>
      <pubDate>Thu, 13 Dec 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/12/13/pair-programming-with-the-official-rod-johnson-bobblehead/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://3.bp.blogspot.com/_Vo63LRwAZbk/R2HoivNFFDI/AAAAAAAAAWg/Kp-khRPCwxU/s1600-h/rod_johnson_pairprog.jpg&#34;&gt;&lt;img src=&#34;http://3.bp.blogspot.com/_Vo63LRwAZbk/R2HoivNFFDI/AAAAAAAAAWg/Kp-khRPCwxU/s400/rod_johnson_pairprog.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see, Rod really likes my Spring MVC configuration. :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>13949712720901forosx</title>
      <link>https://www.mattstine.com/2007/11/08/13949712720901forosx/</link>
      <pubDate>Thu, 08 Nov 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/11/08/13949712720901forosx/</guid>
      <description>&lt;p&gt;Here&#39;s my vote for Java 6 on Mac OS X Leopard!&lt;/p&gt;
&lt;p&gt;13949712720901ForOSX&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ajax construction kit building plug and play ajax applications</title>
      <link>https://www.mattstine.com/2007/10/12/ajax-construction-kit-building-plug-and-play-ajax-applications/</link>
      <pubDate>Fri, 12 Oct 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/10/12/ajax-construction-kit-building-plug-and-play-ajax-applications/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.javalobby.org/articles/ajax-construction-kit/&#34;&gt;My first book review&lt;/a&gt; for &lt;a href=&#34;http://www.javalobby.org&#34;&gt;Javalobby&lt;/a&gt; was published today!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>please support me in the 2007 walk to cure diabetes</title>
      <link>https://www.mattstine.com/2007/09/05/please-support-me-in-the-2007-walk-to-cure-diabetes/</link>
      <pubDate>Wed, 05 Sep 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/09/05/please-support-me-in-the-2007-walk-to-cure-diabetes/</guid>
      <description>&lt;p&gt;This year, I&#39;ll be taking part in JDRF&#39;s Walk to Cure Diabetes, along with one-half million other walkers across the country, as we try to reach our goal of raising $90 million.&lt;/p&gt;
&lt;p&gt;Type 1, or juvenile, diabetes, is a devastating disease that affects millions of people - a large and growing percentage of them children. One of them is my oldest daughter, Abby, who is three years old.&lt;/p&gt;
&lt;p&gt;Since Abby&#39;s diagnosis, she&#39;s had her fingers pricked over 800 times already. She&#39;s received more than 200 shots in her arms, legs, and tummy. Over the course of her life, she&#39;ll continue to receive daily insulin injections and finger pricks. She must take insulin to stay alive. We must constantly monitor her glucose levels to ward off complications such as blindness, kidney failure, and stroke. Abby must maintain strict control of her diet every day (even on birthdays and holidays), check her blood sugar at least 6 times a day, and take insulin at least twice a day.&lt;/p&gt;
&lt;p&gt;There is some good news, though. For the first time, scientists are predicting that we CAN expect to see a cure well within our lifetime! This is exactly what we&#39;re wishing for, so we&#39;ve formed a team called &amp;ldquo;Wishing With Abby,&amp;rdquo; and we&#39;d love to have your help.&lt;/p&gt;
&lt;p&gt;Please visit my Walk Web page if you would like to donate online or see how close I am to&lt;br&gt;
reaching my personal goal:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://walk.jdrf.org/walker.cfm?id=86761462&#34;&gt;&lt;a href=&#34;http://walk.jdrf.org/walker.cfm?id=86761462&#34;&gt;http://walk.jdrf.org/walker.cfm?id=86761462&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow this link to make a donation:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://walk.jdrf.org/support.cfm?id=86761462&#34;&gt;&lt;a href=&#34;http://walk.jdrf.org/support.cfm?id=86761462&#34;&gt;http://walk.jdrf.org/support.cfm?id=86761462&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>welcome to matts mac paradise</title>
      <link>https://www.mattstine.com/2007/08/29/welcome-to-matts-mac-paradise/</link>
      <pubDate>Wed, 29 Aug 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/08/29/welcome-to-matts-mac-paradise/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://2.bp.blogspot.com/_Vo63LRwAZbk/RtXhAhQ4WVI/AAAAAAAAAQM/bMm-2pre3v8/s1600-h/DSCN0713.JPG&#34;&gt;&lt;img src=&#34;http://2.bp.blogspot.com/_Vo63LRwAZbk/RtXhAhQ4WVI/AAAAAAAAAQM/bMm-2pre3v8/s400/DSCN0713.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ve been wanting to post a picture of my new work setup for awhile, but I wanted to wait until I finished getting setup over at 160 Shadyac Avenue. Just for fun, I thought I&#39;d go VMWare Fusion crazy and boot up every virtual machine I&#39;ve got - you&#39;re actually looking at 7 OS&#39;s booted concurrently between two machines. To the left I&#39;ve got my 15&amp;rdquo; MacBook Pro (2.2 GHz Intel Core 2 Duo processor, 4 GB 667 MHz DDR2 SDRAM) running Mac OS 10.4, Windows XP, and Ubuntu. To the right I&#39;ve got my Mac Pro tower (2 x 2 GHz Dual-Core Intel Xeon processors, 5 GB 66 MHz DDR2 FB-DIMM RAM) driving the dual 19&amp;rdquo; Dell LCD&#39;s, running Mac OS 10.4, Windows XP, Ubuntu, and Solaris Express. Whew - that was a mouthful. Thanks to Matt Raible for &lt;a href=&#34;http://raibledesigns.com/rd/entry/re_one_30_monitor_or&#34;&gt;blogging&lt;/a&gt; about the Griffin Technologies iCurve laptop stand - I picked up its successor, the Elevator, for my MacBook Pro. I&#39;ve got pictures from my past desktops over the years - I need to dig them up and show the procession of developer technology here. It&#39;s been quite a ride from my first system as a junior developer six plus years ago.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://picasa.google.com/blogger/&#34;&gt;&lt;img src=&#34;http://photos1.blogger.com/pbp.gif&#34; alt=&#34;Posted by Picasa&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>havent had much time to blog lately</title>
      <link>https://www.mattstine.com/2007/08/17/havent-had-much-time-to-blog-lately/</link>
      <pubDate>Fri, 17 Aug 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/08/17/havent-had-much-time-to-blog-lately/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://2.bp.blogspot.com/_Vo63LRwAZbk/RsYLERQ4WSI/AAAAAAAAAP0/Z6Sap8em5GY/s1600-h/DSCN0706.JPG&#34;&gt;&lt;img src=&#34;http://2.bp.blogspot.com/_Vo63LRwAZbk/RsYLERQ4WSI/AAAAAAAAAP0/Z6Sap8em5GY/s400/DSCN0706.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;.because we&#39;ve been packing to move on top of all of our regular projects. St. Jude has nicely renovated a new building for us, so we developers are moving. This is where I&#39;m headed on Monday:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://1.bp.blogspot.com/_Vo63LRwAZbk/RsYMGBQ4WUI/AAAAAAAAAQE/jDsZtab8xBA/s1600-h/DSC_4433.JPG&#34;&gt;&lt;img src=&#34;http://1.bp.blogspot.com/_Vo63LRwAZbk/RsYMGBQ4WUI/AAAAAAAAAQE/jDsZtab8xBA/s400/DSC_4433.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;I&#39;m both loving it and a little sad - I&#39;ve been sitting in my desk for nearly my entire career as a software developer. I just know I&#39;m going to park in the garage and come downstairs one morning to find my office gone. :-)&lt;/p&gt;
&lt;p&gt;[&lt;br&gt;
](&lt;a href=&#34;http://picasa.google.com/blogger/&#34;&gt;http://picasa.google.com/blogger/&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>stjude srm 10 released</title>
      <link>https://www.mattstine.com/2007/07/27/stjude-srm-10-released/</link>
      <pubDate>Fri, 27 Jul 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/07/27/stjude-srm-10-released/</guid>
      <description>&lt;p&gt;From &lt;a href=&#34;http://sourceforge.net/forum/forum.php?forum_id=719803&#34;&gt;&lt;a href=&#34;http://sourceforge.net/forum/forum.php?forum_id=719803&#34;&gt;http://sourceforge.net/forum/forum.php?forum_id=719803&lt;/a&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On July 27, 2007, STJUDE-SRM 1.0 was released.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;STJUDE-SRM is a laboratory management system designed to support shared resource facility (or core lab) activities. It was designed and developed by the Hartwell Center for Bioinformatics and Biotechnology at St. Jude Children&#39;s Research Hospital.&lt;/p&gt;
&lt;p&gt;Shared resources supported include DNA synthesis, Peptide synthesis, DNA sequencing, Functional Genomics (spotted microarray laboratory), and Affymetrix (commercial microarrays) laboratories. STJUDE-SRM was also designed so that it is sufficiently modular and scalable to support other laboratory activities as needed. It could conceivably support all facilities on a campus or at a research organization and provide a single portal for investigators to access these resources, retrieve data, receive invoices for services, and generate reports.&lt;/p&gt;
&lt;p&gt;Currently available is a build of STJUDE-SRM which is certified for JBoss 4.2.0.GA running on J2SE 5.0. Builds for JBoss 4.0.5.GA and BEA Weblogic Server 8.1 are forthcoming.&lt;/p&gt;
&lt;p&gt;STJUDE-SRM 1.0 can be downloaded here: &lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=197795&#34;&gt;&lt;a href=&#34;http://sourceforge.net/project/showfiles.php?group_id=197795&#34;&gt;http://sourceforge.net/project/showfiles.php?group_id=197795&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please report all bugs you find in the STJUDE-SRM bug tracker: &lt;a href=&#34;http://sourceforge.net/tracker/?group_id=197795&amp;amp;atid=962898&#34;&gt;&lt;a href=&#34;http://sourceforge.net/tracker/?group_id=197795&amp;amp;atid=962898&#34;&gt;http://sourceforge.net/tracker/?group_id=197795&amp;amp;atid=962898&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[](&lt;a href=&#34;http://sourceforge.net/tracker/?group_id=197795&amp;amp;atid=962898&#34;&gt;http://sourceforge.net/tracker/?group_id=197795&amp;amp;atid=962898&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This is a VERY satisfying announcement for me, as I have spent the better part of the last six years working on this project. I was so excited when I learned we would be releasing it to the open source community. Enjoy!&lt;/p&gt;
&lt;p&gt;For more information on STJUDE-SRM, please visit: &lt;a href=&#34;http://stjude-srm.sourceforge.net&#34;&gt;&lt;a href=&#34;http://stjude-srm.sourceforge.net&#34;&gt;http://stjude-srm.sourceforge.net&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[](&lt;a href=&#34;http://sourceforge.net/tracker/?group_id=197795&amp;amp;atid=962898&#34;&gt;http://sourceforge.net/tracker/?group_id=197795&amp;amp;atid=962898&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>my professional development goals for 2007 2008</title>
      <link>https://www.mattstine.com/2007/07/10/my-professional-development-goals-for-2007-2008/</link>
      <pubDate>Tue, 10 Jul 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/07/10/my-professional-development-goals-for-2007-2008/</guid>
      <description>&lt;p&gt;I posted earlier on my desire to &lt;a href=&#34;http://matt-stine.blogspot.com/2007/07/help-me-become-better-programmer.html&#34;&gt;become a better programmer&lt;/a&gt;. Well, I&#39;ve since put together a plan of action for the next twelve months. I&#39;ve based some of these goals on suggestions from The Pragmatic Programmer by Andy Hunt and Dave Thomas.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Learn Groovy and Grails&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Andy and Dave suggest learning a new language every year. I had already informally started learning Groovy and Grails after JavaOne 2007. Since I already have a head start on this one, Groovy will be my language for the next year (I&#39;m learning Grails mainly because of my web development background - it will provide me more opportunity to apply my Groovy knowledge). This should be an easy way to get started on the goal of a new language each year since my Java knowledge should transfer easily.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Release HallKeeper v1.0 as part of #1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Several years ago I started an open source project called &lt;a href=&#34;http://code.google.com/p/hallkeeper&#34;&gt;HallKeeper&lt;/a&gt;. HallKeeper is planned to be a web-based management system for university residence halls. Life got in the way of this project so it lay dormant for a few years. I&#39;ve recently revived it as sort of a &amp;ldquo;lab&amp;rdquo; in which to learn Groovy and Grails, and hopefully have a little fun along the way.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Read and LEARN the following books:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;* The Definitive Guide to Grails - Rocher
* The Pragmatic Programmer - Hunt, Thomas
* Computer Algorithms: Introduction to Design &amp;amp; Analysis - Baase, Van Gelder
* Concepts of Programming Languages: Sebesta
* Groovy in Action - Konig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I say LEARN, I mean I don&#39;t just want to do a cursory read of these. I want to really engage the concepts presented in each and apply them to my day-to-day work. I already have a head start reading the first two books. The third and fourth books are actually textbooks from my undergraduate education. I could really use a refresher on these concepts, and I think I&#39;m a much more serious student now as a professional than I was when I was actually a student.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Review two books for the JavaLobby/DZone book review team&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I joined this team several months ago and was actually assigned to review two books - again, life got in the way (if you have any small children, you&#39;ll understand). Things have settled down a bit now and I&#39;ve asked to rejoin. Hopefully I&#39;ll be able to crank out some reviews this time and learn something in the process.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Pass the Sun Certified Programmer for the Java 2 Platform, Standard Edition 5.0 Exam&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I want to do this mainly to give myself an excuse to go back over the fundamentals of Java, as well as learn the new features that 5.0 brought to the table in detail (generics, annotations, etc.). I have still basically been living in a Java 1.4 world as I&#39;d say roughly 85% of my daily work is on an application that is still bound to that JDK. So, passing this is mainly just a reason to study, and it is a nice edition to the resume as well.&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Write one Java/software development blog article per week&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This would be numero uno! I&#39;ve always stressed about the frequency of my blog writing - I&#39;ve felt compelled to write every single day, and I usually end up writing a one paragraph synopsis of some other guy&#39;s blog entry. Not exactly something that will attract many readers. I&#39;ll still post those on a more frequent basis as they keep the content flowing, but I also want to write at least one in-depth article per week to give people something to look forward to. One way I&#39;ll do this is to blog about the books I&#39;m reading. The Pragmatic Programmer provides challenges and/or exercises at the end of each chapter - great seeds for entries.&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Attend JavaOne 2008 or similar conference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This one depends on the boss - hopefully I&#39;ll get to travel again this year. I&#39;d love to go back to JavaOne - I learned a lot, and big geek shows always motivate me to go back and introduce new technology to the group, as well as get more involved in the community. I always feel a surge in my professional development in the 2-3 month period following my attending a conference.&lt;/p&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Start a Memphis/Mid-South Area Java User Group&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We don&#39;t have a JUG in this area and I really think that we could benefit from one. My company has a large number of Java developers, and I know that several others in the area, including FedEx and Autozone do as well. This would be a great way to get some of the good speakers from the conferences I&#39;ve attended to speak locally, and it may even serve to get us on the map with some of the smaller shows like NFJS. Sun and others really seem to take an interest in supporting JUGS, so I look forward to see what happens. I&#39;ve started a &lt;a href=&#34;http://groups.google.com/group/memphis-mid-south-jug&#34;&gt;Google Group&lt;/a&gt; for the newborn JUG, and I&#39;ll be blogging more in the future about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>on agile why you wont fix it later</title>
      <link>https://www.mattstine.com/2007/07/09/on-agile-why-you-wont-fix-it-later/</link>
      <pubDate>Mon, 09 Jul 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/07/09/on-agile-why-you-wont-fix-it-later/</guid>
      <description>&lt;p&gt;Ryan Cooper writes a brilliant essay on why quick fixes today turn into tomorrow&#39;s code rot. I believe every word of this article. Unfortunately, I&#39;m all too often my own worst enemy when it comes to implementing these ideas. Thanks for the reminder, Ryan!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://on-agile.blogspot.com/2007/04/why-you-wont-fix-it-later.html&#34;&gt;On Agile: Why You Won&#39;t Fix It Later&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>graeme rochers blog 5 more misconceptions about grails</title>
      <link>https://www.mattstine.com/2007/07/06/graeme-rochers-blog-5-more-misconceptions-about-grails/</link>
      <pubDate>Fri, 06 Jul 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/07/06/graeme-rochers-blog-5-more-misconceptions-about-grails/</guid>
      <description>&lt;p&gt;Graeme Rocher, founder of the Grails project, answers five more misconceptions about Groovy/Grails vs. Ruby/Rails. I&#39;ve grown to be quite fond of both of these languages/frameworks; however, given the amount of investment I&#39;ve placed into learning and applying Spring and Hibernate to the applications I&#39;ve developed over the past two years, I have to say that Grails just makes sense for me as the next step toward becoming more &amp;ldquo;dynamic&amp;rdquo; in my approach to development projects.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://graemerocher.blogspot.com/2007/07/5-more-misconceptions-about-grails.html&#34;&gt;Graeme Rocher&#39;s Blog: 5 More Misconceptions About Grails&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>help me become a better programmer</title>
      <link>https://www.mattstine.com/2007/07/02/help-me-become-a-better-programmer/</link>
      <pubDate>Mon, 02 Jul 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/07/02/help-me-become-a-better-programmer/</guid>
      <description>&lt;p&gt;I have decided to embark upon a quest to become a better programmer. I would really like to improve my understanding of the computer science that underlies my day-to-day tasks, particularly as it relates to programming language design as well as algorithm design and complexity analysis. I would also like to improve my analytical and problem solving skills. I&#39;ve found that I&#39;m really good at learning new technologies and quickly bringing them to bear on web application development problems, but take me out of that problem space and I get nervous rather quickly.&lt;/p&gt;
&lt;p&gt;Who has ideas about the best way to go about this? Please comment!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>how to implement form level validation in jsf</title>
      <link>https://www.mattstine.com/2007/06/27/how-to-implement-form-level-validation-in-jsf/</link>
      <pubDate>Wed, 27 Jun 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/06/27/how-to-implement-form-level-validation-in-jsf/</guid>
      <description>&lt;p&gt;Recently I was faced with the challenge of implementing form-level (or page-level) validation in a JSF-based application. What I mean by form-level validation is the need to evaluate a subset of a form&#39;s fields as a unit, rather than simply validating each field in isolation. An example of this type of validation can be found on a user registration form where one has to select a password in one text field, and then retype the same password in another text field for confirmation. Validating that these two text fields contain the same password is an example of form level validation.&lt;/p&gt;
&lt;p&gt;In my case, I had two date selector components on my form, one for a start date/time and one for an end date/time for an event that was being scheduled. The rule I needed to validate was that the end date/time was later than the start date/time.&lt;/p&gt;
&lt;p&gt;There are a few ways to implement validation like this, including but not limited to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Build a custom component that renders selectors for both the start and end date/time, then validate as a unit. This actually is field-level validation and doesn&#39;t truly address the form-level problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement a validator method on a managed bean that will evaluate the data submitted for multiple components.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&#39;ll address the second method in this HOWTO.&lt;/p&gt;
&lt;p&gt;First, you&#39;ll need to bind at least &lt;em&gt;n-1&lt;/em&gt; of the components that you want to validate to properties on your managed bean. The simplest way is to declare properties of type &lt;strong&gt;UIInput&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;private UIInput startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public UIInput getStartDateComponent() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    return startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public void setStartDateComponent(UIInput startDateComponent) {  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    this.startDateComponent = startDateComponent;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and do the actual binding in the JSP:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&amp;lt;t:inputDate id=&amp;quot;eventStart&amp;rdquo; value=&amp;rdquo;#{orderForm.sampleInfo.requestedStartTime}&amp;ldquo;&lt;br&gt;&lt;/br&gt;    type=&amp;quot;both&amp;quot;&lt;br&gt;&lt;/br&gt;    popupCalendar=&amp;quot;true&amp;quot;&lt;br&gt;&lt;/br&gt;    ampm=&amp;quot;true&amp;rdquo; binding=&amp;rdquo;#{dateValidationForm.startDateComponent}&amp;quot;/&amp;gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, you&#39;ll implement the validation method, which can have any name you like, but must share the same signature as this example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;public void validateEndDate(FacesContext context, UIComponent toValidate, Object value) {&lt;br&gt;&lt;/br&gt;    Date endDate = (Date) value;&lt;br&gt;&lt;/br&gt;    Date startDate = (Date) getStartDateComponent().getLocalValue();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    if (startDate == null) {&lt;br&gt;&lt;/br&gt;        context.addMessage(getStartDateComponent().getClientId(context),new FacesMessage(&amp;ldquo;Please specify a valid date and time.&amp;quot;));&lt;br&gt;&lt;/br&gt;        throw new ValidatorException(new FacesMessage());&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    long endTime = endDate.getTime();&lt;br&gt;&lt;/br&gt;    long startTime = startDate.getTime();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    if (startTime &amp;gt;= endTime) {&lt;br&gt;&lt;/br&gt;        addError(&amp;ldquo;errors.batchOrder.invalidEndDate&amp;rdquo;);&lt;br&gt;&lt;/br&gt;        throw new ValidatorException(new FacesMessage(&amp;ldquo;Event end must be later than event start.&amp;quot;));&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And finally, you&#39;ll bind the validation method to the last component in your subset of components that need to be validated together:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&amp;lt;t:inputDate id=&amp;quot;eventEnd&amp;rdquo; value=&amp;rdquo;#{orderForm.sampleInfo.requestedEndTime}&amp;rdquo; type=&amp;quot;both&amp;rdquo; popupCalendar=&amp;quot;true&amp;rdquo; ampm=&amp;quot;true&amp;rdquo; validator=&amp;rdquo;#{dateValidationForm.validateEndDate}&amp;quot;/&amp;gt;&lt;br&gt;&lt;/br&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To understand why I say &lt;em&gt;n-1&lt;/em&gt; components, think of the way the validation phase occurs in JSF. Data is bound to the components in the order that they occur in the JSF component tree, which just so happens to be the order in which they appear in the JSP source. Looking at the &lt;strong&gt;validateEndDate&lt;/strong&gt; method, you&#39;ll see that I only reference the &lt;strong&gt;startDateComponent&lt;/strong&gt; from the binding, but I reference the &lt;strong&gt;endDate&lt;/strong&gt; as the &lt;strong&gt;Object value&lt;/strong&gt; reference that was passed into the method. This is why you only need to bind &lt;em&gt;n-1&lt;/em&gt; components, because you get the &lt;em&gt;nth&lt;/em&gt; component from the method signature.&lt;/p&gt;
&lt;p&gt;If you want to be more uniform and bind all of the components, you could create an extra dummy hidden value component and bind the validator method to it. You could then bind all of the components to your managed bean and access them all from the bindings rather than accessing one from the method signature.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;validateEndDate&lt;/strong&gt; method itself is rather simple. First you access the data by getting the local value of each component (again, the &lt;strong&gt;endDate&lt;/strong&gt; value is not accessed in this way - in fact, it hasn&#39;t been bound yet because it must be validated first, and that&#39;s what&#39;s happening in this method!). You then apply the business rule. You&#39;ll see that first I look to see if the &lt;strong&gt;startDate&lt;/strong&gt; is null. I&#39;m not sure why this is possible, but if the &lt;strong&gt;startDate&lt;/strong&gt; was not submitting a good value on the FIRST submit, the local value was null. So, I catch that here. I add an error message to the &lt;strong&gt;startDateComponent&lt;/strong&gt; and throw a &lt;strong&gt;ValidatorException&lt;/strong&gt;. If the business rule is violated, throw a &lt;strong&gt;ValidatorException&lt;/strong&gt;. (I&#39;m also using the &lt;strong&gt;addError&lt;/strong&gt; method provided by AppFuse to work w/ its message framework as well, but that is not necessary w/ all JSF apps).&lt;/p&gt;
&lt;p&gt;Now, for the final problem I encountered. In Weblogic server, which we&#39;re still using for the time being, if your session cannot be serialized then it deletes your entire session. Obviously this can cause major problems in any web app. To deal with this, ANY SESSION SCOPED MANAGED BEAN must be fully serializable, meaning it and any objects referenced in its state. Herein lies the problem for JSF. Instances of &lt;strong&gt;UIComponent&lt;/strong&gt; (an ancestor of &lt;strong&gt;UIInput&lt;/strong&gt;) are not serializable, so if we bind our components to &lt;strong&gt;UIInput&lt;/strong&gt; fields on a session-scoped managed bean (the bean backing this form is an Order Form/Shopping Cart style bean), it will not be serializable and Weblogic will kick out your session.&lt;/p&gt;
&lt;p&gt;To deal with this problem, realize that there is no reason that you can only have one managed bean backing a form. In fact, you can reference as many managed beans as you need. Since validation is done for each request, there is no need to manage any state there across multiple requests like we need to do with a shopping cart. So, why not declare an additional managed bean that is REQUEST SCOPED, and then put the bindings and validation method there. That is exactly what I did. Here is the entire bean:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;public class DateValidationForm extends BasePage {&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    private UIInput startDateComponent;&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    public UIInput getStartDateComponent() {&lt;br&gt;&lt;/br&gt;        return startDateComponent;&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt; &lt;br&gt;&lt;/br&gt;    public void setStartDateComponent(UIInput startDateComponent) {&lt;br&gt;&lt;/br&gt;        this.startDateComponent = startDateComponent;&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;    public void validateEndDate(FacesContext context, UIComponent toValidate, Object value) {&lt;br&gt;&lt;/br&gt;        Date endDate = (Date) value;&lt;br&gt;&lt;/br&gt;        Date startDate = (Date) getStartDateComponent().getLocalValue();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        if (startDate == null) {&lt;br&gt;&lt;/br&gt;            context.addMessage(getStartDateComponent().getClientId(context),new FacesMessage(&amp;ldquo;Please specify a valid date and time.&amp;quot;));&lt;br&gt;&lt;/br&gt;            throw new ValidatorException(new FacesMessage());&lt;br&gt;&lt;/br&gt;        }&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        long endTime = endDate.getTime();&lt;br&gt;&lt;/br&gt;        long startTime = startDate.getTime();&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;        if (startTime &amp;gt;= endTime) {&lt;br&gt;&lt;/br&gt;            addError(&amp;ldquo;errors.batchOrder.invalidEndDate&amp;rdquo;);&lt;br&gt;&lt;/br&gt;            throw new ValidatorException(new FacesMessage(&amp;ldquo;Event end must be later than event start.&amp;quot;));&lt;br&gt;&lt;/br&gt;        }&lt;br&gt;&lt;/br&gt;    }&lt;br&gt;&lt;/br&gt;}&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the declaration in faces-config.xml:&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/br&gt;&lt;managed-bean&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-name&gt;dateValidationForm&lt;/managed-bean-name&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-class&gt;org.stjude.hc.srmcti.webapp.action.ordering.
DateValidationForm&lt;/managed-bean-class&gt;&lt;br&gt;&lt;/br&gt;    &lt;managed-bean-scope&gt;request&lt;/managed-bean-scope&gt;&lt;br&gt;&lt;/br&gt;&lt;/managed-bean&gt;&lt;br&gt;&lt;/br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;The added bonus is that you can reuse this bean across all forms where you need this behavior. My application happens to have 2 additional forms where I would have repeated this logic, so I just reference this bean there.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>the grove coffee house rocks</title>
      <link>https://www.mattstine.com/2007/06/22/the-grove-coffee-house-rocks/</link>
      <pubDate>Fri, 22 Jun 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/06/22/the-grove-coffee-house-rocks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://2.bp.blogspot.com/_Vo63LRwAZbk/RnyFS6P46_I/AAAAAAAAAPo/9HmazK6qAZk/s1600-h/image001.png&#34;&gt;&lt;img src=&#34;http://2.bp.blogspot.com/_Vo63LRwAZbk/RnyFS6P46_I/AAAAAAAAAPo/9HmazK6qAZk/s320/image001.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;
It&#39;s Friday night, and what am I doing but coding. My wife&#39;s night out is spent at the scrapbook store working on her latest layouts - mine is at my new favorite coffee shop, working on open source. I discovered this place on a date with Wendy a couple of months ago. The nice thing about it is the distinctly Christian atmosphere. A good friend of mine and I meet here on Friday mornings for accountability. Well, since they hand out free wireless internet, I thought I&#39;d drop by for my night out as well. Good coding atmosphere - I have a nice corner with a plugin for my laptop, so I&#39;m good to go. Check this place out if you&#39;re in DeSoto County, MS or the Memphis metro area anytime soon - &lt;a href=&#34;http://grovecoffeehouse.com&#34;&gt;&lt;a href=&#34;http://grovecoffeehouse.com&#34;&gt;http://grovecoffeehouse.com&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>migrated</title>
      <link>https://www.mattstine.com/2007/06/19/migrated/</link>
      <pubDate>Tue, 19 Jun 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/06/19/migrated/</guid>
      <description>&lt;p&gt;I recently migrated all of my Java/Development related posts from &lt;a href=&#34;http://www.analienandastranger.com&#34;&gt;&lt;a href=&#34;http://www.analienandastranger.com&#34;&gt;http://www.analienandastranger.com&lt;/a&gt;&lt;/a&gt;. I want to make this a PRIMARILY Java/Development-related blog. When I was splitting my efforts between Christianity and Software Development, I was quickly getting burned out and not writing anything. If you want to read any of my old devotional posts, I will be keeping the other blog alive for awhile. Since the hosting is being provided to me free (as well as the domain), I will in good conscience need to shut it down eventually. I just feel that using Blogger gives me greater visibility - I do want people to actually read this stuff, ya know? :-)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>and then it was over</title>
      <link>https://www.mattstine.com/2007/05/11/and-then-it-was-over/</link>
      <pubDate>Fri, 11 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/11/and-then-it-was-over/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/SanFranciscoJavaOne2007/photo#5063512122879158706&#34;&gt;&lt;img src=&#34;http://lh4.google.com/image/matt.stine/RkU1crgYqbI/AAAAAAAAAOI/fn4ypOF5zkQ/s288/DSCN1138.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I really enjoyed &amp;ldquo;The Toy Show&amp;rdquo; this morning. James Gosling went through a flurry of different demos from around the &amp;ldquo;cool&amp;rdquo; Java world. I was especially impressed with Project Wonderland (&lt;a href=&#34;http://lg3d-wonderland.dev.java.net/&#34;&gt;http://lg3d-wonderland.dev.java.net/&lt;/a&gt;), a virtual workplace environment, and with the real-time robotics demos. Unfortunately I was so sucked in that I didn&#39;t get any good photos.&lt;/p&gt;
&lt;p&gt;If anything you could call this my day on the back end. I attended four sessions, two of which were focused on that.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comparing the Developer Experience of Java EE 5.0, Ruby on Rails, and Grails: Lessons Learned from Developing One Application&lt;/li&gt;
&lt;li&gt;Implementing Java EE Applications Using Enterprise JavaBeans (EJB) 3 Technology: Real-World Tips, Tricks, and New Design Patterns&lt;/li&gt;
&lt;li&gt;The Top 10 Ways to Botch Enterprise Java Technology-Based Application Scalability and Reliability&lt;/li&gt;
&lt;li&gt;Exploting JRuby: Building Domain-Specific Languages for the Java Virtual Machine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I scheduled the first session because I thought it was be a good way to tie together all that I had learned about Grails and Rails and then compare it to my existing Java EE knowledge. As it turns out, the speaker believed that given tool support, the development experience wasn&#39;t all that different between the three. He then gave some performance comparisons, but I wasn&#39;t all that sure the analysis was very sound. Java EE came out way on top. I hadn&#39;t heard that it outperformed the others by quite as much as he showed. He made a rather dubious statement when he said that Grails and Rails weren&#39;t protected by standards. Groovy is a JSR and Grails just sits on top of it. If that isn&#39;t standard protection, then what is?&lt;/p&gt;
&lt;p&gt;The EJB tips, tricks, and patterns session was quite nice. I learned a few nuances of the platform. The patterns part was the best. They first went through some of the design patterns from the EJB 2.x days and identified which ones were obsolete and which ones were still useful. They then provided several new design patterns. Unfortunately the slides for this talk were not yet available and I just don&#39;t feel like combing through my handwritten notes. Definitely check this one out online when it is posted.&lt;/p&gt;
&lt;p&gt;Cameron Purdy&#39;s &amp;ldquo;Top 10&amp;rdquo; talk was both humorous and thought-provoking. I&#39;ll never do justice to it. Check it out when the video comes available.&lt;/p&gt;
&lt;p&gt;The final session of the conference for me addressed a burning question I had in my mind since Monday - what in the world is a DSL? I heard it thrown around in the Grails and Ruby talks at Java University, but nobody ever defined the acronym. Domain Specific Language - that what it is! I mainly attended this talk because I thought there might be applications for DSL&#39;s in our work at St. Jude. A DSL is a custom language designed for a specific purpose. Ruby&#39;s Rake language for instrumenting application builds is an example. Rob Harrop gave an impressive demo of how he built two DSL&#39;s, one providing a simpler API for JMX, and another for corporate action entitlement calculations. While I can&#39;t think of a direct application for DSL&#39;s yet, I&#39;m not tossing out the possibility.&lt;/p&gt;
&lt;p&gt;JavaOne was a great conference for me. If I didn&#39;t hate to leave my family for this long, I&#39;d love to attend every year. It&#39;s definitely drinking from a fire hydrant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>thursday was slow</title>
      <link>https://www.mattstine.com/2007/05/11/thursday-was-slow/</link>
      <pubDate>Fri, 11 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/11/thursday-was-slow/</guid>
      <description>&lt;p&gt;for me, not for JavaOne. Of course I was a good little programmer and used the schedule builder to sign up for all of my sessions. I edited them a bit after the first two keynotes. Even then, I had one lone session scheduled for Thursday morning (that wasn&#39;t really directly applicable to my work, it just looked interesting), and then two sessions in the afternoon, the first starting at 4:10. I decided to skip out on the morning session and do a little shopping at Pier 39. The highlight was a &amp;ldquo;Bucket of Boat Trash&amp;rdquo; and clam chowder at the Bubba Gump Shrimp Company. And yes, we Ole Miss Rebels are represented as far out as the end of Pier 39:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/SanFranciscoJavaOne2007/photo#5063511710562298018&#34;&gt;&lt;img src=&#34;http://lh4.google.com/image/matt.stine/RkU1ErgYqKI/AAAAAAAAAMA/6BJ0mkhqgn8/s288/DSCN1117.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The two sessions that I attended were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RubyTooling: State of the Art&lt;/li&gt;
&lt;li&gt;Using Ajax with POJC (Plain Old JavaServer Faces Components)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I attended the first session simply to get a little more detail on all of the hype surrounding Ruby tooling support in NetBeans 6. What I got was even more than I bargained for. The project leaders actually walked us through not only the features that were available, but how they were implemented. I had never really thought about the problems with providing code completion and refactoring with a dynamically-typed language. It was really cool to see the thought process that went into their solutions. I&#39;d love to hear a similar discussion from the JetBrains guys, as the Ruby support in IntelliJ IDEA is quite good as well.&lt;/p&gt;
&lt;p&gt;For me the second session was the best of the conference for me up until that point, and arguably it still is after attending Friday&#39;s sessions. Craig McClanahan, of Struts fame, was the main speaker and was joined by his colleagues Matthew Bohm and Jayashri Visvanathan. What made this session so good for me was that they presented a problem - &amp;ldquo;How can I add Ajax behaviors to my JavaServer™ Faces technology based application, without throwing away my investment in existing component libraries?&amp;rdquo; - and then provided three different solutions to that problem - low, medium, and high level.&lt;/p&gt;
&lt;p&gt;The low level consisted of simply using the HTML event pass-through attributes that are implemented by most standard JSF components (onClick, onBlur, etc.). One could use an existing JavaScript framework such as Dojo to send an XMLHttpRequest and then map that request to a Servlet or JSF handler using a technology such as Shale Remoting. The response could be sent back as JSON data which could then be transformed into the desired UI update.&lt;/p&gt;
&lt;p&gt;The medium level consisted of actually extending existing JSF components and adding the desired Ajax behavior. Due to time constraints they didn&#39;t cover this solution in detail, but they did provide a link to a detailed discussion in the Java BluePrints catalog: &lt;a href=&#34;https://blueprints.dev.java.net/bpcatalog/ee5/ajax/extendingRenderFunctionality.html&#34;&gt;https://blueprints.dev.java.net/bpcatalog/ee5/ajax/extendingRenderFunctionality.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The high level solutions addressed the following needs (copied directly from the slides):&lt;/p&gt;
&lt;p&gt;● Partial page submit—gather up a particular set of&lt;br&gt;
input element values, and send them to a bit of server&lt;br&gt;
side business logic&lt;br&gt;
● Partial page refresh—the business logic needs to&lt;br&gt;
refresh the content of one or more subtrees of the&lt;br&gt;
client side DOM&lt;br&gt;
● Synchronization—the benefits of synchronizing the&lt;br&gt;
server side state&lt;br&gt;
● Don’t repeat yourself (DRY)—reuse existing&lt;br&gt;
components and renderers for partial page updates&lt;/p&gt;
&lt;p&gt;To address these issues, the speakers highlighted two add-on frameworks:&lt;/p&gt;
&lt;p&gt;● Ajax4JSF (&lt;a href=&#34;http://labs.jboss.com/portal/jbossajax4jsf&#34;&gt;http://labs.jboss.com/portal/jbossajax4jsf&lt;/a&gt;)&lt;br&gt;
● Dynamic Faces (&lt;a href=&#34;https://jsf-extensions.dev.java.net/&#34;&gt;https://jsf-extensions.dev.java.net/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I was quite impressed with both of these frameworks. One of my colleagues is currently implementing Ajax behavior in a Facelets-based application using Ajax4JSF and he is quite happy with it. Dynamic Faces looked really awesome, especially its tooling support in NetBeans (actually I&#39;m quite impressed with the overall JSF support in NetBeans - I&#39;ll definitely be adding it to my tool belt). The highlight of the presentation was Matt&#39;s video of him building an entire currency trading application in 28 minutes - except it was &amp;ldquo;fast-played&amp;rdquo; to finish in 3 1/2 minutes and set to techno music. Matt wowed us with his dancing abilities while we watched true RAD. The crowd went wild!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>wednesday was ajax day</title>
      <link>https://www.mattstine.com/2007/05/10/wednesday-was-ajax-day/</link>
      <pubDate>Thu, 10 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/10/wednesday-was-ajax-day/</guid>
      <description>&lt;p&gt;Not officially, but nearly every session I attended had something to do with AJAX:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating Amazing Web Interfaces with Ajax&lt;/li&gt;
&lt;li&gt;jMaki: Web 2.0 App Building Made Easy&lt;/li&gt;
&lt;li&gt;Fast, Beautiful, Easy: Pick Three - Building Web User Interfaces in the Java Programming Language with Google Web Toolkit&lt;/li&gt;
&lt;li&gt;Killer JavaScript Technology Frameworks for Java Platform Developers: An Exploration of Prototype, Script.aculo.us, and Rico&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have to say that I was rather impressed by what I saw.&lt;/p&gt;
&lt;p&gt;The first talk was by Ben and Dion, the Ajaxian guys. It was an appropriate way to start, as they gave a quick history overview of Ajax. One nice point they made was that Ajax really isn&#39;t about the acronym - it never was - it&#39;s about building killer websites. Who cares what the actual technology behind it is. They discussed a couple of what they seemed to consider the better frameworks available - Dojo and ExtJS. They then explored some amazing up and coming features, including offline support and 2D client side graphics manipulation.&lt;/p&gt;
&lt;p&gt;I was rather impressed with jMaki - in short it is a wrapper around many of the popular JavaScript frameworks available (Dojo, Yahoo UI, Script.aculo.us, Spry, Google), and makes them accessible to Java, PHP, and Ruby. It has excellent tool support in NetBeans and Eclipse. It provides protection from changes in the API&#39;s of all of these projects - you can mix and match frameworks and only be concerned about one API - jMaki&#39;s. It does the work of linking all of the widgets together and communicating amongst them and with the server side.&lt;/p&gt;
&lt;p&gt;The GWT talk was easily my favorite of the day. I&#39;m extremely impressed with what these guys have done. I hadn&#39;t had much opportunity to look at GWT until now, and I really wish I had. I was initially skeptical about writing an entire application in Java and letting it generate HTML and JavaScript. I guess these guys knew that, because they&#39;re development philosophy addresses my concerns quite nicely:&lt;/p&gt;
&lt;p&gt;To radically improve the web experience for&lt;br&gt;
users by enabling developers to use existing&lt;br&gt;
Java tools to build no-compromise AJAX for&lt;br&gt;
any modern browser&lt;/p&gt;
&lt;p&gt;From what I can see, they deliver on their mission. They&#39;ve optimized their code for speed and for browser specificity (e.g. from what I understand, if your client is using Firefox, you get Firefox optimized JavaScript, same for IE, etc.). You can use all of your favorite IDE features to build the code, including the debugger. I really want to try to make use of this toolkit in the near future.&lt;/p&gt;
&lt;p&gt;The final talk was less informative for me, but only because I had experience with most of the technologies already. The killer part of this was how the speaker extended existing JSF components and added Script.aculo.us effects. It really made his version of Yahoo maps shine.&lt;/p&gt;
&lt;p&gt;Ajax isn&#39;t going anywhere but up. I just left yet another Ajax/JSF session, which for me was the best session of the conference so far. In a later entry I&#39;ll tell you why.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>it seems to be the year of the dynamicscripting language</title>
      <link>https://www.mattstine.com/2007/05/08/it-seems-to-be-the-year-of-the-dynamicscripting-language/</link>
      <pubDate>Tue, 08 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/08/it-seems-to-be-the-year-of-the-dynamicscripting-language/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/SanFranciscoJavaOne2007/photo#5062324250889201762&#34;&gt;&lt;img src=&#34;http://lh6.google.com/image/matt.stine/RkD9FbgYqGI/AAAAAAAAALY/NEPT0IawaRY/s288/DSCN1113.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It has been a whirlwind of a day. I&#39;ve been to two keynotes (close to 5 hours of information there) and one technical session. Couple that information with what I heard at Java University yesterday, and you find many common themes. One that keeps coming up is the emerging trend of making other languages, particularly dynamic/scripting languages, first-class citizens on the JVM.&lt;/p&gt;
&lt;p&gt;According to Wikipedia, &amp;ldquo;Dynamic programming language is a term used broadly in computer science to describe a class of high level programming languages that execute at runtime many common behaviors that other languages might perform during compilation, if at all. These behaviors could include extension of the program, by adding new code, or by extending objects and definitions, or by modifying the type system, all during program execution. These behaviors can be emulated in nearly any language of sufficient complexity, but dynamic languages provide direct tools to make use of them.&amp;rdquo; This definition seems to fit quite nicely with what I&#39;ve heard the last two days. A couple of dynamic languages I&#39;ve heard A LOT about are Groovy and Ruby.&lt;/p&gt;
&lt;p&gt;Yes, Ruby and its most popular framework, Ruby on Rails, have survived the initial hype. They are here to stay. Not only that, they seem poised to make a serious impact on the way we will do web application development over the next several years. Sun made a HUGE splash when they decided to hire the core developers of JRuby, the project which in its current pre-1.0 release already runs 98% of Ruby on Rails as a first-class citizen on the JVM. Not only that, you can now create a WAR file from a Ruby on Rails application and deploy it to any Java application server! I&#39;ll write more on this in another entry as I attended a full technical session on it.&lt;/p&gt;
&lt;p&gt;If you&#39;re too uncomfortable getting away from Java, why not try Groovy? After all, it is a JSR (241). All of Java syntax is legal in Groovy, plus a lot more. Groovy is a dynamic scripting language like Ruby and also compiles to bytecode, making it a first-class citizen on the JVM. It has its own MVC framework, Grails (formerly Groovy on Rails), which is a direct competitor to Ruby on Rails. I&#39;ve already written on Groovy and Grails in an earlier entry.&lt;/p&gt;
&lt;p&gt;I plan to attend some additional sessions focused on these dynamic languages, as it seems they will be really important in the years to come.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>java university developing enterprise applications with the spring framework</title>
      <link>https://www.mattstine.com/2007/05/07/java-university-developing-enterprise-applications-with-the-spring-framework/</link>
      <pubDate>Mon, 07 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/07/java-university-developing-enterprise-applications-with-the-spring-framework/</guid>
      <description>&lt;p&gt;This was the first session that I attended at Java University. You could take either a full-day course or two half-day courses - I elected to do the latter. Keith Donald, project lead for Spring WebFlow, presented. I have quite a bit of Spring experience already through AppFuse, but I was hoping to get a more complete view of Spring as most of what I have learned is from tinkering with existing systems. Keith promised that we&#39;d build a system from the ground up, so it sounded like I&#39;d get what I bargained for.&lt;/p&gt;
&lt;p&gt;And build from the ground up we did. I&#39;d say we were almost halfway through the entire session before we even TOUCHED Spring. Up until that point all we had done was do test driven development on all of the business entities and logic. It was very interesting to me that Keith&#39;s coding methodology is quite different from what I typically find myself doing. He implemented almost all of the business logic of the application without any regard to the eventual supporting technologies (i.e. ORM frameworks, web frameworks, etc.). It seems like I almost always bind my application to a set of technologies (say Hibernate/Spring/JSF) before I ever write a line of business logic. What did he get from this? Well, his application had fully implemented and tested business logic that would work with nearly any of the available supporting frameworks. Good stuff.&lt;/p&gt;
&lt;p&gt;Another thing that was interesting to me is his disdain for packaging classes according to application layer. I can&#39;t think of an application that I&#39;ve built recently where the DAO&#39;s weren&#39;t in a dao package, the &amp;ldquo;Manager&#39;s&amp;rdquo; weren&#39;t in a manger/service package, and the web classes weren&#39;t in a web package. Keith totally changed all of this. Our two main entities in this application were account and restaurant. Anything that had to do with an account (be it a DAO, service bean, web form, etc.) went in the account package. The same went for the restaurant package. I&#39;m not sure if I like this or not, but he seemed convinced of the value.&lt;/p&gt;
&lt;p&gt;Overall it was a good session. He incorporated A LOT of live coding, and almost all of it was done from scracth - he had very little pre-made skeleton code. The drawback to that was that he only made it through 6 of the 8 sections of his slides. I wish he had backed down on one or the other.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>java university rapid web site development with groovy and grails</title>
      <link>https://www.mattstine.com/2007/05/07/java-university-rapid-web-site-development-with-groovy-and-grails/</link>
      <pubDate>Mon, 07 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/07/java-university-rapid-web-site-development-with-groovy-and-grails/</guid>
      <description>&lt;p&gt;I&#39;m currently sitting in this session - Graeme Rocher is the presenter. He is the creator of Grails, which is Groovy&#39;s answer to the Ruby on Rails like development experience. He&#39;s currently doing Q&amp;amp;A, so I thought I&#39;d take the opportunity to write a short entry. So far this session is awesome! Graeme is a great presenter and has had the perfect balance of slides and live coding. Unfortunately they ran out of slides before I got to the presentation (more on the sometimes laughable logistics at JavaOne later), so I&#39;m having trouble remember details to write about (they&#39;ve promised to email me the slides). The first part of the session was an introduction to Groovy, Java&#39;s &amp;ldquo;scripting&amp;rdquo; language. I had NO IDEA just how cool and powerful Groovy was. I am especially impressed with its MetaClass concept, whereby you can override almost every behavior of the Java language that you can imagine - method calling, operator overloading, etc. Imagine being able to do AOP type things without using AOP. Not only that, it has all of my favorite pet features like &amp;ldquo;everything is an object,&amp;rdquo; closures, dynamic lists, etc. It&#39;s an OOP nuts dream. I&#39;ll write more later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>greetings from san francisco</title>
      <link>https://www.mattstine.com/2007/05/05/greetings-from-san-francisco/</link>
      <pubDate>Sat, 05 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/05/greetings-from-san-francisco/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/SanFranciscoJavaOne2007/photo#5061188923529143090&#34;&gt;&lt;img src=&#34;http://lh3.google.com/image/matt.stine/Rjz0grgYozI/AAAAAAAAAAs/tgIAHcd27AE/s288/DSCN0998.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the view from my quaint little hotel room at the Hotel Nikko in downtown San Francisco, California. I arrived here after a long morning of travel. First ~4 hours of flight from Memphis, TN to San Francisco International, followed by traversing the airport maze to find the BART (Bay Area Rapid Transit) train station. Once I found the right station, it was another 15 minutes of waiting on a train followed by a 40 minute train ride. Almost home? Not quite. As I ride the escalator out of the subway, I realize just what a country boy I am. There are literally hundreds of people crawling around on the streets, and here I am, toting a large rolling suitcase, a laptop, and a backpack, and looking totally clueless! Where is my hotel? I was definitely a prime target for predators just looking to make a quick buck. Within seconds I heard, &amp;ldquo;Where you looking to go? I&#39;ve got a map.&amp;rdquo; I quickly responds with &amp;ldquo;I&#39;ve got it, thanks.&amp;rdquo; Of course, I didn&#39;t have it. But I didn&#39;t have 20 bucks for the guy either! Not a few more steps up the sidewalk I&#39;m confronted by Indian monks wanting to share their religion with me. I did have a nice conversation with this guy and got him to take one of my pocket Gospels of John (thank you Pocket Testament League!). Finally a nice family pointed me in the right direction. I figured out that if you look like you&#39;re on a mission and you know what you&#39;re doing, people don&#39;t come up to you, so I put on my best serious face and headed for the Hotel Nikko. Now here I am, and from my window I&#39;ve got a nice view of the pool area which is surrounded by an interesting looking rock garden:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/SanFranciscoJavaOne2007/photo#5061188992248619858&#34;&gt;&lt;img src=&#34;http://lh3.google.com/image/matt.stine/Rjz0krgYo1I/AAAAAAAAAA8/G7sMo_WekFc/s288/DSCN1000.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also can see what looks like a potentially good Thai restaurant on the corner:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://picasaweb.google.com/matt.stine/SanFranciscoJavaOne2007/photo#5061188940709012290&#34;&gt;&lt;img src=&#34;http://lh3.google.com/image/matt.stine/Rjz0hrgYo0I/AAAAAAAAAA0/poC9lBKXNDw/s288/DSCN0999.JPG&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The reviews on Google Maps look promising!&lt;/p&gt;
&lt;p&gt;On a final note for this entry, I desperately miss my family. Our goodbye at Memphis International was tear-filled, especially by Wendy. I haven&#39;t been this far away from them in a LOOOOONG time. In fact, Abby was only about 10 months old the last time I went on a business trip without them. Isabella and Ali Kate weren&#39;t even conceived yet! I managed to get a web camera for the trip, so I&#39;m going to send them a video message every day. Check your email sweetheart! I love you all SO MUCH!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>siam thai restaurant doesnt disappoint</title>
      <link>https://www.mattstine.com/2007/05/05/siam-thai-restaurant-doesnt-disappoint/</link>
      <pubDate>Sat, 05 May 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/05/05/siam-thai-restaurant-doesnt-disappoint/</guid>
      <description>&lt;p&gt;I ended up at the restaurant across the street from the one pictured in my last entry. I found out from reading the reviews that it was the original, and then opened an additional location across the street. Strange, huh? At any rate, the Chicken Satay was definitely a 5-star dish for me. Even better than Bhan Thai back home in Memphis. I followed that up w/ the Thai Fried Rice w/ Beef. Also awesome. I will probably eat here again during the week.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>welcome</title>
      <link>https://www.mattstine.com/2007/04/30/welcome/</link>
      <pubDate>Mon, 30 Apr 2007 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2007/04/30/welcome/</guid>
      <description>&lt;p&gt;I plan to start posting here on Saturday, May 5, 2007. Look for photos, videos, and session synopses, as well as miscellaneous banter about JavaOne 2007 in San Francisco, CA!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>matt rtfm commons collections has closures</title>
      <link>https://www.mattstine.com/2006/08/17/matt-rtfm-commons-collections-has-closures/</link>
      <pubDate>Thu, 17 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/17/matt-rtfm-commons-collections-has-closures/</guid>
      <description>&lt;p&gt;Thanks to everyone who pointed me to &lt;a href=&#34;http://jakarta.apache.org/commons/collections/&#34;&gt;Commons Collections&lt;/a&gt; and its &lt;a href=&#34;http://jakarta.apache.org/commons/collections/api-release/org/apache/commons/collections/functors/package-summary.html&#34;&gt;Functor package&lt;/a&gt; yesterday. To me, this is just one step below having closures natively present in the language. FYI, I was able to remove all duplication from my class and reduce the LOC from 211 to 136 - in other words, 75 lines of useless code GONE.&lt;/p&gt;
&lt;p&gt;Here is what I did. First, I defined Predicates for each of my conditions. The simplest ones called a boolean method on the User object:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private final Predicate isX = new Predicate() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public boolean evaluate(Object object) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     return ((User) object).isX();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only slightly more complicated ones checked to see if a given Collection was empty on the User object:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private final Predicate isX = new Predicate() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  public boolean evaluate(Object object) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     return CollectionUtils.isNotEmpty(((User) object).getItems());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I defined a method that would check the delegations for the User to see if any of them were an X:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boolean checkDelegations(User user, Predicate checkPredicate) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return CollectionUtils.exists(user.getDelegations(), checkPredicate);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, I implemented the security methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public boolean canDoThis() {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return isX.evaluate(loggedInUser) || checkDelegations(loggedInUser, isX);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe it isn’t the most elegant or simplest of solutions, but it sure is a lot better than what I posted yesterday!&lt;/p&gt;
&lt;p&gt;P.S. Since this is a Christian blog, I must remind you that RTFM stands for Read The &lt;strong&gt;FINE&lt;/strong&gt; Manual!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>java needs closures</title>
      <link>https://www.mattstine.com/2006/08/16/java-needs-closures/</link>
      <pubDate>Wed, 16 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/16/java-needs-closures/</guid>
      <description>&lt;p&gt;I’m sure everyone is sick of reading this same rant over and over, but I just had to add more fuel to the fire. I’m attempting to implement access privilege delegation in a JSF application - basically, users can delegate their ability to do “stuff” in our application to other users. I have a backing bean that has several methods that are called by the JSF components, returning whether or not to render that component based on security privileges. Well, I now have to make all of those methods aware of delegation! I have something like this in several methods:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boolean notX = (loggedInUser.isX());&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;if (notX) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  boolean result = false;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  Set delegations = loggedInUser.getDelegations();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  for (Iterator i = delegations.iterator(); i.hasNext();) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     User delegator = (User) i.next();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     if (delegator.isX()) {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        result = true;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        break;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return result;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;} else {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  return true;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, it would be nice if I could extract the contents of that if block into a new method, say “checkDelegations()”. Unfortunately, the isX() that I need to call is different for every method following this pattern. I’d like to be able to pass a function that calls isX() on the delegator into the checkDelegations() method. No dice in Java. Does anyone else have a solution to this problem?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>it seems that appfuse has a competitor</title>
      <link>https://www.mattstine.com/2006/08/15/it-seems-that-appfuse-has-a-competitor/</link>
      <pubDate>Tue, 15 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/15/it-seems-that-appfuse-has-a-competitor/</guid>
      <description>&lt;p&gt;I found &lt;a href=&#34;http://blogs.opensymphony.com/plightbo/2006/08/project_able_a_complete_java_w.html&#34;&gt;Project Able&lt;/a&gt; while reading &lt;a href=&#34;http://www.analienandastranger.com/?p=25&#34;&gt;Raible’s blog&lt;/a&gt; this morning. While it doesn’t claim to duplicate everything that AppFuse does (i.e. they pick a framework and stick with it instead of providing choice), they are doing some neat things. I may take a look at it if I ever have time. &lt;img src=&#34;http://www.analienandastranger.com/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Project Able is a full Java-based web development stack designed to make web development painless. In a sense, it is an attempt to bring together quality opensource tools in one cohesive stack, similar to what Rails has done for Ruby, while also encouraging common practices I’ve used in software engineering for a long time.&lt;/p&gt;
&lt;p&gt;It is very similar to projects such as Trails, Grails, and AppFuse. However, there are a few key differences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The stack components are different (WebWork, Spring, iBatis, etc).&lt;/li&gt;
&lt;li&gt;In addition to the basic framework, Able also encourages common development techniques and patterns (more below).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>raiblee28099s wiki appfuseroadmap</title>
      <link>https://www.mattstine.com/2006/08/15/raiblee28099s-wiki-appfuseroadmap/</link>
      <pubDate>Tue, 15 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/15/raiblee28099s-wiki-appfuseroadmap/</guid>
      <description>&lt;p&gt;Raible updated the &lt;a href=&#34;http://raibledesigns.com/wiki/AppFuseRoadmap.html&#34;&gt;AppFuseRoadmap&lt;/a&gt; yesterday. I’m really excited about where the project is going. XDoclet has been a good friend, but I’m really happy to see its demise in favor of annotations. JDK 5 and JSP 2.0 will also be really helpful - I’ve wanted to leverage these technologies for a long time, but haven’t had an easy way to do so. I think the most interesting thing for me will be the switch over to Maven 2. I have absolutely ZERO experience with Maven, other that seeing the pretty websites that it generates for many of my favorite open source projects. I consider myself to be something of an Ant wizard, so I hope that I’ll be able to leverage that experience in Maven.&lt;/p&gt;
&lt;p&gt;It looks like TestNG replacing JUnit is a nice-to-have for 2.0 - I hope this becomes a configuration option. I don’t know anything about TestNG. Perhaps it’s time to learn. &lt;img src=&#34;http://www.analienandastranger.com/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:-)&#34;&gt;&lt;/p&gt;
&lt;p&gt;AppFuse 2.2 is where things are really going to start getting cool. Convention over configuration (ala RoR) will really speed development, and features by plugin will make my life really easier. I spend a lot of time stripping things out that I don’t need for particular projects - the time I save by using AppFuse is worth the pain of stripping them out - so this will be yet another way that AppFuse will make Java EE development a pleasure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>seven simple reasons to use appfuse</title>
      <link>https://www.mattstine.com/2006/08/09/seven-simple-reasons-to-use-appfuse/</link>
      <pubDate>Wed, 09 Aug 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/08/09/seven-simple-reasons-to-use-appfuse/</guid>
      <description>&lt;p&gt;I’ve wanted for some time now to write a blog entry promoting my favorite open source project - AppFuse. Since I started developing web applications using AppFuse as a base, I can truly say that I’ve rediscovered the joy of software development. I’ve found no other technology or methodology that has allowed me to place as much focus as I now do on solving business problems and not on technology ramp-up or figuring out the eccentricities of “framework X.” In this article, &lt;a href=&#34;http://raibledesigns.com/&#34;&gt;Matt Raible&lt;/a&gt;, the founder of the &lt;a href=&#34;http://www.appfuse.org/&#34;&gt;AppFuse&lt;/a&gt; project, humbly states very compelling reasons that you should use AppFuse for your J2EE development. To summarize, here are the 7 reaons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Integration&lt;/li&gt;
&lt;li&gt;Automation&lt;/li&gt;
&lt;li&gt;Security Features and Extensibility&lt;/li&gt;
&lt;li&gt;Code Generation with AppGen&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Read the article to get the meat:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www-128.ibm.com/developerworks/java/library/j-appfuse/&#34;&gt;Seven simple reasons to use AppFuse&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>i made raibles blog</title>
      <link>https://www.mattstine.com/2006/07/25/i-made-raibles-blog/</link>
      <pubDate>Tue, 25 Jul 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/07/25/i-made-raibles-blog/</guid>
      <description>&lt;p&gt;Apparently Matt Raible thought my JSF modifications to the AppFuse-Compass tutorial were good enough to merit a mention on his blog: &lt;a href=&#34;http://raibledesigns.com/page/rd?entry=appfuse_videos_updated_for_1&#34;&gt;AppFuse Videos updated for 1.9.3&lt;/a&gt;.  Check out the bottom of the entry.&lt;/p&gt;
&lt;p&gt;Compass really is a nice tool - I was able to provide search capabilities for an app I&#39;m working on right now with about 2 days worth of work (having never worked w/ Compass before), and man is it fast! I can&#39;t get a search to exceed 1.5 seconds!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jfreechart appfuse integration</title>
      <link>https://www.mattstine.com/2006/07/25/jfreechart-appfuse-integration/</link>
      <pubDate>Tue, 25 Jul 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/07/25/jfreechart-appfuse-integration/</guid>
      <description>&lt;p&gt;I recently finished integrating &lt;a href=&#34;http://http//www.jfree.org/jfreechart/&#34;&gt;JFreeChart&lt;/a&gt; with AppFuse for a project I&#39;m working on. JFreeChart is a really powerful Java chart library. If your application has any requirements for charts/graphs, I highly recommend it. The user manual and demo code come with a price tag ($39.95 for a single developer), but they are well worth the purchase - especially the demo code. If you don&#39;t have the $$$, the &lt;a href=&#34;http://www.jfree.org/phpBB2/viewforum.php?f=3&#34;&gt;support forum&lt;/a&gt; is also very helpful.&lt;/p&gt;
&lt;p&gt;I plan to put together a tutorial to help anyone interested in using JFreeChart in their AppFuse application. Look for it here and on the appfuse-user mailing list. It will be based on JSF since that&#39;s what I&#39;m using right now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>stiff asks matt answers</title>
      <link>https://www.mattstine.com/2006/07/24/stiff-asks-matt-answers/</link>
      <pubDate>Mon, 24 Jul 2006 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2006/07/24/stiff-asks-matt-answers/</guid>
      <description>&lt;p&gt;I found an interesting article this morning by way of &lt;a href=&#34;http://digg.com/programming&#34;&gt;Digg.com Programming&lt;/a&gt;: &lt;a href=&#34;http://sztywny.titaniumhosting.com/2006/07/23/stiff-asks-great-programmers-answers/&#34;&gt;Stiff asks, great programmers answer&lt;/a&gt;. The author posed 5 questions to some of the more well-known programmers of today, and their answers made for very interesting reading. Not to say that I&#39;m a great programmer or anything, but I thought it might be a fun thought exercise to answer these questions myself. Here we go:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How did you learn programming? Were any schools of any use? Or maybe you didn&#39;t even bother with attending any schools &lt;img src=&#34;http://www.analienandastranger.com/wp-includes/images/smilies/icon_smile.gif&#34; alt=&#34;:)&#34;&gt;  ?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How did I learn programming? There have been several different stages of my development as a programmer. I started out copying BASIC programs from magazines into my Atari 800 and then modifying them to see what would happen. This progressed through the Commodore 64 and Apple II. In the 8th grade I earned the distinction of “Best Programmer,” not that that means very much - I figured out how to make the U.S. flag program run with only a handful of lines of code using loop and control structures vs. typing out the entire graphics display line by line.&lt;/p&gt;
&lt;p&gt;In High School I jumped to the exciting world of Quick Basic. I can&#39;t remember the exact name of the course I took, but it was not very far above the level of what I did in Middle School/Junior High, nor was it very far below the level of my intro-level course in College. As I recall, we spent a lot of time hacking the machines to see what we could do with them. Of course you couldn&#39;t do anything cool like change your class schedule ala Hackers.&lt;/p&gt;
&lt;p&gt;At some point I decided I would major in Computer Science at the University of Mississippi. I really enjoyed my time at Ole Miss, and I learned a lot - unfortunately, I also picked up a lot of bad programming habits. You ask were schools of any use? Definitely - one of my favorite professors secured me an internship at St. Jude, which led to my current and only full-time software development job. It wasn&#39;t until I started developing real code for real clients that I got truly serious about programming as a profession. It was then that I learned that hacking out quick and dirty scripts that worked most of the time and would get past a graduate assistant&#39;s grading wasn&#39;t what programming was all about. I think the turning point of my career was when I attended XP/Agile Universe in 2002. It was here that I really started to grasp agility, test-driven development, refactoring, and simple design - principles and practices that I consider essential to developing software of any magnitude.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What do you think is the most important skill every programmer should possess?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&#39;ll answer this question very much like David Heinemeier Hansson answered the 10-100 times question below. I think the ability to quickly view a problem in the abstract and then mentally apply Occam&#39;s razor to it until you have what is needed for implementation is essential to programming. When I&#39;m not managing a project team/schedule - i.e. I&#39;m actually doing software development - I would consider this to be the core of what I do every day.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do you think mathematics and/or physics are important skills for a programmer? Why?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can&#39;t remember ever using any of the physics I&#39;ve learned. Take that back, the concept of the electromagnetic field was useful when I was trying to understand Mass Spectrometry, which is at the heart of several of my clients&amp;rsquo; work. Mathematics, on the other hand, is key. The concepts I learned in my discrete mathematics course seem to lie under the surface of many of the problems that I face. Even if I don&#39;t directly apply the mathematics on a day-to-day basis, the “way of thinking” that you develop when studying mathematics really sharpens you as a programmer in my opinion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What do you think will be the next big thing in computer programming? X-oriented programming, Y language, quantum computers, etc?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like many of those interviewed, I&#39;m not into fortune telling and/or hype. The next big thing always quickly becomes yesterday&#39;s news as we cut through the hype to the core value of what product/technique/practice X offers. We then integrate that core value into our regular day-to-day toolset and then go back to business as usual.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you had three months to learn one relatively new technology, which one would you choose?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;THREE MONTHS?!?!? WOW! Although it isn&#39;t that new, it&#39;s still fairly new to me. I would spend the next three months learning everything I can about &lt;a href=&#34;http://www.springframework.org/&#34;&gt;the Spring framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What do you think makes some programmers 10 or 100 times more productive than others?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This flies in the face of a lot of the agile methodologies out there, but I think solving as many problems as you can without interrupting any of your other team members will turn you into an uber-productive programmer. I taught myself 90% of what I know through self-study and independent troubleshooting. If every time you have an issue with your work you quickly run to someone on your team that “knows that software/technology/issue better,” you&#39;ll never advance past infancy as a programmer. Just like babies have to be spoon-fed, so do infant programmers. You have to learn how to feed yourself. The next time you have a problem in code that you&#39;re not familiar with, trace the execution, line-by-line. Understand for yourself how the program works. If you run across a technology or API that you&#39;re not familiar with, study the available resources related to it. “Google it” for crying out loud. The more you do this, the better you&#39;ll get at it. Soon you&#39;ll find yourself asking questions of your team members only about 5% of the time, and you&#39;ll become the most productive member of your team. Don&#39;t believe me? Give it a try.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are your favorite tools (operating system, programming/scripting language, text editor, version control system, shell, database engine, other tools you can&#39;t live without) and why do you like them more than others?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My current tool set includes IntelliJ IDEA (as well as a smattering of Eclipse when I need it), &lt;a href=&#34;http://www.appfuse.org/&#34;&gt;AppFuse&lt;/a&gt; - probably the best thing that has ever happened to J2EE development, Cygwin, Tomcat, and MySQL. If I&#39;m doing anything else in a text editor besides coding, vim is my friend. Wiki-wise we&#39;re very invested in Confluence - it rocks as a wiki. Of course I really can&#39;t live without Firefox - besides my IDE I probably spend more time there than anywhere else.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is your favorite book related to computer programming?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I think I have to call a tie here between &lt;a href=&#34;http://www.amazon.com/gp/product/0135974445/sr=8-2/qid=1153761714/ref=pd_bbs_2/102-7769528-6502532?ie=UTF8&#34;&gt;Agile Software Development, Principles, Patterns, and Practices&lt;/a&gt; by Robert C. Martin and &lt;a href=&#34;http://www.amazon.com/gp/product/0131016490/sr=1-1/qid=1153761786/ref=pd_bbs_1/102-7769528-6502532?ie=UTF8&amp;amp;s=books&#34;&gt;Test Driven Development: A Practical Guide&lt;/a&gt; by David Astels.  Both of these books were instrumental in my development as a more agile developer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is your favorite book NOT related to computer programming?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an easy one - the Bible.  My main translation is the &lt;a href=&#34;http://www.esv.org/&#34;&gt;English Standard Version&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If I had to choose a book that wasn&#39;t the Bible, it would be &lt;a href=&#34;http://www.livingwaters.com/Merchant2/merchant.mv?Screen=PROD&amp;amp;Product_Code=102&#34;&gt;The Way of the Master&lt;/a&gt; by Ray Comfort.  This book literally changed my life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are your favorite music bands/performers/composers?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Right now my favorite artists include The David Crowder Band, Casting Crowns, and Todd Agnew.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>abby in costume</title>
      <link>https://www.mattstine.com/2005/11/16/abby-in-costume/</link>
      <pubDate>Wed, 16 Nov 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/11/16/abby-in-costume/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/mattstine/63930699/&#34;&gt;&lt;img src=&#34;http://static.flickr.com/24/63930699_e249fb2cc1_m.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.flickr.com/photos/mattstine/63930699/&#34;&gt;Abby in Costume&lt;/a&gt; &lt;br&gt;
Originally uploaded by &lt;a href=&#34;http://www.flickr.com/people/mattstine/&#34;&gt;javasage1978&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I realized I haven&#39;t posted any pictures of the girls - here is Abby before the fall fun festival at Bellevue.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>flickr</title>
      <link>https://www.mattstine.com/2005/11/16/flickr/</link>
      <pubDate>Wed, 16 Nov 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/11/16/flickr/</guid>
      <description>&lt;p&gt;This is a test post from &lt;a href=&#34;http://www.flickr.com/r/testpost&#34;&gt;&lt;img src=&#34;http://www.flickr.com/images/flickr_logo_blog.gif&#34; alt=&#34;flickr&#34;&gt;&lt;/a&gt;, a fancy photo sharing thing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>isabella in costume</title>
      <link>https://www.mattstine.com/2005/11/16/isabella-in-costume/</link>
      <pubDate>Wed, 16 Nov 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/11/16/isabella-in-costume/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.flickr.com/photos/mattstine/63930698/&#34;&gt;&lt;img src=&#34;http://static.flickr.com/31/63930698_98abc2ade9_m.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www.flickr.com/photos/mattstine/63930698/&#34;&gt;Isabella in Costume&lt;/a&gt; &lt;br&gt;
Originally uploaded by &lt;a href=&#34;http://www.flickr.com/people/mattstine/&#34;&gt;javasage1978&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&#39;s Isabella right before we went in to the fun festival&amp;hellip;isn&#39;t she cute?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>my spiritual father goes home</title>
      <link>https://www.mattstine.com/2005/11/15/my-spiritual-father-goes-home/</link>
      <pubDate>Tue, 15 Nov 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/11/15/my-spiritual-father-goes-home/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://photos1.blogger.com/blogger/2695/522/1600/Adrian_Rogers2.jpg&#34;&gt;&lt;img src=&#34;http://photos1.blogger.com/blogger/2695/522/320/Adrian_Rogers2.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;br&gt;
This morning, Dr. Adrian Rogers walked into glory. Dr. Rogers was my first pastor. I never had the opportunity to share this with him, but he is ultimately the man who led me to a saving knowledge of Jesus Christ. I experienced false conversion as a child, was never baptized, and never experienced the true change of heart that comes from the new birth. Shortly after our marriage, my wife and I joined Bellevue Baptist Church, where I was then baptized. I realized that I knew very little about the foundations of my faith, so when I learned that Dr. Rogers taught a course on Wednesday nights called &amp;ldquo;Back to the Basics: What Every Christian Ought to Know,&amp;rdquo; I quickly signed up. It was the second or third week of the class when Dr. Rogers spoke on the subject, &amp;ldquo;How to Be Saved and Know It.&amp;rdquo; During this class Dr. Rogers revealed that as a young man he had struggled with doubting his salvation.&lt;/p&gt;
&lt;p&gt;Quoting from &lt;a href=&#34;http://www.bellevue.org/templates/cusbellevue1103/details.asp?id=1360&amp;amp;PID=33044&amp;amp;mast=&#34;&gt;this message&lt;/a&gt;, Adrian Rogers said, &amp;ldquo;One night I looked up into the heavens and said, &amp;lsquo;God, I&#39;ve got to have assurance. I don&#39;t know if I&#39;m lost and the Holy Spirit has me under conviction, or I&#39;m saved and the devil is trying to get me to doubt my salvation. But one thing I know: You said if I would believe on You, You would save me. So, Lord, right now, I trust You to save me.&#39;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I went home that evening and prayed that very prayer, and the rest is spiritual history. Though I didn&#39;t become instantly perfect (and I&#39;m still quite far away from perfection), I finally experienced that change of heart and life that comes from salvation. I&#39;ve since been baptized again (to get it in the right order), as after the self-examination commanded by &lt;a href=&#34;http://www.biblegateway.com/passage/?search=2%20Corinthians%2013:5;&amp;amp;version=31;&#34;&gt;2 Corinthians 13:5&lt;/a&gt; I realized that that night was when I was truly saved.   So, to Heaven I send a heartfelt thank you to Dr. Adrian Rogers, and I look forward to seeing him again one day.&lt;/p&gt;
&lt;p&gt;Besides him leading me to Christ, if that wasn&#39;t enough, I&#39;ve learned a great deal from Dr. Rogers about what it means to be a man of God and a great husband and father. He&#39;s taught me from the pulpit, from books, and from personal example. He truly was, and still is, a good and faithful servant of the Lord Jesus Christ.&lt;/p&gt;
&lt;p&gt;For more information about the passing of Dr. Rogers, visit &lt;a href=&#34;http://www.adrianrogers.org/&#34;&gt;&lt;a href=&#34;http://www.adrianrogers.org&#34;&gt;http://www.adrianrogers.org&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ruby on rails dev framework on track for growth</title>
      <link>https://www.mattstine.com/2005/11/02/ruby-on-rails-dev-framework-on-track-for-growth/</link>
      <pubDate>Wed, 02 Nov 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/11/02/ruby-on-rails-dev-framework-on-track-for-growth/</guid>
      <description>&lt;p&gt;It appears that Ruby on Rails is changing the WORLD of software development - I wasn&#39;t aware of just how much influence it was having in the world of other languages. Here Marc Fleury (JBoss CEO) says that it had a huge influence on Seam - JBoss&#39;s venture into the Java web framework space. And then the list of RoR clones: Biscuit (PHP), Grails (Java), Monorail (.NET), Turbo Gears (Python), Cake PHP, Subway (Python), Catalyst (Perl)&amp;hellip;..All I can say is that the RoR guys must have done something right!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.eweek.com/article2/0,1895,1880199,00.asp&#34;&gt;Ruby on Rails Dev Framework on Track for Growth&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nbc2 news online the mystery of the eye</title>
      <link>https://www.mattstine.com/2005/10/31/nbc2-news-online-the-mystery-of-the-eye/</link>
      <pubDate>Mon, 31 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/31/nbc2-news-online-the-mystery-of-the-eye/</guid>
      <description>&lt;p&gt;This is pretty wild&amp;hellip;.the number 2 appears in the eye of Hurricane Wilma.  They insist that the image and video were not altered&amp;hellip;.in fact you can barely see it at this NOAA link as well: &lt;a href=&#34;http://www.srh.noaa.gov/data/radar/archive/Tue/kamx/241002.gif&#34;&gt;&lt;a href=&#34;http://www.srh.noaa.gov/data/radar/archive/Tue/kamx/241002.gif&#34;&gt;http://www.srh.noaa.gov/data/radar/archive/Tue/kamx/241002.gif&lt;/a&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.nbc-2.com/articles/readarticle.asp?articleid=4715&amp;amp;z=3&amp;amp;p=&#34;&gt;NBC2 News Online - The mystery of the eye&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>it observer a glimpse at the future of programming languages oreilly releases beyond java</title>
      <link>https://www.mattstine.com/2005/10/17/it-observer-a-glimpse-at-the-future-of-programming-languages-oreilly-releases-beyond-java/</link>
      <pubDate>Mon, 17 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/17/it-observer-a-glimpse-at-the-future-of-programming-languages-oreilly-releases-beyond-java/</guid>
      <description>&lt;p&gt;The Ruby on Rails hype continues - Bruce Tate considers the possibility that it may be &amp;ldquo;the next big thing,&amp;rdquo; as well as letting us know that &amp;ldquo;It&#39;s time to start paying attention again. It&#39;s time to look at the horizon, beyond Java.&amp;rdquo;  I&#39;ve been thinking about this issue a lot lately - I mean, even 10 years ago none of us could have predicted that we&#39;d be using Java as much and in the way we are now.  It was a C/C++ world.  Now we don&#39;t know what we&#39;d do without Java - or do we.  Scripting languages seem to have the momentum right now - even in the Javaspace (see Groovy).  Ruby on Rails, as much as I&#39;ve seen of it, is EXTREMELY impressive.  If we can repeatedly solve the BIG problems in a scalable, maintainable way with these languages, plus we get the added benefits of dynamic typing, etc., why wouldn&#39;t we transition?  I&#39;m excited to check this book out, and also excited to be in the web development space right now.  Who knows - 10 years from now we might be looking at &amp;ldquo;Beyond Rails.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ebcvg.com/press.php?id=1761&#34;&gt;IT Observer - A Glimpse at the Future of Programming Languages: O&#39;Reilly Releases &amp;ldquo;Beyond Java&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>foxnewscom the oreilly factor talking points the aclu exposed</title>
      <link>https://www.mattstine.com/2005/10/14/foxnewscom-the-oreilly-factor-talking-points-the-aclu-exposed/</link>
      <pubDate>Fri, 14 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/14/foxnewscom-the-oreilly-factor-talking-points-the-aclu-exposed/</guid>
      <description>&lt;p&gt;Bill O&#39;Reilly slams the ACLU for being what it is - not a defender of Constitutional rights, but a militant organization fighting for its own radical, secular, progressive agenda. BO states:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The ACLU simply wants a different country, a nation where conduct it approves of, public sexual displays, child molestation literature is allowed. But the ACLU wants to inhibit conduct it disagrees with, like protesting the border and celebrating the birth of Jesus. That&#39;s what&#39;s going on.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Read more at &lt;a href=&#34;http://www.foxnews.com/story/0,2933,171995,00.html&#34;&gt;FOXNews.com - The O&#39;Reilly Factor - Talking Points - The ACLU Exposed.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>onlampcom what is ruby on rails</title>
      <link>https://www.mattstine.com/2005/10/14/onlampcom-what-is-ruby-on-rails/</link>
      <pubDate>Fri, 14 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/14/onlampcom-what-is-ruby-on-rails/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.onlamp.com/pub/a/onlamp/2005/10/13/what_is_rails.html&#34;&gt;What Is Ruby on Rails&lt;/a&gt; by Curt Hibbs &amp;ndash; Ruby on Rails is an impressive web development framework that will soon reach version 1.0. While there&#39;s a lot of buzz, it can sometimes be difficult to discern the steak beneath the sizzle. Curt Hibbs walks through the features and pieces of Ruby on Rails to show how it fits together and where its big benefits come from.&lt;/p&gt;
&lt;p&gt;I read this article this morning and I have to say it makes me even more impressed with Rails. I think it has the potential to be a BIG player in the web application development space - if not to replace Java, PHP, etc., with Ruby as many developers&amp;rsquo; platform of choice, it will definitely challenge the existing framework developers for Java, etc., to scale even bigger heights when it comes to features and ease of development.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>spurgeon morning and evening</title>
      <link>https://www.mattstine.com/2005/10/14/spurgeon-morning-and-evening/</link>
      <pubDate>Fri, 14 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/14/spurgeon-morning-and-evening/</guid>
      <description>&lt;p&gt;Spurgeon&#39;s evening devotional for today packs a punch.  I can&#39;t get over the last few sentences:&lt;/p&gt;
&lt;p&gt;O professor, too little separated from sinners, you know not what you lose by your conformity to the world. It cuts the tendons of your strength, and makes you creep where you ought to run. Then, for your own comfort&#39;s sake, and for the sake of your growth in grace, if you be a Christian, be a Christian, and be a marked and distinct one. __&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ccel.org/ccel/spurgeon/morneve.d1014pm.html&#34;&gt;Read Spurgeon&#39;s Evening for Oct 14.&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>apache ibatis</title>
      <link>https://www.mattstine.com/2005/10/12/apache-ibatis/</link>
      <pubDate>Wed, 12 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/12/apache-ibatis/</guid>
      <description>&lt;p&gt;One technology that I picked up on in the last session of the Java In Action conference was &lt;a href=&#34;http://ibatis.apache.org/&#34;&gt;Apache iBATIS&lt;/a&gt;. It is a really cool framework that maps SQL queries to Java objects. It provides the capability to do really AWESOME things with dynamic SQL, and eliminates the N+1 query problem. I&#39;ve been playing with it on a project the last couple of days and I&#39;m VERY satisfied with what I&#39;ve seen so far. It has the potential to really help us out in some application hot spots and places w/ a great deal of dynamic SQL. You should definitely take a peek.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>supernatural regeneration</title>
      <link>https://www.mattstine.com/2005/10/12/supernatural-regeneration/</link>
      <pubDate>Wed, 12 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/12/supernatural-regeneration/</guid>
      <description>&lt;p&gt;I am about halfway through reading &lt;a href=&#34;http://rzim.org/publications/jttran.php?seqid=106&#34;&gt;an interview with Ravi Zacharias in the Fall 2005 issue of Just Thinking from Ravi Zacharias International Ministries&lt;/a&gt;. The interview was conducted by Major John Carter of the Salvation Army, and concerned Leadership and Calling. I was extremely taken by a quote by RZ in the interview which I&#39;ll reproduce below:&lt;/p&gt;
&lt;p&gt;I really think that today, as Christian apologists, that the biggest challenge to the faith is not an intellectual question. In fact, I have not heard an intellectual question to the faith that has disturbed me. I am more convinced than ever of the message of the Gospel. But the biggest challenge to the Christian faith is this: If the message that we have lays claim to a supernatural regeneration, then why is it that we do not see that regeneration more often? No other religion claims a supernatural regeneration. They may claim ethics and morality. Hinduism does. But we are the only ones who claim a new birth. Born of the Holy Spirit, our hungers have changed, our disciplines have changed, our behavior has changed. If it is a supernaturally engendered thing, why do we not see it more often? And if that is true of the common person in conversion, how much more true it must be of ones in leadership. So I believe character is essential, and without that, you cannot serve.&lt;/p&gt;
&lt;p&gt;To me this really gets to the heart of the matter - how can I or anyone else claim that Jesus Christ has made a difference in my life, that I have been supernaturally changed, if I continue to go on living as I did before I was &amp;ldquo;converted?&amp;rdquo; And what&#39;s more, how can I position myself as a teacher of God&#39;s Word if I don&#39;t do the things that Christ has taught us to do - I&#39;m expecting my students to do them, why don&#39;t I? It&#39;s a matter of being a doer of the Word and not a hearer only. As Christians we all need to check ourselves - are we truly in the faith? And if so, are we daily placing ourselves on the altar of living sacrifice, daily making the decision to leave our desires behind and follow the will of Christ? I&#39;m so thankful for RZ&#39;s statement, as it really touched me at a point at which I needed to be touched.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>post 1</title>
      <link>https://www.mattstine.com/2005/10/10/post-1/</link>
      <pubDate>Mon, 10 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/10/post-1/</guid>
      <description>&lt;p&gt;This is my first post to this blog.  I&#39;ve just returned to work after spending the last week at TheServerSide.com&#39;s Java in Action conference in Orlando, FL.  Got to take the family with me and spend a day at Magic Kingdom.  A good trip, and learned a lot of new technologies.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ruby on rails</title>
      <link>https://www.mattstine.com/2005/10/10/ruby-on-rails/</link>
      <pubDate>Mon, 10 Oct 2005 00:00:00 +0000</pubDate>
      <guid>https://www.mattstine.com/2005/10/10/ruby-on-rails/</guid>
      <description>&lt;p&gt;I&#39;ve spent quite a bit of time playing with this &lt;a href=&#34;http://www.rubyonrails.org&#34;&gt;Ruby on Rails&lt;/a&gt; thing.  It&#39;s amazing that I was able to build such a nice basic CRUD app w/ only 57 lines of code.  Now, I know this app didn&#39;t do much - just manage an Online Cookbook (&lt;a href=&#34;http://www.onlamp.com/pub/a/onlamp/2005/01/20/rails.html&#34;&gt;i.e. the OnLAMP.com Rolling on Rails tutorial&lt;/a&gt;).  I&#39;m going to go through &lt;a href=&#34;http://rails.homelinux.org/&#34;&gt;&amp;ldquo;Four Days on Rails&amp;rdquo;&lt;/a&gt; next since it purports to be a tutorial with a &amp;ldquo;Real App.&amp;rdquo;  I&#39;m excited about maybe using Ruby for rapid prototyping for our enterprise-class Java apps&amp;hellip;maybe even for production apps.  Who knows&amp;hellip;Ruby may replace Java? :-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
